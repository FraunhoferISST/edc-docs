"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[4605],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>m});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},d=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),u=l(t),m=o,y=u["".concat(s,".").concat(m)]||u[m]||p[m]||i;return t?r.createElement(y,a(a({ref:n},d),{},{components:t})):r.createElement(y,a({ref:n},d))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var l=2;l<i;l++)a[l]=t[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},40147:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var r=t(87462),o=(t(67294),t(3905));const i={},a="Transaction Synchronization",c={unversionedId:"submodule/Connector/docs/developer/decision-records/2022-12-07-transaction-synchronization/README",id:"submodule/Connector/docs/developer/decision-records/2022-12-07-transaction-synchronization/README",title:"Transaction Synchronization",description:"Decision",source:"@site/docs/submodule/Connector/docs/developer/decision-records/2022-12-07-transaction-synchronization/README.md",sourceDirName:"submodule/Connector/docs/developer/decision-records/2022-12-07-transaction-synchronization",slug:"/submodule/Connector/docs/developer/decision-records/2022-12-07-transaction-synchronization/",permalink:"/edc-docs/docs/submodule/Connector/docs/developer/decision-records/2022-12-07-transaction-synchronization/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/docs/developer/decision-records/2022-12-07-transaction-synchronization/README.md",tags:[],version:"current",frontMatter:{}},s={},l=[{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Approach",id:"approach",level:2}],d={toc:l};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"transaction-synchronization"},"Transaction Synchronization"),(0,o.kt)("h2",{id:"decision"},"Decision"),(0,o.kt)("p",null,"The EDC ",(0,o.kt)("inlineCode",{parentName:"p"},"TransactionContext")," will add the ability to register transaction synchronizations to receive callbacks prior to when a transaction is committed or rolled back."),(0,o.kt)("h2",{id:"rationale"},"Rationale"),(0,o.kt)("p",null,"Transaction synchronization is a well-established pattern (.cf JTA) and will be used to automatically close resources and reduce the risk of runtime resource leaks. For example,\n",(0,o.kt)("inlineCode",{parentName:"p"},"SqlQueryExecutor")," will use a transaction synchronization to close JDBC resources associated with streams returned from the ",(0,o.kt)("inlineCode",{parentName:"p"},"executeQuery")," method:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"public static <T> Stream<T> executeQuery(Connection connection, boolean closeConnection, ResultSetMapper<T> resultSetMapper, String sql, Object... arguments)")),(0,o.kt)("h2",{id:"approach"},"Approach"),(0,o.kt)("p",null,"Synchronizations must implement the ",(0,o.kt)("inlineCode",{parentName:"p"},"TransactionSynchronization")," interface:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"@FunctionalInterface\ninterface TransactionSynchronization {\nvoid beforeCompletion();\n}"),"\nTransaction synchronizations are registered using the ",(0,o.kt)("inlineCode",{parentName:"p"},"registerSynchronization")," method on ",(0,o.kt)("inlineCode",{parentName:"p"},"TransactionContext")," and will be associated with the active transaction context associated\nwith the current thread:"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"void registerSynchronization(TransactionSynchronization sync);")),(0,o.kt)("p",null,"Transaction synchronizations must only be registered when a transaction is active and will be cleared after the transaction commits or is rolled back. Transaction synchronizations\nwill be supported across all ",(0,o.kt)("inlineCode",{parentName:"p"},"TransactionContext")," implementations."))}p.isMDXComponent=!0}}]);