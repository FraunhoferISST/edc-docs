"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[5566],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(n),d=o,f=u["".concat(l,".").concat(d)]||u[d]||m[d]||a;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},44228:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const a={},i="API Core",s={unversionedId:"submodule/Connector/extensions/common/api/api-core/README",id:"submodule/Connector/extensions/common/api/api-core/README",title:"API Core",description:"contains central elements of any API functionality, such as Exception mappers, etc.",source:"@site/docs/submodule/Connector/extensions/common/api/api-core/README.md",sourceDirName:"submodule/Connector/extensions/common/api/api-core",slug:"/submodule/Connector/extensions/common/api/api-core/",permalink:"/edc-docs/docs/submodule/Connector/extensions/common/api/api-core/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/extensions/common/api/api-core/README.md",tags:[],version:"current",frontMatter:{}},l={},c=[{value:"Using a <code>DtoTransformer</code>",id:"using-a-dtotransformer",level:2}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"api-core"},"API Core"),(0,o.kt)("p",null,"contains central elements of any API functionality, such as Exception mappers, etc."),(0,o.kt)("h2",{id:"using-a-dtotransformer"},"Using a ",(0,o.kt)("inlineCode",{parentName:"h2"},"DtoTransformer")),(0,o.kt)("p",null,"Let's assume that there is a controller class ",(0,o.kt)("inlineCode",{parentName:"p"},"ExampleApiController")," with at least a ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," endpoint\n",(0,o.kt)("inlineCode",{parentName:"p"},"GET /api/v1/example/objects")," which returns a list of ",(0,o.kt)("inlineCode",{parentName:"p"},"ExampleObject"),"s.\nAnd there would also be an ",(0,o.kt)("inlineCode",{parentName:"p"},"ExampleObjectDto"),". All these things are implemented in an\n",(0,o.kt)("inlineCode",{parentName:"p"},":extensions:api:example")," extension."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Create a ",(0,o.kt)("inlineCode",{parentName:"li"},"ExampleObjectTransformer"),":")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class ExampleObjectTransformer implements DtoTransformer<ExampleObject, ExampleObjectDto>{\n    // implementation\n} \n")),(0,o.kt)("ol",{start:2},(0,o.kt)("li",{parentName:"ol"},"Register the transformer in your ",(0,o.kt)("inlineCode",{parentName:"li"},"ExampleApiExtension"),":")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"//ExampleApiExtension.java\n\n@Provides(DtoTransformerRegistry.class)\npublic class ExampleApiExtension implements ServiceExtension{\n    @Inject(required=false)\n    private DtoTransformerRegistry registry;\n    \n    @Inject\n    private WebService webService;\n    \n    @Override\n    public void initialize(ServiceExtensionContext context){\n        \n        if(registry == null){\n            registry= new DtoTransformerRegistryImpl();\n            context.registerService(DtoTransformerRegistry.class, registry);\n        }\n        \n        //register the transformer\n        var transformer = new ExampleObjectTransformer(/*params*/);\n        registry.register(transformer);\n        \n        //register controller\n        var ctrl= new ExampleApiController(registry);\n        webService.registerResource(ctrl); \n    }\n}\n")),(0,o.kt)("ol",{start:3},(0,o.kt)("li",{parentName:"ol"},"Use the transformer in the controller:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"\nimport java.util.stream.Collectors;\n\npublic class ExampleApiController {\n    // ...\n\n    @GET\n    @Path(/*the path*/)\n    public List<ExampleObjectDto> getAll() {\n\n        Stream<ExampleObject> objects = fetchFromSomewhere();\n\n        // not shown: error/failure handling\n        return objects.map(o -> registry.transform(o, ExampleObjectDto.class))\n                .filter(AbstractResult::succeeded)\n                .map(AbstractResult::getContent)\n                .collect(Collectors.toList());\n\n    }\n\n}\n")))}m.isMDXComponent=!0}}]);