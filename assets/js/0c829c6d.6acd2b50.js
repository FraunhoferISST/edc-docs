"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[3939],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>m});var i=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,i,r=function(e,t){if(null==e)return{};var a,i,r={},n=Object.keys(e);for(i=0;i<n.length;i++)a=n[i],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(i=0;i<n.length;i++)a=n[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=i.createContext({}),l=function(e){var t=i.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=l(e.components);return i.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var a=e.components,r=e.mdxType,n=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(a),m=r,h=d["".concat(c,".").concat(m)]||d[m]||u[m]||n;return a?i.createElement(h,o(o({ref:t},p),{},{components:a})):i.createElement(h,o({ref:t},p))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var n=a.length,o=new Array(n);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<n;l++)o[l]=a[l];return i.createElement.apply(null,o)}return i.createElement.apply(null,a)}d.displayName="MDXCreateElement"},6921:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>n,metadata:()=>s,toc:()=>l});var i=a(87462),r=(a(67294),a(3905));const n={},o="Distributed authorization sub-flow",s={unversionedId:"submodule/MinimumViableDataspace/docs/developer/decision-records/2022-06-16-distributed-authorization/README",id:"submodule/MinimumViableDataspace/docs/developer/decision-records/2022-06-16-distributed-authorization/README",title:"Distributed authorization sub-flow",description:"This sub-flow is used for a service to authenticate and authorize requests from a Dataspace Participant.",source:"@site/docs/submodule/MinimumViableDataspace/docs/developer/decision-records/2022-06-16-distributed-authorization/README.md",sourceDirName:"submodule/MinimumViableDataspace/docs/developer/decision-records/2022-06-16-distributed-authorization",slug:"/submodule/MinimumViableDataspace/docs/developer/decision-records/2022-06-16-distributed-authorization/",permalink:"/edc-docs/docs/submodule/MinimumViableDataspace/docs/developer/decision-records/2022-06-16-distributed-authorization/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/MinimumViableDataspace/docs/developer/decision-records/2022-06-16-distributed-authorization/README.md",tags:[],version:"current",frontMatter:{}},c={},l=[{value:"Participants",id:"participants",level:2},{value:"Overview",id:"overview",level:2},{value:"Pre-conditions",id:"pre-conditions",level:2},{value:"Flow sequence",id:"flow-sequence",level:2}],p={toc:l};function u(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,i.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"distributed-authorization-sub-flow"},"Distributed authorization sub-flow"),(0,r.kt)("p",null,"This sub-flow is used for a service to authenticate and authorize requests from a Dataspace Participant."),(0,r.kt)("h2",{id:"participants"},"Participants"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"Participant A"),", which performs a request to ",(0,r.kt)("em",{parentName:"li"},"Participant B"),". (",(0,r.kt)("em",{parentName:"li"},"Participant A")," could be a company enrolled within a dataspace.)"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"Participant B"),", which serves a request to ",(0,r.kt)("em",{parentName:"li"},"Participant A"),", and needs to establish ",(0,r.kt)("em",{parentName:"li"},"Participant A's")," credentials. (",(0,r.kt)("em",{parentName:"li"},"Participant B")," could be a company enrolled within a dataspace, or the Dataspace Authority, depending on the flow.)"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"Authority"),", which is an issuer of Verifiable Credentials of ",(0,r.kt)("em",{parentName:"li"},"Participant A"),". (",(0,r.kt)("em",{parentName:"li"},"Authority")," can be e.g. external Gaia-X Central Authority or Dataspace Authority, depending on the flow.) ")),(0,r.kt)("h2",{id:"overview"},"Overview"),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Participant A")," needs to establish its identity and credentials in order to access a service from ",(0,r.kt)("em",{parentName:"p"},"Participant B"),". Selecting and transporting ",(0,r.kt)("em",{parentName:"p"},"Participant A's")," verifiable credentials in request headers would be too bulky and put too much logic in the client code. Therefore, ",(0,r.kt)("em",{parentName:"p"},"Participant A")," sends it's DID (in a JWS) and a bearer token, allowing ",(0,r.kt)("em",{parentName:"p"},"Participant B")," to authenticate the request, and obtain ",(0,r.kt)("em",{parentName:"p"},"Participant A's")," verifiable credentials from its Identity Hub."),(0,r.kt)("p",null,"A DID JWS cannot be used by ",(0,r.kt)("em",{parentName:"p"},"Participant B")," to authenticate itself to ",(0,r.kt)("em",{parentName:"p"},"Participant A's")," Identity Hub, as endless recursion would ensue."),(0,r.kt)("h2",{id:"pre-conditions"},"Pre-conditions"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"Participant A")," has deployed an Identity Hub service, and a DID Document containing the Identity Hub URL."),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("em",{parentName:"li"},"Participant A")," Identity Hub contains VCs that satisfy the ",(0,r.kt)("em",{parentName:"li"},"Participant B's")," service access policy."),(0,r.kt)("li",{parentName:"ol"},"The ",(0,r.kt)("em",{parentName:"li"},"Authority")," has deployed a DID Document allowing to retrieve the public key.")),(0,r.kt)("h2",{id:"flow-sequence"},"Flow sequence"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"distributed-authorization",src:a(33251).Z,width:"894",height:"477"})),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"The Client for ",(0,r.kt)("em",{parentName:"li"},"Participant A")," (which could be EDC, or any other application) sends a request to ",(0,r.kt)("em",{parentName:"li"},"Participant B's")," API. The client needs access to\n",(0,r.kt)("em",{parentName:"li"},"Participant A's")," Private Key to sign a JWS. (In future versions the client will send also a time-limited bearer token granting access to its Identity Hub.)"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"Participant B")," retrieves the DID Document based on the DID URI contained in the JWS."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"Participant B")," authenticates the request by validating the JWS signature against the public key in the DID Document."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"Participant B")," finds Participant A's Identity Hub URL in the DID Document and retrieves Verifiable Presentation containing Verifiable Credentials from\n",(0,r.kt)("em",{parentName:"li"},"Participant's A")," Identity Hub. (In future versions Identity Hub will perform authentication using bearer token sent from ",(0,r.kt)("em",{parentName:"li"},"Participant B"),".)"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"Participant B")," retrieves the DID Document of the Participant A's Verifiable Credentials issuer."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"Participant B")," validates the VC signature against the public key in the DID Document."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"Participant B")," applies its access policy for the given service. This applies rules specific to a given service. For example, the caller must be a dataspace participant (i.e. have a valid Verifiable Credential signed by the Dataspace Authority, that establishes its dataspace membership)."),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("em",{parentName:"li"},"Participant B")," returns the service response if the request was successfully authorized, otherwise, an error response. Depending on the flow, the response can be synchronously or asynchronously returned.")))}u.isMDXComponent=!0},33251:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/distributed-authorization-6c1d164ca72469393f91bcf611d77c3b.png"}}]);