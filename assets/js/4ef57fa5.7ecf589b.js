"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[2187],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},p=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),d=s(n),m=o,y=d["".concat(l,".").concat(m)]||d[m]||u[m]||i;return n?r.createElement(y,a(a({ref:t},p),{},{components:n})):r.createElement(y,a({ref:t},p))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=d;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var s=2;s<i;s++)a[s]=n[s];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},63897:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>s});var r=n(87462),o=(n(67294),n(3905));const i={},a="Sql query streaming",c={unversionedId:"submodule/Connector/docs/developer/decision-records/2022-09-29-sql-query-streaming/README",id:"submodule/Connector/docs/developer/decision-records/2022-09-29-sql-query-streaming/README",title:"Sql query streaming",description:"Decision",source:"@site/docs/submodule/Connector/docs/developer/decision-records/2022-09-29-sql-query-streaming/README.md",sourceDirName:"submodule/Connector/docs/developer/decision-records/2022-09-29-sql-query-streaming",slug:"/submodule/Connector/docs/developer/decision-records/2022-09-29-sql-query-streaming/",permalink:"/edc-docs/docs/submodule/Connector/docs/developer/decision-records/2022-09-29-sql-query-streaming/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/docs/developer/decision-records/2022-09-29-sql-query-streaming/README.md",tags:[],version:"current",frontMatter:{}},l={},s=[{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Approach",id:"approach",level:2}],p={toc:s};function u(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sql-query-streaming"},"Sql query streaming"),(0,o.kt)("h2",{id:"decision"},"Decision"),(0,o.kt)("p",null,"We decided to switch the current way we are using to retrieve objects from sql query - that fetches everything in memory\nand then creates a ",(0,o.kt)("inlineCode",{parentName:"p"},"Stream")," out of the resulting ",(0,o.kt)("inlineCode",{parentName:"p"},"List")," - to a version where a ",(0,o.kt)("inlineCode",{parentName:"p"},"Stream")," is actually used to iterate\nover the ",(0,o.kt)("inlineCode",{parentName:"p"},"ResultSet"),"."),(0,o.kt)("h2",{id:"rationale"},"Rationale"),(0,o.kt)("p",null,"Now that the EDC is being used by teams that are pushing its limits with heavy workloads we noticed, especially on catalog request,\nthat a lot of time is wasted fetching all the rows in memory and then opening a stream later on.\nA ",(0,o.kt)("inlineCode",{parentName:"p"},"Spliterator")," could be used to create a stream that actually fetches items lazily."),(0,o.kt)("h2",{id:"approach"},"Approach"),(0,o.kt)("p",null,"To obtain streaming we would add a method in the ",(0,o.kt)("inlineCode",{parentName:"p"},"SqlQueryExecutor")," that creates a stream with a ",(0,o.kt)("inlineCode",{parentName:"p"},"Spliterator")," that iterates on the ",(0,o.kt)("inlineCode",{parentName:"p"},"ResultSet"),"."),(0,o.kt)("p",null,"Here are some code snippets starting from the bottom to the top:"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"SqlQueryExecutor.executeQueryStream")," method:\n(note: ",(0,o.kt)("inlineCode",{parentName:"p"},"Statement"),"/",(0,o.kt)("inlineCode",{parentName:"p"},"ResultSet")," needs to be closed when the stream has been closed through the ",(0,o.kt)("inlineCode",{parentName:"p"},"onClose")," method, the ",(0,o.kt)("inlineCode",{parentName:"p"},"Connection")," closure would be attached to this event if ",(0,o.kt)("inlineCode",{parentName:"p"},"closeConnection")," is true)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public final class SqlQueryExecutor {\n\n    ...\n\n    public static <T> Stream<T> executeQueryStream(Connection connection, boolean closeConnection, ResultSetMapper<T> resultSetMapper, String sql, Object... arguments) {\n        try {\n            var statement = connection.prepareStatement(sql);\n            statement.setFetchSize(5000);\n            setArguments(statement, arguments);\n            var resultSet = statement.executeQuery();\n            return StreamSupport.stream(new Spliterators.AbstractSpliterator<T>(Long.MAX_VALUE, Spliterator.ORDERED) {\n                @Override\n                public boolean tryAdvance(Consumer<? super T> action) {\n                    try {\n                        if (!resultSet.next()) {\n                            return false;\n                        }\n                        action.accept(resultSetMapper.mapResultSet(resultSet));\n                        return true;\n                    } catch (Exception ex) {\n                        throw new EdcPersistenceException(ex);\n                    }\n                }\n\n            }, false).onClose(() -> {\n                // close statement/resultSet    \n                if (closeConnection) {\n                    // close connection\n                }\n            });\n        } catch (SQLException sqlEx) {\n            // close statement/resultSet if opened\n            if (closeConnection) {\n                // close connection\n            }\n            throw new EdcPersistenceException(sqlEx);\n        }\n    }\n    \n    ...\n}\n")),(0,o.kt)("p",null,"A caller of the ",(0,o.kt)("inlineCode",{parentName:"p"},"executeQueryStream")," method, please note that the ",(0,o.kt)("inlineCode",{parentName:"p"},"Connection")," is not closed by the caller anymore."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class SqlContractDefinitionStore implements ContractDefinitionStore {\n    \n    ...\n    \n    @Override\n    public @NotNull Stream<ContractDefinition> findAll(QuerySpec spec) {\n        return transactionContext.execute(() -> {\n            // try (var connection = getConnection()) { // the connection will be closed by the stream itself\n            try {\n                var connection = getConnection();\n                var queryStmt = statements.createQuery(spec);\n                return executeQueryStream(connection, true, this::mapResultSet, queryStmt.getQueryAsString(), queryStmt.getParameters());\n            } catch (SQLException exception) {\n                throw new EdcPersistenceException(exception);\n            }\n        });\n    }\n    \n    ...\n    \n}\n")),(0,o.kt)("p",null,"One big news is that at the top of the call, the stream needs to be closed explicitly to avoid connection leaks, as\nneither ",(0,o.kt)("inlineCode",{parentName:"p"},"collect")," nor ",(0,o.kt)("inlineCode",{parentName:"p"},"forEach")," do that:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public class PolicyDefinitionServiceImpl implements PolicyDefinitionService {\n    ...\n    \n    @Override\n    public @NotNull ServiceResult<PolicyDefinition> deleteById(String policyId) {\n        \n        ...\n\n        try (var contractDefinitionOnPolicy = contractDefinitionStore.findAll(queryContractPolicyFilter)) { // this will close the stream after the use\n            if (contractDefinitionOnPolicy.findAny().isPresent()) {\n                return ServiceResult.conflict(format("PolicyDefinition %s cannot be deleted as it is referenced by at least one contract definition", policyId));\n            }\n        }\n        \n        ...\n    \n    }\n\n}\n')),(0,o.kt)("p",null,"This ",(0,o.kt)("inlineCode",{parentName:"p"},"executeQueryStream")," method will likely be used by all the ",(0,o.kt)("inlineCode",{parentName:"p"},".findAll")," methods of the stores."))}u.isMDXComponent=!0}}]);