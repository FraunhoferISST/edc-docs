"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[8743],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>u});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),u=r,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||o;return n?a.createElement(h,s(s({ref:t},c),{},{components:n})):a.createElement(h,s({ref:t},c))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,s=new Array(o);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var p=2;p<o;p++)s[p]=n[p];return a.createElement.apply(null,s)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},3776:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>m,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={},s="Modify a TransferProcess",i={unversionedId:"submodule/Connector/samples/04.2-modify-transferprocess/README",id:"submodule/Connector/samples/04.2-modify-transferprocess/README",title:"Modify a TransferProcess",description:"In the last samples (04.0 and 04.1) we saw how data can be transferred easily, what a TransferProcess is and how",source:"@site/docs/submodule/Connector/samples/04.2-modify-transferprocess/README.md",sourceDirName:"submodule/Connector/samples/04.2-modify-transferprocess",slug:"/submodule/Connector/samples/04.2-modify-transferprocess/",permalink:"/edc-docs/docs/submodule/Connector/samples/04.2-modify-transferprocess/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/samples/04.2-modify-transferprocess/README.md",tags:[],version:"current",frontMatter:{}},l={},p=[{value:"Problem statement",id:"problem-statement",level:2},{value:"The <code>CommandQueue</code>",id:"the-commandqueue",level:2},{value:"How to use it",id:"how-to-use-it",level:2},{value:"About this sample",id:"about-this-sample",level:2}],c={toc:p};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"modify-a-transferprocess"},"Modify a TransferProcess"),(0,r.kt)("p",null,"In the last samples (",(0,r.kt)("inlineCode",{parentName:"p"},"04.0")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"04.1"),") we saw how data can be transferred easily, what a ",(0,r.kt)("inlineCode",{parentName:"p"},"TransferProcess")," is and how\nto react to it easily through the listener. This sample will show how ",(0,r.kt)("inlineCode",{parentName:"p"},"TransferProcess")," objects can be modified\nexternally in a thread-safe and consistent way."),(0,r.kt)("h2",{id:"problem-statement"},"Problem statement"),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"TransferProcessManager")," (TPM), which is the central state machine handling transfer processes, follows this basic\noperational pattern:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"take transfer process (TP) out of ",(0,r.kt)("inlineCode",{parentName:"li"},"TransferProcessStore")," (TPS)"),(0,r.kt)("li",{parentName:"ol"},"take appropriate action, e.g. provision or deprovision ressources"),(0,r.kt)("li",{parentName:"ol"},"update state of TP"),(0,r.kt)("li",{parentName:"ol"},"put back into TPS")),(0,r.kt)("p",null,"All those steps happen in a non-atomic way, so when a TP currently processed by the TPM is modified on another thread,\nthere is a strong possibility that that change will get overwritten or worse, may cause the state machine to be in an\nillegal state."),(0,r.kt)("p",null,"A common pattern would be some sort of watchdog, where TPs that have not advanced their state in a given amount of time\nare automatically cancelled or errored out. The following code snippet shows a typical TPM state transition:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// get out of store\n var tpList = store.nextForState(IN_PROGRESS.code(),batchSize);\n// take appropriate action, e.g. check if complete\nvar statusChecker=...;\nforeach(var tp:tpList){\n    if(statusChecker.isComplete()){\n        //update state\n        tp.transitionComplete();\n        // put back into TPS\n        store.update(tp);\n    }\n}\n")),(0,r.kt)("p",null,"and then consider a watchdog that runs on another thread and fires every X minutes"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'\nprivate void watchDog(){\n  var longRunningTpList = store.nextForState(IN_PROGRESS.code(), 5);\n  // filter list based on last state update\n  var longRunningTpList = /*filter expression*/;\n  for(var tp : longRunningTpList){\n      tp.transitionError("timeout");\n      store.update(tp);\n  }\n}\n')),(0,r.kt)("p",null,"Now the problem becomes apparent when the ",(0,r.kt)("inlineCode",{parentName:"p"},"watchDog()")," fires exactly here:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"//...\n    if(statusChecker.isComplete()){\n        \n        // |<-- watchDog() fires here!\n            \n        //update state\n        tp.transitionComplete();\n        // ...\n    }\n")),(0,r.kt)("p",null,"then the TP would first go to the ",(0,r.kt)("inlineCode",{parentName:"p"},"ERROR")," state, but then immediately to the ",(0,r.kt)("inlineCode",{parentName:"p"},"COMPLETED"),' state, because the TPM and the watchdog\nhave different object references to the same TP. We essentially have a race condition at our hands, resulting in the TP never\n"erroring out".'),(0,r.kt)("h2",{id:"the-commandqueue"},"The ",(0,r.kt)("inlineCode",{parentName:"h2"},"CommandQueue")),(0,r.kt)("p",null,"The way to go around this is to create a ",(0,r.kt)("inlineCode",{parentName:"p"},"Command")," and a respective ",(0,r.kt)("inlineCode",{parentName:"p"},"CommandHandler"),", register both with the transfer state machine and\nwhen the time comes to send a TP to ",(0,r.kt)("inlineCode",{parentName:"p"},"ERROR"),", simply submit the ",(0,r.kt)("inlineCode",{parentName:"p"},"Command")," object."),(0,r.kt)("p",null,'Commands are the "what", handlers are the "how", so we separate the desired state from the actual action to be taken, they always exist\nin tandem. Command handlers have to be registered with the ',(0,r.kt)("inlineCode",{parentName:"p"},"CommandHandlerRegistry"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"// in YourExtension.java\n\n//...\n@Inject\nprivate CommandHandlerRegistry registry;\n\npublic void initialize(ServiceExtensionContext context){\n    registry.register(new CheckTimeoutCommandHandler(/*left out for clarity*/);\n}\n")),(0,r.kt)("h2",{id:"how-to-use-it"},"How to use it"),(0,r.kt)("p",null,"New commands can be inserted into the queue through the ",(0,r.kt)("inlineCode",{parentName:"p"},"TransferProcessManager"),". Although this might not be obvious at first, because\none might expect to insert commands directly into the queue, there is actually good reasoning for this.\nExposing the ",(0,r.kt)("inlineCode",{parentName:"p"},"CommandQueue")," would also expose its entire API including ",(0,r.kt)("inlineCode",{parentName:"p"},"peek()")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"dequeue()"),", which would be a dangerous thing."),(0,r.kt)("p",null,"Also, most clients will already have a reference to the ",(0,r.kt)("inlineCode",{parentName:"p"},"TransferProcessManager"),", so little change needs to be done. Instead simply\ndo:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"tpm.enqueueCommand(new CheckTransferProcessTimeoutCommand(3, TransferProcessStates.IN_PROGRESS, Duration.ofSeconds(10)));\n")),(0,r.kt)("p",null,"that will eventually get processed by the ",(0,r.kt)("inlineCode",{parentName:"p"},"TransferProcessManager"),", resulting in log output similar to this: "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"INFO 2022-01-14T12:45:38.176484 Running watchdog - submit command\nINFO 2022-01-14T12:45:38.176795 will retire TP with id [tp-sample-04.2] due to timeout\nDEBUG 2022-01-14T12:45:38.177363 Successfully processed command [class CheckTransferProcessTimeoutCommand]\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: The command queue is not accessible through the ",(0,r.kt)("inlineCode",{parentName:"em"},"ServiceExtensionContext"),", precisely for the aforementioned reason.")),(0,r.kt)("h2",{id:"about-this-sample"},"About this sample"),(0,r.kt)("p",null,"Please note that this sample does ",(0,r.kt)("em",{parentName:"p"},"not actually transfer anything"),", it merely shows how to employ the ",(0,r.kt)("inlineCode",{parentName:"p"},"Command"),"/",(0,r.kt)("inlineCode",{parentName:"p"},"CommandHandler"),"\ninfrastructure to modify a transfer process outside of the main state machine."),(0,r.kt)("p",null,"Modules:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"simulator"),": used to insert a dummy transfer process, that never completes to simulate the use of a watchdog"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"watchdog"),": spins up a periodic task that sends a command to check for timed-out TPs and sets them to ",(0,r.kt)("inlineCode",{parentName:"li"},"ERROR")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"consumer"),": the build configuration")),(0,r.kt)("p",null,"In order to run the sample, enter the following commands in a shell:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./gradlew samples:04.2-modify-transferprocess:consumer:build\njava -Dedc.fs.config=samples/04.2-modify-transferprocess/consumer/config.properties -jar samples/04.2-modify-transferprocess/consumer/build/libs/consumer.jar\n")),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/edc-docs/docs/submodule/Connector/samples/04.1-file-transfer-listener/"},"Previous Chapter")," | ",(0,r.kt)("a",{parentName:"p",href:"/edc-docs/docs/submodule/Connector/samples/04.3-open-telemetry/"},"Next Chapter")))}m.isMDXComponent=!0}}]);