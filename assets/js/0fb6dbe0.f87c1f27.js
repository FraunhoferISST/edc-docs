"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[2493],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),g=r,h=u["".concat(l,".").concat(g)]||u[g]||p[g]||a;return n?o.createElement(h,i(i({ref:t},d),{},{components:n})):o.createElement(h,i({ref:t},d))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1996:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={},i="The EDC version catalog",s={unversionedId:"submodule/Connector/docs/developer/version-catalogs",id:"submodule/Connector/docs/developer/version-catalogs",title:"The EDC version catalog",description:"EDC provides a Version Catalog which contains all the",source:"@site/docs/submodule/Connector/docs/developer/version-catalogs.md",sourceDirName:"submodule/Connector/docs/developer",slug:"/submodule/Connector/docs/developer/version-catalogs",permalink:"/edc-docs/docs/submodule/Connector/docs/developer/version-catalogs",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/docs/developer/version-catalogs.md",tags:[],version:"current",frontMatter:{}},l={},c=[{value:"Using the version catalog",id:"using-the-version-catalog",level:2},{value:"Using bundles",id:"using-bundles",level:3},{value:"Modifying the version catalog",id:"modifying-the-version-catalog",level:2},{value:"Extending the version catalog",id:"extending-the-version-catalog",level:3},{value:"Overriding the version catalog",id:"overriding-the-version-catalog",level:3}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-edc-version-catalog"},"The EDC version catalog"),(0,r.kt)("p",null,"EDC provides a ",(0,r.kt)("a",{parentName:"p",href:"https://docs.gradle.org/7.4/userguide/platforms.html"},"Version Catalog")," which contains all the\nthird-party dependencies\nthat are currently in use by EDC."),(0,r.kt)("p",null,'This version catalog should be regarded as the recommended and tested dependency matrix, but it is not mandatory nor\ndoes it enforce the use of a particular dependency. We only use "required dependencies", i.e. no minimum or maximum\nversions, no ranges, no rejected versions etc.'),(0,r.kt)("h2",{id:"using-the-version-catalog"},"Using the version catalog"),(0,r.kt)("p",null,"The version catalog gets distributed as regular Maven Artifact using the following coordinates:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"org.eclipse.edc:edc-versions:<VERSION>\n")),(0,r.kt)("p",null,"As per the ",(0,r.kt)("a",{parentName:"p",href:"https://docs.gradle.org/7.4/userguide/platforms.html#sec:importing-published-catalog"},"documentation")," the\nversion catalog and the repositories, in which to look for it, must be declared in the ",(0,r.kt)("inlineCode",{parentName:"p"},"settings.gradle.kts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'// in settings.gradle.kts\ndependencyResolutionManagement {\n    repositories {\n        maven {\n            url = uri("https://oss.sonatype.org/content/repositories/snapshots/")\n        }\n        mavenCentral()\n        mavenLocal()\n    }\n    versionCatalogs {\n        create("libs") {\n            from("org.eclipse.edc:edc-versions:<VERSION>>")\n        }\n    }\n}\n')),(0,r.kt)("p",null,"Then, the version catalog named ",(0,r.kt)("inlineCode",{parentName:"p"},'"libs"')," is available in the project, its exact contents can be\ninspected ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/eclipse-edc/GradlePlugins/blob/main/gradle/libs.versions.toml"},"in this ",(0,r.kt)("inlineCode",{parentName:"a"},"*.toml")," file"),"\n. Be aware that the library aliases are ",(0,r.kt)("em",{parentName:"p"},"normalized"),", that means all the dashes, underscores and dots are interpreted as\nseparators."),(0,r.kt)("p",null,"Utilizing a dependency is easy, simply refer to it in the dependency configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'implementation(libs.jackson.annotation) // resolves to "com.fasterxml.jackson.core:jackson-annotations"\n')),(0,r.kt)("h3",{id:"using-bundles"},"Using bundles"),(0,r.kt)("p",null,"In the context of version catalogs a ",(0,r.kt)("inlineCode",{parentName:"p"},"bundle"),' is a set of versions grouped together, similar to a Maven BOM. Using them\nin build files is just as easy as with "normal" dependencies:'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},"implementation(libs.bundles.jersey.core)\n\ntestFixturesImplementation(libs.bundles.jupiter)   \n")),(0,r.kt)("h2",{id:"modifying-the-version-catalog"},"Modifying the version catalog"),(0,r.kt)("p",null,"There are two main scenarios where you might want to change the provided version catalog:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"adding new libraries"),(0,r.kt)("li",{parentName:"ul"},"upgrading a specific version")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"It must be made clear that changing the provided version catalog should only be done deliberately and with a very\nspecific purpose in mind. Expect to be challenged during code reviews if you choose to do it!")),(0,r.kt)("h3",{id:"extending-the-version-catalog"},"Extending the version catalog"),(0,r.kt)("p",null,"Adopting a new version into the EDC Version Catalog will take some time: a feature request issue must be opened, that\nissue needs to be processed, a PR must be opened, a review must be performed, and a new artifact version of the Version\nCatalog artifact must be built, etc. While that is the recommended process, we understand that it is not always possible\nto wait for that."),(0,r.kt)("p",null,"For example if you have a time-sensitive PR open in EDC for which you need a third-party library that\nwill be used in multiple packages (NimbusDS would be a good example). Then it might be a good idea to extend the EDC\nVersion Catalog temporarily, until that lib can be adopted into the EDC Version Catalog."),(0,r.kt)("p",null,"Another situation would be a third-party library, that will only be used in a very limited scope, for example an SPI\npackage and the corresponding implementation package. We would not necessarily need to adopt such a lib into the EDC\nVersion Catalog, but it is still a good idea to harmonize version management inside the EDC project."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'dependencyResolutionManagement {\n    // not shown: repositories\n    versionCatalogs {\n        create("libs") {\n            from("org.eclipse.edc:edc-versions:0.0.1-SNAPSHOT")\n            // this is not part of the published EDC Version Catalog, so we\'ll just "amend" it. \n            // the versionRef "okhttp" is already defined in the Version Catalog\n            library("dnsOverHttps", "com.squareup.okhttp3", "okhttp-dnsoverhttps").versionRef("okhttp")\n        }\n    }\n}\n')),(0,r.kt)("h3",{id:"overriding-the-version-catalog"},"Overriding the version catalog"),(0,r.kt)("p",null,"Due to the reasons mentioned before, it is sometimes quicker to override a specific version directly in the client\nproject. This can come in handy when there are breaking changes in the lib's API, or there are known critical\nvulnerabilities, or you simply need a new and shiny feature. Then (temporarily) overwriting a library's version could be\nan option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'dependencyResolutionManagement {\n    // not shown: repositories\n    versionCatalogs {\n        create("libs") {\n            from("org.eclipse.edc:edc-versions:0.0.1-SNAPSHOT")\n            // override the version for Jackson. Must use existing alias\n            version("jackson", "2.69.0")\n        }\n    }\n}\n')),(0,r.kt)("p",null,"Note that the version, that actually gets used during runtime, may still be different due to conflict resolution etc.\nSee also\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://docs.gradle.org/7.4/userguide/platforms.html#sec:overwriting-catalog-versions"},"official documentation")))}p.isMDXComponent=!0}}]);