"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[9062],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||r;return n?a.createElement(h,i(i({ref:t},d),{},{components:n})):a.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},21754:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>c});var a=n(87462),o=(n(67294),n(3905));const r={},i="EDC Data Dashboard",s={unversionedId:"submodule/DataDashboard/README",id:"submodule/DataDashboard/README",title:"EDC Data Dashboard",description:"Please note: This repository does not contain production-grade code and is only intended for demonstration purposes.",source:"@site/docs/submodule/DataDashboard/README.md",sourceDirName:"submodule/DataDashboard",slug:"/submodule/DataDashboard/",permalink:"/edc-docs/docs/submodule/DataDashboard/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/DataDashboard/README.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"README",permalink:"/edc-docs/docs/submodule/Connector/"},next:{title:"Federated Catalog Cache",permalink:"/edc-docs/docs/submodule/FederatedCatalog/"}},l={},c=[{value:"Documentation",id:"documentation",level:2},{value:"Generate client code for EDC REST APIs",id:"generate-client-code-for-edc-rest-apis",level:2},{value:"Running the frontend locally",id:"running-the-frontend-locally",level:2},{value:"Deploy to Azure",id:"deploy-to-azure",level:2},{value:"Contributing",id:"contributing",level:2}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"edc-data-dashboard"},"EDC Data Dashboard"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Please note: This repository does not contain production-grade code and is only intended for demonstration purposes.")),(0,o.kt)("p",null,"EDC Data Dashboard is a dev frontend application for ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/eclipse-dataspaceconnector/DataSpaceConnector"},"EDC Data Management API"),"."),(0,o.kt)("h2",{id:"documentation"},"Documentation"),(0,o.kt)("p",null,"Developer documentation can be found under ",(0,o.kt)("a",{parentName:"p",href:"docs/developer/"},"docs/developer"),", where the main concepts and decisions are captured as ",(0,o.kt)("a",{parentName:"p",href:"docs/developer/decision-records/"},"decision records"),"."),(0,o.kt)("h2",{id:"generate-client-code-for-edc-rest-apis"},"Generate client code for EDC REST APIs"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"[optional]"," copy the current version of EDC's ",(0,o.kt)("inlineCode",{parentName:"li"},"openapi.yaml")," file to ",(0,o.kt)("inlineCode",{parentName:"li"},"openapi/"),". There is one checked in, so this is not required."),(0,o.kt)("li",{parentName:"ol"},"in a shell execute",(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'docker run --rm -v "${PWD}:/local" openapitools/openapi-generator-cli generate -i /local/openapi/openapi.yaml -g typescript-angular -o /local/src/modules/edc-dmgmt-client/\n')),"This re-generates the service and model classes. ")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Please note that some of the client classes were edited manually after generation. When regenerating the classes for the API update be careful especially not to overwrite service ",(0,o.kt)("inlineCode",{parentName:"p"},"constructor")," methods using the generator!")),(0,o.kt)("h2",{id:"running-the-frontend-locally"},"Running the frontend locally"),(0,o.kt)("p",null,"Should you want to run the frontend on your development machine, you'll have to configure some backend values. Those are stored in ",(0,o.kt)("inlineCode",{parentName:"p"},"app.config.json"),", and\nby default contain the following:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "dataManagementApiUrl": "{{dataManagementApiUrl}}",\n  "catalogUrl": "{{catalogUrl}}",\n  "storageAccount": "{{account}}",\n  "storageExplorerLinkTemplate": "storageexplorer://v=1&accountid=/subscriptions/{{subscriptionId}}/resourceGroups/{{resourceGroup}}/providers/Microsoft.Storage/storageAccounts/{{account}}&subscriptionid={{subscriptionId}}&resourcetype=Azure.BlobContainer&resourcename={{container}}",\n  "apiKey": "{{apiKey}}"\n}\n')),(0,o.kt)("p",null,"Substitute the values as necessary:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"apiKey"),": enter here what your EDC instance expects in th ",(0,o.kt)("inlineCode",{parentName:"li"},"x-api-key")," header"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"catalogUrl"),": prepend your connector URL, e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"http://localhost"),", assuming your catalog endpoint is exposed at port 8181, which is the default"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"dataManagementApiUrl"),":  prepend your connector URL, e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"http://localhost"),", assuming your IDS endpoint is exposed at port 9191"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"storageAccount"),": insert the name of an Azure Blob Storage account to which the connector has access, otherwise data transfers won't work.")),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Be extra careful NOT to commit those changes, as they might leak potentially sensitive information!!!")),(0,o.kt)("p",null,"As some extra safety consider running ",(0,o.kt)("inlineCode",{parentName:"p"},"git udpate-index --assume-unchanged src/assets/config/app.config.json")," before changing this file."),(0,o.kt)("h2",{id:"deploy-to-azure"},"Deploy to Azure"),(0,o.kt)("p",null,"Create a resource group and container registry:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"export RESOURCE_GROUP=edc-data-dashboard\nexport ACR_NAME=edcdatadashboard\naz group create --resource-group $RESOURCE_GROUP --location westeurope -o none\naz acr create --resource-group $RESOURCE_GROUP --name $ACR_NAME --sku Standard --location westeurope --admin-enabled -o none\n")),(0,o.kt)("p",null,"Dockerize the application and push it to the registry by running:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"az acr build --registry $ACR_NAME --image edc-showcase/edc-data-dashboard:latest .\n")),(0,o.kt)("p",null,"The docker image is now ready to be deployed to Azure Container Instances (ACI). The ",(0,o.kt)("inlineCode",{parentName:"p"},"app.config.json")," file contains configuration which is fetched by the application at startup. This file can be overridden at deployment time by mounting a secret on ",(0,o.kt)("inlineCode",{parentName:"p"},"assets/config"),". For each deployment you need to provide the corresponding connector backend URL, the storage account name and the API key using this secret. Deploy to ACI using the following command:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'export CONNECTOR_DATA_URL=<CONNECTOR_DATA_URL>\nexport CONNECTOR_CATALOG_URL=<CONNECTOR_CATALOG_URL>\nexport STORAGE_ACCOUNT=<STORAGE_ACCOUNT>\nexport API_KEY=<API_KEY>\n\n# deploy to ACI (when prompted for credentials use the username/password as available in Azure Portal: ACR->Access Keys)\naz container create --image ${ACR_NAME}.azurecr.io/edc-showcase/edc-data-dashboard:latest \\\n--resource-group $RESOURCE_GROUP \\\n--name edc-data-dashboard \\\n--secrets "app.config.json"="{\\"dataManagementApiUrl\\": \\"$CONNECTOR_DATA_URL\\", \\"catalogUrl\\": \\"$CONNECTOR_CATALOG_URL\\", \\"storageAccount\\": \\"$STORAGE_ACCOUNT\\", \\"apiKey\\": \\"$API_KEY\\"}" \\\n--secrets-mount-path /usr/share/nginx/html/assets/config \\\n--dns-name-label edc-data-dashboard\n')),(0,o.kt)("h2",{id:"contributing"},"Contributing"),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/eclipse-dataspaceconnector/DataSpaceConnector/blob/main/CONTRIBUTING.md"},"how to contribute")," for details."))}p.isMDXComponent=!0}}]);