"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[7173],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>m});var o=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=o.createContext({}),d=function(e){var t=o.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},s=function(e){var t=d(e.components);return o.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},u=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||a;return n?o.createElement(f,l(l({ref:t},s),{},{components:n})):o.createElement(f,l({ref:t},s))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,l=new Array(a);l[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var d=2;d<a;d++)l[d]=n[d];return o.createElement.apply(null,l)}return o.createElement.apply(null,n)}u.displayName="MDXCreateElement"},24291:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>p,frontMatter:()=>a,metadata:()=>i,toc:()=>d});var o=n(87462),r=(n(67294),n(3905));const a={},l="The `autodoc` Gradle plugin",i={unversionedId:"submodule/Connector/docs/developer/autodoc",id:"submodule/Connector/docs/developer/autodoc",title:"The `autodoc` Gradle plugin",description:"Please find the comprehensive documentation about the autodoc plugin in",source:"@site/docs/submodule/Connector/docs/developer/autodoc.md",sourceDirName:"submodule/Connector/docs/developer",slug:"/submodule/Connector/docs/developer/autodoc",permalink:"/edc-docs/docs/submodule/Connector/docs/developer/autodoc",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/docs/developer/autodoc.md",tags:[],version:"current",frontMatter:{}},c={},d=[{value:"Publishing the manifest files",id:"publishing-the-manifest-files",level:2},{value:"Downloading the manifest files",id:"downloading-the-manifest-files",level:2}],s={toc:d};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,o.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"the-autodoc-gradle-plugin"},"The ",(0,r.kt)("inlineCode",{parentName:"h1"},"autodoc")," Gradle plugin"),(0,r.kt)("p",null,"Please find the comprehensive documentation about the ",(0,r.kt)("inlineCode",{parentName:"p"},"autodoc")," plugin in\nthe ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/eclipse-edc/GradlePlugins/blob/main/docs/developer/autodoc.md"},"Github Repo")," of\nthe plugin."),(0,r.kt)("p",null,"In EDC, the plugin is intended to be used to generate metamodel manifests for every Gradle module, which then\ntransformed into Markdown files, subsequently rendered for publication in static web content."),(0,r.kt)("h2",{id:"publishing-the-manifest-files"},"Publishing the manifest files"),(0,r.kt)("p",null,"For every subproject that generates an ",(0,r.kt)("inlineCode",{parentName:"p"},"edc.json")," file a Maven publication is created in the root build file, so that\nthe manifest file gets published alongside the binary jar files, sources jar and javadoc jar."),(0,r.kt)("h2",{id:"downloading-the-manifest-files"},"Downloading the manifest files"),(0,r.kt)("p",null,"For publishing we use ",(0,r.kt)("inlineCode",{parentName:"p"},"type=json")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"classifier=manifest"),", which means a dependency in a client project would look\nlike\nthis (kotlin DSL):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'implementation("org.eclipse.edc:<ARTIFACT>:<VERSION>:manifest@json")\n')),(0,r.kt)("p",null,"For example, for the ",(0,r.kt)("inlineCode",{parentName:"p"},":core:control-plane:control-plane-core")," module in version ",(0,r.kt)("inlineCode",{parentName:"p"},"0.0.1-SNAPSHOT"),", this would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'implementation("org.eclipse.edc:control-plane-core:0.0.1-SNAPSHOT:manifest@json")\n')),(0,r.kt)("p",null,"When the dependency gets resolved, the manifest file will get downloaded to the local gradle cache, typically located\nat ",(0,r.kt)("inlineCode",{parentName:"p"},".gradle/caches/modules-2/files-2.1"),". So in the example the manifest would get downloaded\nat ",(0,r.kt)("inlineCode",{parentName:"p"},"~/.gradle/caches/modules-2/files-2.1/org.eclipse.edc/control-plane-core/0.0.1-SNAPSHOT/<HASH>/control-plane-core-0.0.1-SNAPSHOT-manifest.json")))}p.isMDXComponent=!0}}]);