"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[9320],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>h});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=d(n),h=i,m=u["".concat(s,".").concat(h)]||u[h]||c[h]||r;return n?a.createElement(m,o(o({ref:t},p),{},{components:n})):a.createElement(m,o({ref:t},p))}));function h(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4830:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var a=n(7462),i=(n(7294),n(3905));const r={},o="Release Approach",l={unversionedId:"submodule/Connector/docs/developer/releases",id:"submodule/Connector/docs/developer/releases",title:"Release Approach",description:"Table of Contents",source:"@site/docs/submodule/Connector/docs/developer/releases.md",sourceDirName:"submodule/Connector/docs/developer",slug:"/submodule/Connector/docs/developer/releases",permalink:"/edc-docs/docs/submodule/Connector/docs/developer/releases",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/docs/developer/releases.md",tags:[],version:"current",frontMatter:{}},s={},d=[{value:"Table of Contents",id:"table-of-contents",level:2},{value:"Versioning",id:"versioning",level:3},{value:"API Compatibility",id:"api-compatibility",level:4},{value:"Modules Providing API",id:"modules-providing-api",level:4},{value:"Towards a First Release",id:"towards-a-first-release",level:4},{value:"Legal Documentation Requirements",id:"legal-documentation-requirements",level:3},{value:"License and Notice Files",id:"license-and-notice-files",level:4},{value:"Creating the Notice File",id:"creating-the-notice-file",level:4},{value:"Background Information",id:"background-information",level:4},{value:"Publishing Maven Artifacts",id:"publishing-maven-artifacts",level:3},{value:"Workflow",id:"workflow",level:4},{value:"Naming Convention",id:"naming-convention",level:4},{value:"Release guide",id:"release-guide",level:4}],p={toc:d};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"release-approach"},"Release Approach"),(0,i.kt)("h2",{id:"table-of-contents"},"Table of Contents"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#versioning"},"Versioning"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#api-compatibility"},"API Compatibility")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#modules-providing-api"},"Modules Providing API")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#towards-a-first-release"},"Towards a First Release")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#legal-documentation-requirements"},"Legal Documentation Requirements"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#license-and-notice-files"},"License and Notice Files")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#creating-the-notice-file"},"Creating the Notice File")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#background-information"},"Background Information")))),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#publishing-maven-artifacts"},"Publishing Maven Artifacts"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"#naming-convention"},"Naming Convention"))))),(0,i.kt)("h3",{id:"versioning"},"Versioning"),(0,i.kt)("p",null,"The Eclipse Dataspace Connector will employ ",(0,i.kt)("a",{parentName:"p",href:"https://semver.org"},"SemVer")," for versioning and distinguish between the\nfollowing releases as defined by the ",(0,i.kt)("a",{parentName:"p",href:"https://www.eclipse.org/projects/handbook/#release"},"Eclipse Handbook"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Major releases, which introduce API changes,"),(0,i.kt)("li",{parentName:"ul"},"minor releases, which add new functionality, but are API compatible with previous versions, and"),(0,i.kt)("li",{parentName:"ul"},"service releases, which include bug fixes only and add no significant new functionality.")),(0,i.kt)("p",null,"Between releases, snapshot versions reflecting the current state of modules can be packaged to distribution artifacts on\na regular basis. Snapshots, however, do not actually represent released versions."),(0,i.kt)("h4",{id:"api-compatibility"},"API Compatibility"),(0,i.kt)("p",null,"The concept of API compatibility is defined in terms of binary compatibility according to\nthe ",(0,i.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/specs/jls/se17/html/jls-13.html"},"Java SE 17 Language Specification")),(0,i.kt)("h4",{id:"modules-providing-api"},"Modules Providing API"),(0,i.kt)("p",null,"The following modules define official extension points of the EDC based on the Java Service Provider Interface (SPI),\ncontributing public classes, interfaces and public members which are considered public APIs and are, therefore, covered\nby the proposed versioning approach:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"spi"),(0,i.kt)("li",{parentName:"ul"},"data-protocols/ids-spi")),(0,i.kt)("p",null,"Apart from these SPI-based extension points, individual modules can also contribute additional public-facing APIs, such\nas communication endpoints (e.g., based on HTTP). To support a fast-paced development of such endpoints without\nimpacting the connector's core release cycle, modules contributing this type of public-facing API can be managed within\na separate repository."),(0,i.kt)("p",null,"The following modules are also distributed as individual artifacts to support a convenient customisation of connectors\nand are, however, not considered public APIs:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"core/*"),(0,i.kt)("li",{parentName:"ul"},"extensions/*")),(0,i.kt)("p",null,"Extensions can in turn specify their own SPI-based extension points. Theses are, however, regarded as ",(0,i.kt)("strong",{parentName:"p"},"internal SPI"),"\nand not as a public API. Therefore, changing internal SPI doesn't necessarily imply a version increment for the module."),(0,i.kt)("h4",{id:"towards-a-first-release"},"Towards a First Release"),(0,i.kt)("p",null,"Until its first major release, the Eclipse Dataspace Connector will be developed under the version 0.0.1 without\ncomplying to semantic versioning (i.e., API changes don't imply a major release). Snapshot versions may break binary\ncompatibility with previous versions and should not be regarded as stable. There are no guarantees regarding functional\nand non-functional aspects of the implementation. Tooling for a later migration of current implementations to the\nenvisioned first release will not be provided."),(0,i.kt)("h3",{id:"legal-documentation-requirements"},"Legal Documentation Requirements"),(0,i.kt)("p",null,"License and notice files must be included in every unit-level distribution artifact. In the case of Java archive (JAR)\nfiles, the legal files should be placed in the META-INF directory. However, depending on the distribution format, the\nexact location of the files might vary."),(0,i.kt)("h4",{id:"license-and-notice-files"},"License and Notice Files"),(0,i.kt)("p",null,"An appropriate license file is supplied on the root of the source code repository and must be included as is in each\ndistribution artifact. The supplied top-level notice file represents a snapshot of the dependencies included in all\nmodules present in the project repository at a given point in time. Before each new release or distribution, the notice\nfile must be updated regarding the listed third-party dependencies.",(0,i.kt)("br",{parentName:"p"}),"\n","While distributing individual modules, a notice file containing only the relevant subset of dependencies must be\ncreated (as described below)."),(0,i.kt)("h4",{id:"creating-the-notice-file"},"Creating the Notice File"),(0,i.kt)("p",null,"Notice files consist of some prescribed statements addressing trademarks copyright, and licensing. Additionally, the\nsection on third-party content lists all dependencies of the current scope (project or module) and must be maintained\nbefore each release. This list is populated by deriving dependencies using the build tool (i.e., gradle), analysing them\nusing an IP tool (i.e., Eclipse Dash Tool), and decorating the resulting report with additional information using a\ncustom script. The shell script located below docs/legal supports parsing the results of the Eclipse Dash Licenses tool\nand creating a formatted markdown report listing third-party content with extended information."),(0,i.kt)("p",null,"Execute the gradle task ",(0,i.kt)("em",{parentName:"p"},"allDependencies")," for creating an integrated dependency report over all sub-modules of the\nproject (including isolated modules). To process the dependencies of a specific module (e.g., an individual launcher)\nexecute the standard ",(0,i.kt)("em",{parentName:"p"},"dependencies")," task:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"First, the dependencies of this module are calculated with gradle and passed to the Dash tool:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'gradle dependencies | grep -Poh "(?<=\\s)[\\w.-]+:[\\w.-]+:[^:\\s]+" | sort | uniq | java -jar /path/org.eclipse.dash.licenses-0.0.1-SNAPSHOT.jar - -summary NOTICES\n')),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Second, the resulting report is used as input for the shell script:")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"./generateThirdPartyReport.sh /path/inputFilename\n")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Finally, the resulting report is assessed for missing license information which must be then added manually.")),(0,i.kt)("h4",{id:"background-information"},"Background Information"),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/eclipse/dash-licenses"},"Eclipse Dash Licenses tool")," first looks\ninto ",(0,i.kt)("a",{parentName:"p",href:"https://dev.eclipse.org/ipzilla"},"IPZilla")," and second into ",(0,i.kt)("a",{parentName:"p",href:"https://clearlydefined.io"},"ClearlyDefined"),". IPZilla\ntracks the results (i.e. approved/restricted) of IP due diligence conducted by the Eclipse Foundation. The Dash tool\nreports for each artifact found within IPZilla also its corresponding contribution questionnaire number (CQ#). In some\ncases, an approved artifact doesn't reference a license type, which has to be then searched manually. ClearlyDefined is\nmaintained by a third-party and assigns scores to artifact licenses. If a minimum threshold is reached, the item is\nconsidered as approved. The Dash tool tags artifacts found within this source accordingly. In some cases, the Dash tool\nresults in an inappropriate license, although a more suitable one is existing. In this case the tool requests a manual\nreview. In rare cases neither an Eclipse approval nor an ClearlyDefined entry is found. Currently, these licenses can be\nfound manually (e.g., on Maven Central)."),(0,i.kt)("h3",{id:"publishing-maven-artifacts"},"Publishing Maven Artifacts"),(0,i.kt)("p",null,"As far as technically sensible, project modules are packaged and distributed as Maven artifacts via third-party\nservices (i.e., Maven Central)."),(0,i.kt)("h4",{id:"workflow"},"Workflow"),(0,i.kt)("p",null,"Execute the gradle task ",(0,i.kt)("em",{parentName:"p"},"publish")," on the level of an individual module to publish it as a Maven artifact."),(0,i.kt)("h4",{id:"naming-convention"},"Naming Convention"),(0,i.kt)("p",null,"Artifact names must adhere to the following naming convention:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Group name: org.eclipse.edc"),(0,i.kt)("li",{parentName:"ul"},"Artifact id describing the module name (disregarding the directory structure) separating terms by a dash")),(0,i.kt)("p",null,"Examples:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},"org.eclipse.edc:spi\norg.eclipse.edc:util\n")),(0,i.kt)("p",null,"A comprehensive list can be found ",(0,i.kt)("a",{parentName:"p",href:"https://search.maven.org/search?q=org.eclipse.edc"},"here"),"."),(0,i.kt)("h4",{id:"release-guide"},"Release guide"),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note: the intended audience for this section are individuals who are eligible to author the release process. At the\ntime of this writing these are the committers of the project.")),(0,i.kt)("p",null,"To trigger a new release please follow these simple steps:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"update ",(0,i.kt)("inlineCode",{parentName:"li"},"gradle.properties"),": set the ",(0,i.kt)("inlineCode",{parentName:"li"},"defaultVersion")," entry to the new version."),(0,i.kt)("li",{parentName:"ul"},"trigger the actual release in GitHub:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"on the ",(0,i.kt)("inlineCode",{parentName:"li"},"Actions")," tab pick the ",(0,i.kt)("inlineCode",{parentName:"li"},"Create EDC Release")," workflow"),(0,i.kt)("li",{parentName:"ul"},"Select the ",(0,i.kt)("inlineCode",{parentName:"li"},"main")," branch"),(0,i.kt)("li",{parentName:"ul"},"clicking on ",(0,i.kt)("inlineCode",{parentName:"li"},"Run workflow")," should bring up a prompt for the version string. Please enter the version string in\nSemVer format without any prefixes: ",(0,i.kt)("inlineCode",{parentName:"li"},"0.0.4-something-SNAPSHOT")," would be OK, whereas ",(0,i.kt)("inlineCode",{parentName:"li"},"v0.0.4-rc1")," would not."),(0,i.kt)("li",{parentName:"ul"},"start the workflow")))),(0,i.kt)("p",null,"The GitHub workflow then performs these steps"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"creates a tag on the current branch, e.g. ",(0,i.kt)("inlineCode",{parentName:"li"},"v0.0.4-something-SNAPSHOT")," (note the ",(0,i.kt)("inlineCode",{parentName:"li"},"v")," prefix). This is done using the\nGitHub API."),(0,i.kt)("li",{parentName:"ol"},"creates a merge commit from source branch to ",(0,i.kt)("inlineCode",{parentName:"li"},"releases"),". The version information is encoded into the commit message."),(0,i.kt)("li",{parentName:"ol"},'triggers the Eclipse Foundation Jenkins instance ("JIPP"). This is where the actual publishing to MavenCentral\nhappens. Note that this process may take quite a bit of time, as every module is signed and uploaded. ',(0,i.kt)("strong",{parentName:"li"},"Important: if\nthe version string contains the ",(0,i.kt)("inlineCode",{parentName:"strong"},"-SNAPSHOT")," suffix, the version is uploaded to OSSRH Snapshots instead of\nMavenCentral!")),(0,i.kt)("li",{parentName:"ol"},"Creates a GitHub release including an automatically generated changelog, if the release is not a ",(0,i.kt)("inlineCode",{parentName:"li"},"-SNAPSHOT"),". This is\nonly for informational purposes, no additionsl artifacts are uploaded. The GitHub Release has the following\nproperties:",(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"only created on non-snapshots"),(0,i.kt)("li",{parentName:"ul"},"always created off of ",(0,i.kt)("inlineCode",{parentName:"li"},"main")," branch"),(0,i.kt)("li",{parentName:"ul"},"the release notes are auto-generated based on the last available tag and the ",(0,i.kt)("inlineCode",{parentName:"li"},".github/releases.yaml")," file"),(0,i.kt)("li",{parentName:"ul"},"no pre-releases are supported"),(0,i.kt)("li",{parentName:"ul"},"no discussions are created")))),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},"Important: The first commit after a release has to change the ",(0,i.kt)("inlineCode",{parentName:"strong"},"defaultVersion")," in ",(0,i.kt)("inlineCode",{parentName:"strong"},"gradle.properties")," to ",(0,i.kt)("inlineCode",{parentName:"strong"},"-SNAPSHOT"),"\nagain. Otherwise, the upload of the automated nightly builds to OSSRH Snapshots will fail.")))}c.isMDXComponent=!0}}]);