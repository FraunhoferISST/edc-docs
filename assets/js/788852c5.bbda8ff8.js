"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[2783],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),s=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(d.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),u=i,h=m["".concat(d,".").concat(u)]||m[u]||c[u]||r;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function u(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=m;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},28889:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>s});var a=n(87462),i=(n(67294),n(3905));const r={},o="Add creation and update timestamp",l={unversionedId:"submodule/Connector/docs/developer/decision-records/2022-08-01-entity-timestamp/README",id:"submodule/Connector/docs/developer/decision-records/2022-08-01-entity-timestamp/README",title:"Add creation and update timestamp",description:"Decision",source:"@site/docs/submodule/Connector/docs/developer/decision-records/2022-08-01-entity-timestamp/README.md",sourceDirName:"submodule/Connector/docs/developer/decision-records/2022-08-01-entity-timestamp",slug:"/submodule/Connector/docs/developer/decision-records/2022-08-01-entity-timestamp/",permalink:"/edc-docs/docs/submodule/Connector/docs/developer/decision-records/2022-08-01-entity-timestamp/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/docs/developer/decision-records/2022-08-01-entity-timestamp/README.md",tags:[],version:"current",frontMatter:{}},d={},s=[{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Approach",id:"approach",level:2},{value:"Data model",id:"data-model",level:3},{value:"Mutating objects",id:"mutating-objects",level:3},{value:"Persisting entities",id:"persisting-entities",level:3}],p={toc:s};function c(e){let{components:t,...n}=e;return(0,i.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"add-creation-and-update-timestamp"},"Add creation and update timestamp"),(0,i.kt)("h2",{id:"decision"},"Decision"),(0,i.kt)("p",null,"All objects in EDC, which can be persisted in a database, should have a ",(0,i.kt)("inlineCode",{parentName:"p"},"createdAt")," timestamp, all objects that\nare\n",(0,i.kt)("em",{parentName:"p"},"mutable")," should also have a ",(0,i.kt)("inlineCode",{parentName:"p"},"updatedAt"),' timestamp. In this document they will be referred to as "business\nobjects"\n/"entities" and "mutable business objects"/"mutable entities" respectively'),(0,i.kt)("h2",{id:"rationale"},"Rationale"),(0,i.kt)("p",null,"It should be possible to track the creation time and last-updated time for the aforementioned (mutable)\nentities, e.g. for auditing or for displaying purposes in a web frontend."),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"createdAt")," timestamp must be immutable. It cannot be changed after the initial object construction. The\n",(0,i.kt)("inlineCode",{parentName:"p"},"updatedAt")," timestamp must be updated everytime the entity is put back into storage. This includes ",(0,i.kt)("inlineCode",{parentName:"p"},"save"),"\noperations that do not entail an actual change to the object."),(0,i.kt)("h2",{id:"approach"},"Approach"),(0,i.kt)("p",null,"Both these timestamps are in Epoc milliseconds in Universal Coordinated Time (UTC), so obtaining the current time",(0,i.kt)("br",{parentName:"p"}),"\n","would be done using ",(0,i.kt)("inlineCode",{parentName:"p"},"Clock.systemUTC().millis()"),". This is in compliance with EDC usage of ",(0,i.kt)("inlineCode",{parentName:"p"},"java.time.Clock"),"."),(0,i.kt)("p",null,"The following entities are considered ",(0,i.kt)("em",{parentName:"p"},"immutable"),":"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Policy"),"/",(0,i.kt)("inlineCode",{parentName:"li"},"PolicyDefinition")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ContractDefinition")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"Asset"))),(0,i.kt)("p",null,"The following entities are considered ",(0,i.kt)("em",{parentName:"p"},"mutable")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"ContractNegotiation")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TransferProcess"))),(0,i.kt)("p",null,"All entities that are effectively immutable, even though the might get re-persisted multiple times, are still\nconsidered ",(0,i.kt)("em",{parentName:"p"},"immutable"),". They typically cannot exist on their own. For instance a ",(0,i.kt)("inlineCode",{parentName:"p"},"DataRequest")," is always tied to the\n",(0,i.kt)("inlineCode",{parentName:"p"},"TransferProcess")," and cannot be changed once the transfer process has been created. By the same logic, a\n",(0,i.kt)("inlineCode",{parentName:"p"},"ContractOffer")," - once received by either party - is considered immutable and any counter-offer triggers the creation of\na copy."),(0,i.kt)("p",null,"Similarly, once a ",(0,i.kt)("inlineCode",{parentName:"p"},"ContractNegotiation")," is in the ",(0,i.kt)("inlineCode",{parentName:"p"},"CONFIRMED")," state, i.e. there is a ",(0,i.kt)("inlineCode",{parentName:"p"},"ContractAgreement")," attached to it,\nboth it and the ",(0,i.kt)("inlineCode",{parentName:"p"},"ContractAgreement")," become ",(0,i.kt)("em",{parentName:"p"},"immutable"),"."),(0,i.kt)("h3",{id:"data-model"},"Data model"),(0,i.kt)("p",null,"I propose extracting the ",(0,i.kt)("inlineCode",{parentName:"p"},"createdTimestamp")," (plus the Builder infrastructure) into a new abstract classes ",(0,i.kt)("inlineCode",{parentName:"p"},"Entity"),"\n(and renaming it to ",(0,i.kt)("inlineCode",{parentName:"p"},"createdAt"),") that is extended by ",(0,i.kt)("em",{parentName:"p"},"all")," entities, mutable and immutable. By default, the ",(0,i.kt)("inlineCode",{parentName:"p"},"createdAt"),"\nfield is initialized with the current UTC epoch in milliseconds."),(0,i.kt)("p",null,"In addition, the ",(0,i.kt)("inlineCode",{parentName:"p"},"StatefulEntity")," can be extended with a ",(0,i.kt)("inlineCode",{parentName:"p"},"updatedAt")," field:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public abstract class StatefulEntity<T extends StatefulEntity<T>> extends Entity implements TraceCarrier {\n    private long updatedAt;\n\n    public long getUpdatedAt() {\n        return updatedAt;\n    }\n\n    public void setUpdatedAt(long epochMillis) {\n        updatedAt = epochMillis;\n    }\n    // ...\n}\n")),(0,i.kt)("p",null,"And similar to the ",(0,i.kt)("inlineCode",{parentName:"p"},"Entity"),", the ",(0,i.kt)("inlineCode",{parentName:"p"},"StatefulEntity"),"'s Builder would also have a new method that sets the last update. By\ndefault, ",(0,i.kt)("inlineCode",{parentName:"p"},"updatedAt")," would be initialized with ",(0,i.kt)("inlineCode",{parentName:"p"},"createdAt"),"."),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},"Note: the ",(0,i.kt)("inlineCode",{parentName:"em"},"StatefulEntity")," class already has a ",(0,i.kt)("inlineCode",{parentName:"em"},"Clock")," that can be moved up to the ",(0,i.kt)("inlineCode",{parentName:"em"},"Entity")," and be re-used for this\npurpose.")),(0,i.kt)("h3",{id:"mutating-objects"},"Mutating objects"),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"createdAt")," field would always be initialized during object creation. The ",(0,i.kt)("inlineCode",{parentName:"p"},"updatedAt")," timestamp would be\nupdated by the ",(0,i.kt)("em",{parentName:"p"},"manipulating class"),". That means, whichever class manipulates the ",(0,i.kt)("inlineCode",{parentName:"p"},"StatefulEntity")," is also responsible\nfor updating the ",(0,i.kt)("inlineCode",{parentName:"p"},"updatedAt")," field. These are:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"TransferProcessManagerImpl"),": right before ",(0,i.kt)("inlineCode",{parentName:"li"},"transferProcessStore.update()")," is called"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SingleTransferProcessCommandHandler"),": could be done in the ",(0,i.kt)("inlineCode",{parentName:"li"},"else")," path of the ",(0,i.kt)("inlineCode",{parentName:"li"},"handle")," method"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"[Consumer|Provider]ContractNegotiationManagerImpl"),": right before ",(0,i.kt)("inlineCode",{parentName:"li"},"negotiationStore.save()")," is called. could be\nextracted into the ",(0,i.kt)("inlineCode",{parentName:"li"},"AbstractContractNegotiationManager")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"SingleContractNegotiationCommandHandler"),": could be done in the ",(0,i.kt)("inlineCode",{parentName:"li"},"else")," path of the ",(0,i.kt)("inlineCode",{parentName:"li"},"handle")," method")),(0,i.kt)("h3",{id:"persisting-entities"},"Persisting entities"),(0,i.kt)("p",null,"No action needs to be taken for the CosmosDB store as it is already document-based and persisting another field should\nbe seamless. For the Postgres implementations the ",(0,i.kt)("inlineCode",{parentName:"p"},"createdAt")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"updatedAt")," fields should be of type ",(0,i.kt)("inlineCode",{parentName:"p"},"BIGINT"),"\n, for example (",(0,i.kt)("inlineCode",{parentName:"p"},"TransferProcess"),"):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-postgresql"},"\nCREATE TABLE IF NOT EXISTS edc_transfer_process\n(\n    created_at    BIGINT, -- already exists (albeit with a different name)\n    updated_at    BIGINT  -- this is new\n\n    -- other columns omitted\n);\n")))}c.isMDXComponent=!0}}]);