"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[9632],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>d});var n=a(67294);function o(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){o(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function r(e,t){if(null==e)return{};var a,n,o=function(e,t){if(null==e)return{};var a,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(o[a]=e[a]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(o[a]=e[a])}return o}var s=n.createContext({}),p=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,c=r(e,["components","mdxType","originalType","parentName"]),u=p(a),d=o,k=u["".concat(s,".").concat(d)]||u[d]||m[d]||i;return a?n.createElement(k,l(l({ref:t},c),{},{components:a})):n.createElement(k,l({ref:t},c))}));function d(e,t){var a=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=a.length,l=new Array(i);l[0]=u;var r={};for(var s in t)hasOwnProperty.call(t,s)&&(r[s]=t[s]);r.originalType=e,r.mdxType="string"==typeof e?e:o,l[1]=r;for(var p=2;p<i;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},62441:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>r,toc:()=>p});var n=a(87462),o=(a(67294),a(3905));const i={},l="Minimum Viable Dataspace",r={unversionedId:"submodule/MinimumViableDataspace/README",id:"submodule/MinimumViableDataspace/README",title:"Minimum Viable Dataspace",description:"The Minimum Viable Dataspace (MVD) is a sample implementation of a dataspace that leverages the Eclipse Dataspace Connector (EDC). The main purpose is to demonstrate the capabilities of the EDC, make dataspace concepts tangible based on a specific implementation, and to serve as a starting point to implement a custom dataspace.",source:"@site/docs/submodule/MinimumViableDataspace/README.md",sourceDirName:"submodule/MinimumViableDataspace",slug:"/submodule/MinimumViableDataspace/",permalink:"/edc-docs/docs/submodule/MinimumViableDataspace/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/MinimumViableDataspace/README.md",tags:[],version:"current",frontMatter:{}},s={},p=[{value:"Documentation",id:"documentation",level:2},{value:"Create Dataspace Deployment",id:"create-dataspace-deployment",level:2},{value:"Destroy Dataspace Deployment",id:"destroy-dataspace-deployment",level:2},{value:"Local Development Setup",id:"local-development-setup",level:2},{value:"Run A Standard Scenario Locally",id:"run-a-standard-scenario-locally",level:3},{value:"Contributing",id:"contributing",level:2}],c={toc:p};function m(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"minimum-viable-dataspace"},"Minimum Viable Dataspace"),(0,o.kt)("p",null,"The Minimum Viable Dataspace (MVD) is a sample implementation of a dataspace that leverages the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/eclipse-dataspaceconnector/dataspaceconnector"},"Eclipse Dataspace Connector (EDC)"),". The main purpose is to demonstrate the capabilities of the EDC, make dataspace concepts tangible based on a specific implementation, and to serve as a starting point to implement a custom dataspace."),(0,o.kt)("p",null,"The MVD allows developers and decision makers to gauge the current progress of the EDC and its capabilities to satisfy the functionality of a fully operational dataspace."),(0,o.kt)("p",null,"As a fully decentralized dataspace is hard to imagine, the MVD also serves the purpose of demonstrating how decentralization can be practically implemented."),(0,o.kt)("h2",{id:"documentation"},"Documentation"),(0,o.kt)("p",null,"Developer documentation can be found under ",(0,o.kt)("a",{parentName:"p",href:"docs/developer/"},"docs/developer"),", where the main concepts and decisions are captured as ",(0,o.kt)("a",{parentName:"p",href:"docs/developer/decision-records/"},"decision records"),"."),(0,o.kt)("h2",{id:"create-dataspace-deployment"},"Create Dataspace Deployment"),(0,o.kt)("p",null,"To be able to deploy your own dataspace instances, you first need to ",(0,o.kt)("a",{parentName:"p",href:"/edc-docs/docs/submodule/MinimumViableDataspace/docs/developer/continuous-deployment/continuous_deployment"},"fork the MVD repository and set up your environment"),"."),(0,o.kt)("p",null,"Once your environment is set up, follow these steps to create a new dataspace instance:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Go to your MVD fork in GitHub."),(0,o.kt)("li",{parentName:"ul"},"Select the tab called ",(0,o.kt)("inlineCode",{parentName:"li"},"Actions"),"."),(0,o.kt)("li",{parentName:"ul"},"Select the workflow called ",(0,o.kt)("inlineCode",{parentName:"li"},"Deploy"),"."),(0,o.kt)("li",{parentName:"ul"},"Provide your own resources name prefix. The prefix must be 3 to 7 lowercase letters and digits, starting with a letter.\nThis name prefix ensures the resources name's uniqueness and avoids resource name conflicts.\nNote down the used prefix."),(0,o.kt)("li",{parentName:"ul"},"Click on ",(0,o.kt)("inlineCode",{parentName:"li"},"Run workflow")," to trigger the deployment.")),(0,o.kt)("h2",{id:"destroy-dataspace-deployment"},"Destroy Dataspace Deployment"),(0,o.kt)("p",null,"Follow these steps to delete a dataspace instance and free up the corresponding resources:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Go to your MVD fork in GitHub."),(0,o.kt)("li",{parentName:"ul"},"Select the tab called ",(0,o.kt)("inlineCode",{parentName:"li"},"Actions")),(0,o.kt)("li",{parentName:"ul"},"Select the workflow called ",(0,o.kt)("inlineCode",{parentName:"li"},"Destroy")),(0,o.kt)("li",{parentName:"ul"},"Click on ",(0,o.kt)("inlineCode",{parentName:"li"},"Run workflow")),(0,o.kt)("li",{parentName:"ul"},"Provide the resources prefix that you used when you deployed your DataSpace."),(0,o.kt)("li",{parentName:"ul"},"Click on ",(0,o.kt)("inlineCode",{parentName:"li"},"Run workflow")," to trigger to destroy your MinimumViableDataspace DataSpace.")),(0,o.kt)("h2",{id:"local-development-setup"},"Local Development Setup"),(0,o.kt)("p",null,"The MVD backend and MVD UI (Data Dashboard) can be run locally for testing and development."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"Check out the\nrepository ",(0,o.kt)("a",{parentName:"li",href:"https://github.com/eclipse-dataspaceconnector/DataDashboard"},"eclipse-dataspaceconnector/DataDashboard")," or\nyour corresponding fork."),(0,o.kt)("li",{parentName:"ol"},"Set the environment variable ",(0,o.kt)("inlineCode",{parentName:"li"},"MVD_UI_PATH")," to the path of the DataDashboard repository. (See example below.)"),(0,o.kt)("li",{parentName:"ol"},"Use the instructions in section ",(0,o.kt)("inlineCode",{parentName:"li"},"Publish/Build Tasks")," ",(0,o.kt)("a",{parentName:"li",href:"/edc-docs/docs/submodule/MinimumViableDataspace/system-tests/"},"system-tests/README.md")," to set up a\nlocal MVD environment with the exception to use the profile ",(0,o.kt)("inlineCode",{parentName:"li"},"ui"),". (See example below.)",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"In order to verify your local environment works properly, also follow section ",(0,o.kt)("inlineCode",{parentName:"li"},"Local Test Execution"),"\nin ",(0,o.kt)("inlineCode",{parentName:"li"},"system-tests/README.md")," .")))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Using the profile ",(0,o.kt)("inlineCode",{parentName:"p"},"ui")," will create three MVD UIs (Data Dashboards) for each EDC participant in addition to the\nservices described in ",(0,o.kt)("a",{parentName:"p",href:"/edc-docs/docs/submodule/MinimumViableDataspace/system-tests/"},"system-tests/README.md"),".")),(0,o.kt)("p",null,"Bash:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'export MVD_UI_PATH="/path/to/mvd-datadashboard"\ndocker-compose --profile ui -f system-tests/docker-compose.yml up --build\n')),(0,o.kt)("p",null,"PowerShell:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-powershell"},'$Env:MVD_UI_PATH="/path/to/mvd-datadashboard"\ndocker-compose --profile ui -f system-tests/docker-compose.yml up --build\n')),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"In Windows Docker Compose expects the path to use forward slashes instead of backslashes.")),(0,o.kt)("p",null,"The profile ",(0,o.kt)("inlineCode",{parentName:"p"},"ui")," creates three Data Dashboards each connected to an EDC participant. The respective ",(0,o.kt)("inlineCode",{parentName:"p"},"app.config.json"),"\nfiles can be found in the respective directories:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"resources/appconfig/company1/app.config.json")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"resources/appconfig/company2/app.config.json")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"resources/appconfig/company3/app.config.json"))),(0,o.kt)("p",null,"That's it to run the local development environment. The following section ",(0,o.kt)("inlineCode",{parentName:"p"},"Run A Standard Scenario Locally")," describes a\nstandard scenario which can be optionally used with the local development environment."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Tip: The console output from the services spun up by Docker compose can be noisy. To decrease the output from the\nservices on the console set ",(0,o.kt)("inlineCode",{parentName:"p"},"EDC_CATALOG_CACHE_EXECUTION_PERIOD_SECONDS")," to a higher value, e.g. 60, for each EDC\nparticipant in ",(0,o.kt)("inlineCode",{parentName:"p"},"system-tests/docker-compose.yml"),".")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: The container ",(0,o.kt)("inlineCode",{parentName:"p"},"cli-tools")," will turn into the state ",(0,o.kt)("inlineCode",{parentName:"p"},"healthy")," after registering successfully all participants and\nwill keep running as an entrypoint to the services created by Docker compose. This is useful for local development in order\nto manually check commands against the participants (e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"company1"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"company2"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"company3"),").")),(0,o.kt)("p",null,"Sample how to enter the container ",(0,o.kt)("inlineCode",{parentName:"p"},"cli-tools")," and test a command manually."),(0,o.kt)("p",null,"Host:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-powershell"},"docker exec -it cli-tools bash\n")),(0,o.kt)("p",null,"Container:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"java -jar registration-service-cli.jar \\\n>    -d=did:web:did-server:registration-service \\\n>    --http-scheme \\\n>    -k=/resources/vault/company1/private-key.pem \\\n>    -c=did:web:did-server:company1 \\\n>    participants get\n")),(0,o.kt)("p",null,"Output (container)"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "did" : "did:web:did-server:company1",\n  "status" : "ONBOARDED"\n}\n')),(0,o.kt)("h3",{id:"run-a-standard-scenario-locally"},"Run A Standard Scenario Locally"),(0,o.kt)("p",null,"Prerequisite: create a test document manually:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Connect to the ",(0,o.kt)("strong",{parentName:"li"},"local")," blob storage account (provided by Azurite) of company1.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Storage account name: ",(0,o.kt)("inlineCode",{parentName:"li"},"company1assets"),", storage account key: ",(0,o.kt)("inlineCode",{parentName:"li"},"key1"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://azure.microsoft.com/features/storage-explorer/"},"Microsoft Azure Storage Explorer")," can be used to connect to the local\nstorage account on ",(0,o.kt)("inlineCode",{parentName:"li"},"localhost:10000"),"."))),(0,o.kt)("li",{parentName:"ul"},"Create a container named ",(0,o.kt)("inlineCode",{parentName:"li"},"src-container"),". (Container name is defined for Postman request ",(0,o.kt)("inlineCode",{parentName:"li"},"Publish Master Data"),"\nin ",(0,o.kt)("inlineCode",{parentName:"li"},"deployment/data/MVD.postman_collection.json"),")"),(0,o.kt)("li",{parentName:"ul"},"Copy ",(0,o.kt)("inlineCode",{parentName:"li"},"deployment/terraform/participant/sample-data/text-document.txt")," into the newly created container.",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"N.B.: it does not have to be this exact file as long you create a file which has the name ",(0,o.kt)("inlineCode",{parentName:"li"},"text-document.txt"),".")))),(0,o.kt)("p",null,"All this can also be done using Azure CLI with the following lines from the root of the MVD repository:"),(0,o.kt)("p",null,"Bash:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'conn_str="DefaultEndpointsProtocol=http;AccountName=company1assets;AccountKey=key1;BlobEndpoint=http://127.0.0.1:10000/company1assets;"\naz storage container create --name src-container --connection-string $conn_str\naz storage blob upload -f ./deployment/terraform/participant/sample-data/text-document.txt --container-name src-container --name text-document.txt --connection-string $conn_str\n')),(0,o.kt)("p",null,"PowerShell:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-powershell"},'$conn_str="DefaultEndpointsProtocol=http;AccountName=company1assets;AccountKey=key1;BlobEndpoint=http://127.0.0.1:10000/company1assets;"\naz storage container create --name src-container --connection-string $conn_str\naz storage blob upload -f .\\deployment\\terraform\\participant\\sample-data\\text-document.txt --container-name src-container --name text-document.txt --connection-string $conn_str\n')),(0,o.kt)("p",null,"This should result in a similar output as follows. Via the Microsoft Azure Storage Explorer it would be possible to\nreview the new container and the uploaded blob."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'{\n  "created": true\n}\n\nFinished[#############################################################]  100.0000%\n{\n  "etag": "\\"0x1CC7CAB96842160\\"",\n  "lastModified": "2022-08-08T15:14:01+00:00"\n}\n')),(0,o.kt)("p",null,"The following steps initiate and complete a file transfer with the provided test document."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Open the website of company1 (e.g. ",(0,o.kt)("a",{parentName:"li",href:"http://localhost:7080"},"http://localhost:7080"),") and verify the existence of two assets in the\nsection ",(0,o.kt)("inlineCode",{parentName:"li"},"Assets"),"."),(0,o.kt)("li",{parentName:"ul"},"Open the website of the company2 (e.g. ",(0,o.kt)("a",{parentName:"li",href:"http://localhost:7081"},"http://localhost:7081"),") and verify six existing assets from all participants in\nthe ",(0,o.kt)("inlineCode",{parentName:"li"},"Catalog Browser"),".",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"In the ",(0,o.kt)("inlineCode",{parentName:"li"},"Catalog Browser")," click ",(0,o.kt)("inlineCode",{parentName:"li"},"Negotiate")," for the asset ",(0,o.kt)("inlineCode",{parentName:"li"},"test-document_company1"),".",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"There should be a message ",(0,o.kt)("inlineCode",{parentName:"li"},"Contract Negotiation complete! Show me!")," in less than a minute."))))),(0,o.kt)("li",{parentName:"ul"},"From the previous message click ",(0,o.kt)("inlineCode",{parentName:"li"},"Show me!"),". If you missed it, switch manually to the section ",(0,o.kt)("inlineCode",{parentName:"li"},"Contracts"),".",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"There should be a new contract. Click ",(0,o.kt)("inlineCode",{parentName:"li"},"Transfer")," to initiate the transfer process."),(0,o.kt)("li",{parentName:"ul"},"A dialog should open. Here, select as destination ",(0,o.kt)("inlineCode",{parentName:"li"},"AzureStorage")," and click ",(0,o.kt)("inlineCode",{parentName:"li"},"Start transfer"),"."),(0,o.kt)("li",{parentName:"ul"},"There should be a message ",(0,o.kt)("inlineCode",{parentName:"li"},"Transfer [id] complete! Show me!")," in less than a minute. (Where ",(0,o.kt)("inlineCode",{parentName:"li"},"id")," is a UUID.)"))),(0,o.kt)("li",{parentName:"ul"},"To verify the successful transfer the Storage Explorer can be used to look into the storage account of ",(0,o.kt)("inlineCode",{parentName:"li"},"company2"),".",(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Storage account name and key is set in ",(0,o.kt)("inlineCode",{parentName:"li"},"system-tests/docker-compose.yml")," for the service ",(0,o.kt)("inlineCode",{parentName:"li"},"azurite"),". Default name\nis ",(0,o.kt)("inlineCode",{parentName:"li"},"company2assets"),", key is ",(0,o.kt)("inlineCode",{parentName:"li"},"key2"),"."),(0,o.kt)("li",{parentName:"ul"},"There should be new container in the storage account containing two files ",(0,o.kt)("inlineCode",{parentName:"li"},".complete")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"test-document.txt"),".")))),(0,o.kt)("h2",{id:"contributing"},"Contributing"),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/eclipse-dataspaceconnector/DataSpaceConnector/blob/main/CONTRIBUTING.md"},"how to contribute"),"."))}m.isMDXComponent=!0}}]);