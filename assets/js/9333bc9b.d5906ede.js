"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[4979],{3905:(e,t,r)=>{r.d(t,{Zo:()=>u,kt:()=>m});var n=r(67294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=c(r),m=o,h=p["".concat(l,".").concat(m)]||p[m]||d[m]||a;return r?n.createElement(h,i(i({ref:t},u),{},{components:r})):n.createElement(h,i({ref:t},u))}));function m(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},63740:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>c});var n=r(87462),o=(r(67294),r(3905));const a={},i="Automating the EDC release process",s={unversionedId:"submodule/Connector/docs/developer/decision-records/2022-07-06-release-automation/README",id:"submodule/Connector/docs/developer/decision-records/2022-07-06-release-automation/README",title:"Automating the EDC release process",description:"Decision",source:"@site/docs/submodule/Connector/docs/developer/decision-records/2022-07-06-release-automation/README.md",sourceDirName:"submodule/Connector/docs/developer/decision-records/2022-07-06-release-automation",slug:"/submodule/Connector/docs/developer/decision-records/2022-07-06-release-automation/",permalink:"/edc-docs/docs/submodule/Connector/docs/developer/decision-records/2022-07-06-release-automation/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/docs/developer/decision-records/2022-07-06-release-automation/README.md",tags:[],version:"current",frontMatter:{}},l={},c=[{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Approach",id:"approach",level:2},{value:"Future improvements",id:"future-improvements",level:2}],u={toc:c};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"automating-the-edc-release-process"},"Automating the EDC release process"),(0,o.kt)("h2",{id:"decision"},"Decision"),(0,o.kt)("p",null,"We will use GitHub actions to automate the release of both ",(0,o.kt)("inlineCode",{parentName:"p"},"SNAPSHOT")," and release versions to decrease the error\nsurface."),(0,o.kt)("p",null,"A dedicated ",(0,o.kt)("inlineCode",{parentName:"p"},"releases")," branch will be created to host those."),(0,o.kt)("h2",{id:"rationale"},"Rationale"),(0,o.kt)("p",null,"This allows committers to simply trigger the creation of a version through GitHub actions and does not require logging\nin to our JIPP (EF Jenkins) instance and perform manual actions there."),(0,o.kt)("p",null,"Having a dedicated branch for all releases will it make easier in the future to provide hotfixes for older versions."),(0,o.kt)("h2",{id:"approach"},"Approach"),(0,o.kt)("p",null,"There will be a new branch called ",(0,o.kt)("inlineCode",{parentName:"p"},"releases"),", which is only used to record the history of our releases, i.e. receive\nmerge commits for every release. In addition, a new GitHub workflow will be created that:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"prompts the user to input version string. This must be a SemVer string."),(0,o.kt)("li",{parentName:"ol"},"creates a tag on ",(0,o.kt)("inlineCode",{parentName:"li"},"main")," with that version string, e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"v0.0.1-SNAPSHOT"),". This could be done automatically in step 5."),(0,o.kt)("li",{parentName:"ol"},"creates a merge-commit ",(0,o.kt)("inlineCode",{parentName:"li"},"main"),"->",(0,o.kt)("inlineCode",{parentName:"li"},"releases"),", where the version string is used in the commit message"),(0,o.kt)("li",{parentName:"ol"},"triggers the release job on JIPP supplying the version string as input parameter"),(0,o.kt)("li",{parentName:"ol"},"creates a GitHub Release")),(0,o.kt)("p",null,"The JIPP then builds and publishes the version to MavenCentral, or OSSRH Snapshots if the version string ends\nwith ",(0,o.kt)("inlineCode",{parentName:"p"},"-SNAPSHOT"),". For that, a new job will be created on Jenkins, that does ",(0,o.kt)("em",{parentName:"p"},"not")," have a cron-based build trigger."),(0,o.kt)("h2",{id:"future-improvements"},"Future improvements"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"update ",(0,o.kt)("inlineCode",{parentName:"li"},"gradle.properties"),": the GitHub action could commit the user input (version string) back\ninto ",(0,o.kt)("inlineCode",{parentName:"li"},"gradle.properties"),". That would result in an additional commit and was therefor left out for now."),(0,o.kt)("li",{parentName:"ul"},'bump version automatically: instead of manually entering a version we could have an "auto-bump" feature, that\nautomatically increases the version in ',(0,o.kt)("inlineCode",{parentName:"li"},"gradle.properties"),". This makes snapshots with metadata more difficult\n(e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"0.0.1-foobar-SNAPSHOT"),"), and was therefore skipped for now."),(0,o.kt)("li",{parentName:"ul"},"use Jenkins' GitHub hook trigger for GITScm polling: GitHub calls a WebHook in Jenkins, who then in turn\none-time-polls the Git repo, and triggers a build when changes were detected. This would get rid of the busy waiting\nof the GitHub Jenkins Action.")))}d.isMDXComponent=!0}}]);