"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[185],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=o,k=u["".concat(c,".").concat(m)]||u[m]||p[m]||i;return n?a.createElement(k,r(r({ref:t},d),{},{components:n})):a.createElement(k,r({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,r=new Array(i);r[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var s=2;s<i;s++)r[s]=n[s];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},80376:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>r,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(87462),o=(n(67294),n(3905));const i={},r="EDC Naming Conventions",l={unversionedId:"submodule/Connector/docs/developer/decision-records/2022-10-10-naming-conventions/README",id:"submodule/Connector/docs/developer/decision-records/2022-10-10-naming-conventions/README",title:"EDC Naming Conventions",description:"Decision",source:"@site/docs/submodule/Connector/docs/developer/decision-records/2022-10-10-naming-conventions/README.md",sourceDirName:"submodule/Connector/docs/developer/decision-records/2022-10-10-naming-conventions",slug:"/submodule/Connector/docs/developer/decision-records/2022-10-10-naming-conventions/",permalink:"/edc-docs/docs/submodule/Connector/docs/developer/decision-records/2022-10-10-naming-conventions/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/docs/developer/decision-records/2022-10-10-naming-conventions/README.md",tags:[],version:"current",frontMatter:{}},c={},s=[{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Approach",id:"approach",level:2},{value:"Gradle module name",id:"gradle-module-name",level:3},{value:"Maven artifactId",id:"maven-artifactid",level:3},{value:"Java package name",id:"java-package-name",level:3},{value:"Configuration properties",id:"configuration-properties",level:3},{value:"Implementation",id:"implementation",level:2}],d={toc:s};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"edc-naming-conventions"},"EDC Naming Conventions"),(0,o.kt)("h2",{id:"decision"},"Decision"),(0,o.kt)("p",null,"The naming of existing and future Java packages, Gradle modules, Maven artifacts, and configuration\nproperties should follow defined naming conventions that align the project's structure. "),(0,o.kt)("p",null,"Related decision records:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../2022-08-09-project-structure-review/"},"2022-08-09 Project structure review")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"../2022-08-11-versioning_and_artifacts/"},"2022-08-11 Versioning and Artifacts"))),(0,o.kt)("h2",{id:"rationale"},"Rationale"),(0,o.kt)("p",null,"A software project's structure should be designed as developer-friendly as possible, by following precisely\ndefined rules based on established standards."),(0,o.kt)("p",null,"Our goals by introducing naming conventions are:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Easy navigation of either Gradle modules, Maven artifacts or the Java package structure."),(0,o.kt)("li",{parentName:"ul"},"Unique naming of config properties (especially with regard to custom properties introduced by extensions)."),(0,o.kt)("li",{parentName:"ul"},"Accordance to the Eclipse Foundation's guidelines and release processes."),(0,o.kt)("li",{parentName:"ul"},"Elimination of split packages.")),(0,o.kt)("h2",{id:"approach"},"Approach"),(0,o.kt)("h3",{id:"gradle-module-name"},"Gradle module name"),(0,o.kt)("p",null,'Gradle modules must have unique names across the entire build classpath, even if they are located in\ndifferent module paths. This is because of a bug in Gradle itself where Gradle will erroneously report\na "cyclic dependency" if this rule is violated. The following hypothetical example would constitute\nsuch a violation:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'// settings.gradle.kts\ninclude(":core:common:transfer-process")\ninclude(":extensions:sql:transfer-process")\n')),(0,o.kt)("p",null,"The EDC project has checks in place to make sure module IDs are unique."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Rule 1: Modules must have unique names.")),(0,o.kt)("p",null,"In addition, the ",(0,o.kt)("em",{parentName:"p"},"module name"),' should give a hint what is in the module, without being too verbose. The\nearlier example would be a bad one, because "transfer-process" does not indicate what the contents could\nbe. This is especially important because we require the Maven\'s ',(0,o.kt)("em",{parentName:"p"},"artifactId")," to be equal to module names."),(0,o.kt)("p",null,"Here are some bad examples:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},":core:common:transfer-process:validation"),': bad because "validation" is likely to be not unique and isolated it only indicates that it has to do with validation, but not in ',(0,o.kt)("em",{parentName:"li"},"what context"),"."),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},":core:dataplane:framework"),': again, "framework" is liable to cause conflicts, and in addition, it\'s a very generic, unspecific term')),(0,o.kt)("p",null,"Refactoring these bad examples, we could arrive at these:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},":core:common:transfer-process:transfer-process-validation"),": could contain validation functions"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},":core:dataplane:dataplane-framework"),": would contain default impls and platform code for the dataplane")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Rule 2: Module names should indicate what the contents are.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Rule 3: Module names must be identical to the Maven artifactId (if one is published).")),(0,o.kt)("h3",{id:"maven-artifactid"},"Maven artifactId"),(0,o.kt)("p",null,"The EDC project uses the same ",(0,o.kt)("inlineCode",{parentName:"p"},'groupId = "org.eclipse.edc"')," across all sub-projects, which means all\n",(0,o.kt)("em",{parentName:"p"},"artifactIds")," must be unique across multiple software components to avoid conflicts."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Rule 4: A Maven artifactId must be unique within the groupId.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Rule 5: A Maven artifactId must be identical to the module name (cf. ",(0,o.kt)("a",{parentName:"p",href:"#gradle-module-name"},"Rule 3"),").")),(0,o.kt)("h3",{id:"java-package-name"},"Java package name"),(0,o.kt)("p",null,"Following Oracle's ",(0,o.kt)("a",{parentName:"p",href:"https://docs.oracle.com/javase/tutorial/java/package/namingpkgs.html"},"Java package naming conventions"),",\nEDC's base package name is ",(0,o.kt)("inlineCode",{parentName:"p"},"org.eclipse.edc"),", followed by domain and then function. For example, the\nPolicy SPI should be located at ",(0,o.kt)("inlineCode",{parentName:"p"},"org.eclipse.edc.policy.spi")," rather than ",(0,o.kt)("inlineCode",{parentName:"p"},"org.eclipse.edc.spi.policy"),".\nHere, ",(0,o.kt)("inlineCode",{parentName:"p"},"policy"),' is the "domain", i.e. the thematic context, and ',(0,o.kt)("inlineCode",{parentName:"p"},"spi"),' would be the "function", i.e. what\nkind of package it is or what purpose it serves.'),(0,o.kt)("p",null,"The module name could be a helpful reference for the package name, replacing dashes with dots."),(0,o.kt)("p",null,"Other positive examples would be:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"org.eclipse.edc.transferprocess.validation"),": domain is ",(0,o.kt)("inlineCode",{parentName:"li"},"transferprocess"),", and it's a package that deals with validation"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"org.eclipse.edc.dataplane.framework.manager"),": here the domain is ",(0,o.kt)("inlineCode",{parentName:"li"},"dataplane.framework"),", so all code should be beneath that directory.")),(0,o.kt)("p",null,"This helps to avoid split packages."),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Rule 6: Package names should first contain the domain, and then the function.")),(0,o.kt)("h3",{id:"configuration-properties"},"Configuration properties"),(0,o.kt)("p",null,"Configuration properties should have a unique prefix ",(0,o.kt)("inlineCode",{parentName:"p"},"edc")," to avoid clashes, when EDC gets embedded\nin other Java frameworks such as Spring. Further, the config property should contain the component for\nwhich it is valid, and a section in hierarchical structure (dot notation) indicating what the value is about."),(0,o.kt)("p",null,"Bad:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edc.retry.backoff.min"),": does not contain the component, i.e. ",(0,o.kt)("em",{parentName:"li"},"which")," retry backoff min value is configured"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edc.retry.backoff"),": does not contain the component nor does it indicate, ",(0,o.kt)("em",{parentName:"li"},"which")," value is configured, i.e. what data type is expected"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edc.core.retryBackoffMin"),": is not hierarchically structured"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edc.core.system.threadpool-size"),": missing part of the component and is therefore misleading, because it does not indicate ",(0,o.kt)("em",{parentName:"li"},"what")," threadpool we're configuring"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edc.dataplane.wait"),": does not indicate which value is configured"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"web.http.port"),": not prefixed with ",(0,o.kt)("inlineCode",{parentName:"li"},"edc"),", can lead to conflicts")),(0,o.kt)("p",null,"Better:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edc.core.retry.backoff.min")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edc.core.system.health.check.threadpool-size")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edc.dataplane.queue.poll-timeout")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edc.web.http.port"))),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Rule 7: Configuration properties are prefixed with ",(0,o.kt)("inlineCode",{parentName:"p"},"edc."),".")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Rule 8: Configuration properties must contain the component in dotted notation to which they belong.")),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Rule 9: Configuration properties must indicate the value and datatype that they configure.")),(0,o.kt)("h2",{id:"implementation"},"Implementation"),(0,o.kt)("p",null,"Renaming according to the defined ",(0,o.kt)("a",{parentName:"p",href:"#approach"},"rules"),"."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Check if ",(0,o.kt)("em",{parentName:"li"},"module name")," and ",(0,o.kt)("em",{parentName:"li"},"artifactId")," are unique and represent a concatenation in the correct order."),(0,o.kt)("li",{parentName:"ul"},"Modify release process to use ",(0,o.kt)("inlineCode",{parentName:"li"},"org.eclipse.edc")," as ",(0,o.kt)("em",{parentName:"li"},"groupId"),"."),(0,o.kt)("li",{parentName:"ul"},"Check every Java package and move classes if necessary."),(0,o.kt)("li",{parentName:"ul"},"Detect and resolve split packages."),(0,o.kt)("li",{parentName:"ul"},"Align existing configuration properties in the EDC project. Add a clear warning to extensions that fail to load a (new) value.")),(0,o.kt)("p",null,"Changes in the connector repository will affect downstream repositories, in addition, conventions should\nalso be implemented there."))}p.isMDXComponent=!0}}]);