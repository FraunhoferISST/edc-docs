"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[5758],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>h});var r=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),h=o,m=d["".concat(s,".").concat(h)]||d[h]||u[h]||a;return t?r.createElement(m,i(i({ref:n},p),{},{components:t})):r.createElement(m,i({ref:n},p))}));function h(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,i[1]=l;for(var c=2;c<a;c++)i[c]=t[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},36955:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>a,metadata:()=>l,toc:()=>c});var r=t(87462),o=(t(67294),t(3905));const a={},i="Write your first extension",l={unversionedId:"submodule/Connector/samples/health-endpoint/README",id:"submodule/Connector/samples/health-endpoint/README",title:"Write your first extension",description:"In the previous chapter we learned how to build and run a very simple connector. In this chapter we will learn how to",source:"@site/docs/submodule/Connector/samples/02-health-endpoint/README.md",sourceDirName:"submodule/Connector/samples/02-health-endpoint",slug:"/submodule/Connector/samples/health-endpoint/",permalink:"/edc-docs/docs/submodule/Connector/samples/health-endpoint/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/samples/02-health-endpoint/README.md",tags:[],version:"current",frontMatter:{}},s={},c=[],p={toc:c};function u(e){let{components:n,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,a,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"write-your-first-extension"},"Write your first extension"),(0,o.kt)("p",null,"In the previous chapter we learned how to build and run a very simple connector. In this chapter we will learn how to\nleverage the extension concept to add a simple HTTP GET endpoint to our connector."),(0,o.kt)("p",null,"An ",(0,o.kt)("em",{parentName:"p"},"extension")," typically consists of two things:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"a class implementing the ",(0,o.kt)("inlineCode",{parentName:"li"},"ServiceExtension")," interface."),(0,o.kt)("li",{parentName:"ol"},"a plugin file in the ",(0,o.kt)("inlineCode",{parentName:"li"},"src/main/resources/META-INF/services")," directory. This file ",(0,o.kt)("strong",{parentName:"li"},"must")," be named exactly as the\ninterface's fully qualified class-name and it ",(0,o.kt)("strong",{parentName:"li"},"must")," contain the fully-qualified name of the implementing class (\n=plugin class).")),(0,o.kt)("p",null,"Therefore, we require an extension class, which we'll name ",(0,o.kt)("inlineCode",{parentName:"p"},"HealthEndpointExtension"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"public class HealthEndpointExtension implements ServiceExtension {\n\n    @Inject\n    WebService webService;\n\n    @Override\n    public void initialize(ServiceExtensionContext context) {\n        webService.registerResource(new HealthApiController(context.getMonitor()));\n    }\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"@Inject")," annotation indicates that the extension needs a service that is registered by another extension, in\nthis case an implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"WebService.class"),"."),(0,o.kt)("p",null,"For that, we can use Jakarta REST annotations to implement a simple REST API:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'@Consumes({MediaType.APPLICATION_JSON})\n@Produces({MediaType.APPLICATION_JSON})\n@Path("/")\npublic class HealthApiController {\n\n    private final Monitor monitor;\n\n    public HealthApiController(Monitor monitor) {\n        this.monitor = monitor;\n    }\n\n    @GET\n    @Path("health")\n    public String checkHealth() {\n        monitor.info("Received a health request");\n        return "{\\"response\\":\\"I\'m alive!\\"}";\n    }\n}\n')),(0,o.kt)("p",null,"Once we compile and run the application with"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./gradlew clean samples:02-health-endpoint:build\njava -jar samples/02-health-endpoint/build/libs/connector-health.jar\n")),(0,o.kt)("p",null,"we can issue a GET request to ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:8181/api/health")," and receive the aforementioned string as a result."),(0,o.kt)("p",null,"It is worth noting that by default the webserver listens on port ",(0,o.kt)("inlineCode",{parentName:"p"},"8181"),", which is defined\nin ",(0,o.kt)("a",{target:"_blank",href:t(33531).Z},(0,o.kt)("code",null,"JettyConfiguration.java")),"\nand can be configured using the ",(0,o.kt)("inlineCode",{parentName:"p"},"web.http.port")," property (more on that in the next chapter). You will need to configure\nthis whenever you have two connectors running on the same machine."),(0,o.kt)("p",null,"Also, the default path is ",(0,o.kt)("inlineCode",{parentName:"p"},"/api/*"),", which is defined\nin ",(0,o.kt)("a",{target:"_blank",href:t(33531).Z},(0,o.kt)("code",null,"JettyConfiguration.java")),"\n."),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/edc-docs/docs/submodule/Connector/samples/basic-connector/"},"Previous Chapter")," | ",(0,o.kt)("a",{parentName:"p",href:"/edc-docs/docs/submodule/Connector/samples/configuration/"},"Next Chapter")))}u.isMDXComponent=!0},33531:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/files/JettyConfiguration-c95c26da0e0f52dfd57cf063212ad0ed.java"}}]);