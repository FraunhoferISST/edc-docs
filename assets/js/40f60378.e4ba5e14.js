"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[5234],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var i=a.createContext({}),p=function(e){var t=a.useContext(i),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(i.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=r,k=d["".concat(i,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(k,l(l({ref:t},c),{},{components:n})):a.createElement(k,l({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,l=new Array(o);l[0]=d;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var p=2;p<o;p++)l[p]=n[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},56687:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(87462),r=(n(67294),n(3905));const o={},l="System tests",s={unversionedId:"submodule/MinimumViableDataspace/system-tests/README",id:"submodule/MinimumViableDataspace/system-tests/README",title:"System tests",description:"The system tests verify the end-to-end deployment of MVD, including:",source:"@site/docs/submodule/MinimumViableDataspace/system-tests/README.md",sourceDirName:"submodule/MinimumViableDataspace/system-tests",slug:"/submodule/MinimumViableDataspace/system-tests/",permalink:"/edc-docs/docs/submodule/MinimumViableDataspace/system-tests/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/MinimumViableDataspace/system-tests/README.md",tags:[],version:"current",frontMatter:{}},i={},p=[{value:"Publish/Build Tasks",id:"publishbuild-tasks",level:2},{value:"MVD",id:"mvd",level:3},{value:"Test Execution using embedded services",id:"test-execution-using-embedded-services",level:2},{value:"Local Test Resources",id:"local-test-resources",level:3},{value:"Test Execution using cloud resources",id:"test-execution-using-cloud-resources",level:2},{value:"Prepare cloud subscription",id:"prepare-cloud-subscription",level:3},{value:"Creating cloud resources",id:"creating-cloud-resources",level:3},{value:"Running the dataspace + tests",id:"running-the-dataspace--tests",level:3},{value:"Destroying the dataspace again",id:"destroying-the-dataspace-again",level:3},{value:"Debugging MVD locally",id:"debugging-mvd-locally",level:2},{value:"Issuing requests manually with Postman",id:"issuing-requests-manually-with-postman",level:2}],c={toc:p};function u(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"system-tests"},"System tests"),(0,r.kt)("p",null,"The system tests verify the end-to-end deployment of MVD, including:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"That the Identity Hub contains Verifiable Credentials deployed by the CD pipeline."),(0,r.kt)("li",{parentName:"ul"},"That EDC Connectors can interact to populate a federated catalog, and copying a file from a provider (",(0,r.kt)("inlineCode",{parentName:"li"},"company1"),") to a\nconsumer (",(0,r.kt)("inlineCode",{parentName:"li"},"company2"),") blob storage account.")),(0,r.kt)("p",null,"System tests are run both in local deployment (using docker compose) and in the Azure cloud."),(0,r.kt)("h2",{id:"publishbuild-tasks"},"Publish/Build Tasks"),(0,r.kt)("h3",{id:"mvd"},"MVD"),(0,r.kt)("p",null,"EDC, RegistrationService and IdentityHub are available as Maven artifacts. Thus, ",(0,r.kt)("inlineCode",{parentName:"p"},"MVD")," can be built by running the\nfollowing command from the root of the ",(0,r.kt)("inlineCode",{parentName:"p"},"MVD")," project folder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./gradlew build -x test\n")),(0,r.kt)("h2",{id:"test-execution-using-embedded-services"},"Test Execution using embedded services"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MVD")," system tests can be executed locally against a local ",(0,r.kt)("inlineCode",{parentName:"li"},"MVD")," instance."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"MVD")," runs three ",(0,r.kt)("inlineCode",{parentName:"li"},"EDC Connectors")," and one ",(0,r.kt)("inlineCode",{parentName:"li"},"Registration Service"),".")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note: Ensure that you are able to build ",(0,r.kt)("inlineCode",{parentName:"em"},"MVD")," locally as described in the previous ",(0,r.kt)("a",{parentName:"em",href:"#mvd"},"section"),".")),(0,r.kt)("p",null,"First, we need to build the ",(0,r.kt)("inlineCode",{parentName:"p"},"EDC Connector")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"RegistrationService")," runtimes. As we are running ",(0,r.kt)("inlineCode",{parentName:"p"},"MVD")," locally, we\ninclude  ",(0,r.kt)("inlineCode",{parentName:"p"},"useFsVault")," to indicate that the system will be using the local file-system based key vault."),(0,r.kt)("p",null,"From the ",(0,r.kt)("inlineCode",{parentName:"p"},"MVD")," root folder, execute the following command to build the connector JAR and registration service JAR:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'./gradlew -DuseFsVault="true" :launchers:connector:shadowJar\n./gradlew -DuseFsVault="true" :launchers:registrationservice:shadowJar\n')),(0,r.kt)("p",null,"Then, to bring up the dataspace, please execute the following command from the ",(0,r.kt)("inlineCode",{parentName:"p"},"MVD")," root folder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker-compose -f system-tests/docker-compose.yml up --build\n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note for Windows PowerShell, the following commands should be used from the ",(0,r.kt)("inlineCode",{parentName:"em"},"MVD")," project root:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"docker-compose -f system-tests/docker-compose.yml up --build\n")),(0,r.kt)("p",null,"Once completed, following services will start within their docker containers:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"3 ",(0,r.kt)("inlineCode",{parentName:"li"},"EDC Connectors"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"company1")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"company2")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("em",{parentName:"li"},"company3")))),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"Registration Service")),(0,r.kt)("li",{parentName:"ul"},"A ",(0,r.kt)("inlineCode",{parentName:"li"},"HTTP Nginx Server")," (to serve DID Documents)"),(0,r.kt)("li",{parentName:"ul"},"An ",(0,r.kt)("inlineCode",{parentName:"li"},"Azurite")," blob storage service")),(0,r.kt)("p",null,"(EDC Connectors will also be seeded with initial required data using\na ",(0,r.kt)("a",{target:"_blank",href:n(20635).Z},"postman collection"),")"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note, the ",(0,r.kt)("inlineCode",{parentName:"p"},"Newman")," docker container will automatically stop after seeding initial data from postman scripts.")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"The container ",(0,r.kt)("inlineCode",{parentName:"p"},"cli-tools")," will turn into the state ",(0,r.kt)("inlineCode",{parentName:"p"},"healthy")," after registering successfully all participants.")),(0,r.kt)("p",null,"Sample for confirming successful run of container ",(0,r.kt)("inlineCode",{parentName:"p"},"cli-tools"),"."),(0,r.kt)("p",null,"Command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},"docker ps -a\n")),(0,r.kt)("p",null,"Output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},'CONTAINER ID   IMAGE                                     COMMAND                   CREATED              STATUS                        PORTS                                                                              NAMES\n22345bf0c595   system-tests_cli-tools                    "/bin/sh -c \\"/app/en\u2026"   About a minute ago   Up About a minute (healthy)                                                                                      cli-tools\n')),(0,r.kt)("p",null,"Set the environment variable ",(0,r.kt)("inlineCode",{parentName:"p"},"TEST_ENVIRONMENT")," to ",(0,r.kt)("inlineCode",{parentName:"p"},"local")," to enable local blob transfer test and then run ",(0,r.kt)("inlineCode",{parentName:"p"},"MVD")," system\ntest using the following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'export TEST_ENVIRONMENT=local\n./gradlew :system-tests:test -DincludeTags="ComponentTest,EndToEndTest"\n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"Note for Windows PowerShell, the following commands should be used:")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-powershell"},'$Env:TEST_ENVIRONMENT = "local"\n./gradlew :system-tests:test\n')),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://azure.microsoft.com/features/storage-explorer/"},"Storage Explorer")," can be used to connect to the ",(0,r.kt)("inlineCode",{parentName:"p"},"Azurite"),"\nstorage container on ",(0,r.kt)("inlineCode",{parentName:"p"},"127.0.0.1:10000")," port and under the ",(0,r.kt)("inlineCode",{parentName:"p"},"consumereuassets")," account, the transferred blob can be\nviewed.")),(0,r.kt)("h3",{id:"local-test-resources"},"Local Test Resources"),(0,r.kt)("p",null,"The following test resources are provided in order to run ",(0,r.kt)("inlineCode",{parentName:"p"},"MVD")," locally. ",(0,r.kt)("inlineCode",{parentName:"p"},"system-tests/docker-compose.yml")," uses it to\nstart ",(0,r.kt)("inlineCode",{parentName:"p"},"MVD"),"."),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("br",null),(0,r.kt)("p",null,"Each ",(0,r.kt)("inlineCode",{parentName:"p"},"EDC Connector")," has its own set of Private and Public keys in PEM and Java KeyStore formats,\ne.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"system-tests/resources/vault/company1"),". These were generated using the following commands:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"# generate a private key\nopenssl ecparam -name prime256v1 -genkey -noout -out private-key.pem\n# generate corresponding public key\nopenssl ec -in private-key.pem -pubout -out public-key.pem\n# create a self-signed certificate\nopenssl req -new -x509 -key private-key.pem -out cert.pem -days 360\n")),(0,r.kt)("p",null,"Generated keys are imported to keystores e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"system-tests/resources/vault/company1/company1-keystore.jks"),". Each\nkeystore has password ",(0,r.kt)("inlineCode",{parentName:"p"},"test123"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("a",{parentName:"p",href:"https://keystore-explorer.org/"},"KeyStore Explorer")," can be used to manage keystores from UI.")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"MVD")," local instances use a file-system based vault and its keys are managed using a java properties file\ne.g.",(0,r.kt)("inlineCode",{parentName:"p"},"system-tests/resources/vault/company[1,2,3]/company[1,2,3]-vault.properties"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"! IMPORTANT !"),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"File system vault is ",(0,r.kt)("strong",{parentName:"em"},"NOT")," a secure vault and thus should only be used for testing purposes"))),(0,r.kt)("p",null,"Web DIDs are available under ",(0,r.kt)("inlineCode",{parentName:"p"},"system-tests/resources/webdid")," folder. The ",(0,r.kt)("inlineCode",{parentName:"p"},"publicKeyJwk")," section of each ",(0,r.kt)("inlineCode",{parentName:"p"},"did.json")," was\ngenerated by converting the corresponding public key to JWK format, for example company1 connector public key was\nconverted to JWK using following command:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"docker run -i danedmunds/pem-to-jwk:1.2.1 --public --pretty < system-tests/resources/vault/company1/public-key.pem > key.public.jwk\n")),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"test-execution-using-cloud-resources"},"Test Execution using cloud resources"),(0,r.kt)("p",null,"Like running tests against embedded services we can run tests against an MVD that uses actual cloud resources, such as\nAzure Keyvault or Azure Blobstore."),(0,r.kt)("p",null,"For that, we need to rebuild the project so that it does not use the filesystem-based vault:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"./gradlew shadowJar\n")),(0,r.kt)("h3",{id:"prepare-cloud-subscription"},"Prepare cloud subscription"),(0,r.kt)("p",null,"Next, we need to create cloud infrastructure that'll be used by our 3 connectors. Please navigate to ",(0,r.kt)("inlineCode",{parentName:"p"},"deployment/azure"),".\nFor that, we've created a script called ",(0,r.kt)("inlineCode",{parentName:"p"},"create_azure_dataspace.sh")," that will take care of creating cloud infra and\nsetting up our connector configuration files."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"! IMPORTANT !"),(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("em",{parentName:"p"},"Important: for the next steps you'll need certain environment variable set up, otherwise the script will fail!"))),(0,r.kt)("p",null,"Please refer to ",(0,r.kt)("a",{parentName:"p",href:"/edc-docs/docs/submodule/MinimumViableDataspace/docs/developer/continuous-deployment/continuous_deployment"},"this guide")," on how to set up your\nAzure subscription for CI/CD. The easiest way is to configure and run the Terraform package as described there. Once\nthat is done,\nsimply source the ",(0,r.kt)("inlineCode",{parentName:"p"},"env-vars")," file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cd <project-root>/resources/setup_azure_ad\nterraform init # <-- described in the guide\nterraform apply # <-- described in the guide\n\nsource env-vars\n")),(0,r.kt)("p",null,"that will export all relevant environment variables in the current shell and make them available for\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"create_azure_dataspace.sh")," script. To verify that, simply ",(0,r.kt)("inlineCode",{parentName:"p"},"echo $ARM_CLIENT_ID")," and that should print out a GUID."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Note: you will need admin rights in the Azure subscription for this!")),(0,r.kt)("h3",{id:"creating-cloud-resources"},"Creating cloud resources"),(0,r.kt)("p",null,"Once the subscription is prepared, i.e. all the correct permissions are set, app IDs are created, etc. we can execute\nthe script. Navigate back to ",(0,r.kt)("inlineCode",{parentName:"p"},"<project-root>/deployment/azure")," and run"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"./create_azure_dataspace.sh\n")),(0,r.kt)("p",null,"The script will perform these essential steps:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"generate asymmetric keypairs for every dataspace participant and the registration service"),(0,r.kt)("li",{parentName:"ul"},"create a Terraform backend configuration"),(0,r.kt)("li",{parentName:"ul"},"create a Terraform variable file (`*.tfvars)"),(0,r.kt)("li",{parentName:"ul"},"initialize and run Terraform (this creates the infra)"),(0,r.kt)("li",{parentName:"ul"},"generate ",(0,r.kt)("inlineCode",{parentName:"li"},"*.env")," files for every participant and the registration service")),(0,r.kt)("h3",{id:"running-the-dataspace--tests"},"Running the dataspace + tests"),(0,r.kt)("p",null,"Just like in the ",(0,r.kt)("a",{parentName:"p",href:"/edc-docs/docs/#test-execution-using-embedded-services"},"previous chapter")," we start up our dataspace\nusing ",(0,r.kt)("inlineCode",{parentName:"p"},"docker-compose"),". One small difference is that seeding is now done with a separate script instead of inside\nanother docker container. The reason for this is easier traceability and debuggability."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cd <project-root>/deployment/azure\ndocker-compose docker/docker-compose.yaml --build --wait\n./seed_dataspace.sh\n")),(0,r.kt)("p",null,"To run the tests, simply replicate the steps from the chapter about\nthe ",(0,r.kt)("a",{parentName:"p",href:"/edc-docs/docs/#test-execution-using-embedded-services"},"embedded services"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},'cd <project-root>\nexport TEST_ENVIRONMENT=local\n./gradlew :system-tests:test -DincludeTags="ComponentTest,EndToEndTest"\n')),(0,r.kt)("p",null,"The last command will push master data (policies, assets) and VerifiableCredentials to the participants, and then\nregister them one after the other with the registration service."),(0,r.kt)("h3",{id:"destroying-the-dataspace-again"},"Destroying the dataspace again"),(0,r.kt)("p",null,"This step assumes there is still the ",(0,r.kt)("inlineCode",{parentName:"p"},"terraform.tfvars")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"backend.conf")," file present from the setup step. If that is\nnot the case simply re-run the ",(0,r.kt)("inlineCode",{parentName:"p"},"setup_azure_dataspace.sh")," script again. If all the cloud resources are still there, it\nwon't create new ones.\nTo stop the docker containers and destroy all cloud resources, simply execute:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"cd <project-root>/deployment/azure\n./shutdown_azure_dataspace.sh\n")),(0,r.kt)("br",null),(0,r.kt)("hr",null),(0,r.kt)("br",null),(0,r.kt)("h2",{id:"debugging-mvd-locally"},"Debugging MVD locally"),(0,r.kt)("p",null,"Follow the instructions in the previous sections to run an MVD with a consumer (",(0,r.kt)("inlineCode",{parentName:"p"},"company2"),") and provider (",(0,r.kt)("inlineCode",{parentName:"p"},"company1"),")\nlocally using docker-compose."),(0,r.kt)("p",null,"Once running, you can use a Java debugger to connect to the consumer (",(0,r.kt)("inlineCode",{parentName:"p"},"company2"),", port 5006) and provider (",(0,r.kt)("inlineCode",{parentName:"p"},"company1"),',\nport 5005) instances. If you are using IntelliJ you can use the provided "EDC company1", "EDC company2" or "EDC\ncompany3" ',(0,r.kt)("a",{parentName:"p",href:"../.run"},"runtime configurations")," to remote debug the connector instances."),(0,r.kt)("p",null,"Alternately, when running MVD with ",(0,r.kt)("a",{parentName:"p",href:"/edc-docs/docs/#test-execution-using-cloud-resources"},"cloud resources"),", you could use\nthe generated ",(0,r.kt)("inlineCode",{parentName:"p"},"*.env")," files located in ",(0,r.kt)("inlineCode",{parentName:"p"},"deployment/azure/docker/")," as launch\nconfiguration ",(0,r.kt)("a",{parentName:"p",href:"https://plugins.jetbrains.com/plugin/7861-envfile"},"EnvFiles")," in Intellij run one or multiple participants\ndirectly from your IDE."),(0,r.kt)("h2",{id:"issuing-requests-manually-with-postman"},"Issuing requests manually with Postman"),(0,r.kt)("p",null,"A ",(0,r.kt)("a",{target:"_blank",href:n(20635).Z},"postman collection")," can be used to issue requests to an MVD instance\nof your choice. You will need to adapt the environment variables accordingly to match your target MVD instance."))}u.isMDXComponent=!0},20635:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/MVD.postman_collection-6cd7884fe8484d40f5e2dbfa76826dda.json"}}]);