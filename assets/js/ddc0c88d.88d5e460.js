"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[1047],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=l(n),d=r,h=u["".concat(c,".").concat(d)]||u[d]||m[d]||i;return n?a.createElement(h,o(o({ref:t},p),{},{components:n})):a.createElement(h,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<i;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},51766:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>s,toc:()=>l});var a=n(87462),r=(n(67294),n(3905));const i={},o="State machine",s={unversionedId:"submodule/Connector/docs/developer/state-machine",id:"submodule/Connector/docs/developer/state-machine",title:"State machine",description:"EDC provides a lightweight framework to facilitate the development of persistent state machines.",source:"@site/docs/submodule/Connector/docs/developer/state-machine.md",sourceDirName:"submodule/Connector/docs/developer",slug:"/submodule/Connector/docs/developer/state-machine",permalink:"/edc-docs/docs/submodule/Connector/docs/developer/state-machine",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/docs/developer/state-machine.md",tags:[],version:"current",frontMatter:{}},c={},l=[{value:"Collaborators",id:"collaborators",level:2},{value:"State-machine specific Manager",id:"state-machine-specific-manager",level:2},{value:"State-machine store",id:"state-machine-store",level:2}],p={toc:l};function m(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"state-machine"},"State machine"),(0,r.kt)("p",null,"EDC provides a lightweight framework to facilitate the development of persistent state machines."),(0,r.kt)("p",null,"The framework currently manages a single execution thread."),(0,r.kt)("h2",{id:"collaborators"},"Collaborators"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"The class which defines state machine instances. The ",(0,r.kt)("inlineCode",{parentName:"li"},"StatefulEntity")," base class can be used to derive state machine entity classes. For example, a ",(0,r.kt)("inlineCode",{parentName:"li"},"ContractNegotiation")," is a ",(0,r.kt)("inlineCode",{parentName:"li"},"StatefulEntity")," for an EDC contract negotiation."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"StateMachineManager")," which manages an execution thread that periodically gives a chance to state machines to progress their state."),(0,r.kt)("li",{parentName:"ul"},"The state-machine specific Manager which instantiates the ",(0,r.kt)("inlineCode",{parentName:"li"},"StateMachineManager")," and defines processors for each state for a given state machine class. For example, ",(0,r.kt)("inlineCode",{parentName:"li"},"ConsumerContractNegotiationManagerImpl")," manages ",(0,r.kt)("inlineCode",{parentName:"li"},"ContractNegotiation"),"s in which the connector is a consumer."),(0,r.kt)("li",{parentName:"ul"},"The ",(0,r.kt)("inlineCode",{parentName:"li"},"ServiceExtension")," which manages the Manager's lifecycle."),(0,r.kt)("li",{parentName:"ul"},"The Store which manages ",(0,r.kt)("inlineCode",{parentName:"li"},"StatefulEntity")," persistence. ",(0,r.kt)("inlineCode",{parentName:"li"},"InMemoryStatefulEntityStore")," provides a utility class to back in-memory implementations for testing.")),(0,r.kt)("h2",{id:"state-machine-specific-manager"},"State-machine specific Manager"),(0,r.kt)("p",null,"The Manager manages the ",(0,r.kt)("inlineCode",{parentName:"p"},"StateMachineManager"),"'s lifecycle and defines the state machine's behavior, while the ",(0,r.kt)("inlineCode",{parentName:"p"},"StatefulEntity")," is only concerned with the state machine's data."),(0,r.kt)("p",null,"Here's a prototypical Manager implementation:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'public void start() { // Called from ServiceExtension start() method\n  stateMachineManager = StateMachineManager.Builder.newInstance("state-machine-name", ...)\n    // Processors for non-terminal states\n    .processor(processEntitiesInState(STATE1, this::processState1))\n    .processor(processEntitiesInState(STATE2, this::processState2))\n    .processor(processEntitiesInState(STATE3, this::processState3))\n    .processor(onCommands(this::processCommand))\n    .build();\n  stateMachineManager.start();\n}\n\npublic void stop() { // Called from ServiceExtension shutdown() method\n  stateMachineManager.stop();\n}\n\nprivate StateProcessorImpl<StatefulEntityImpl> processEntitiesInState(State state, Function<StatefulEntityImpl, Boolean> function) {\n  return new StateProcessorImpl<>(() -> store.nextForState(state, batchSize), function);\n}\n\n// Processor functions should return true only if the state machine has been updated\nprivate boolean processState1(StatefulEntityImpl sm) {\n    if (conditionsForTransitionFromState1ToState2Apply(sm)) {\n      sm.transitionState2();\n      store.save(sm);\n      return true;\n    }\n   return false;\n}\n...\n')),(0,r.kt)("h2",{id:"state-machine-store"},"State-machine store"),(0,r.kt)("p",null,"The Store which manages ",(0,r.kt)("inlineCode",{parentName:"p"},"StatefulEntity")," persistence must persist entities in a storage system. In-memory implementations are provided for testing."),(0,r.kt)("p",null,"Stores using persistent implementations must manage leases to support EDC clustered deployment. This ensures an entity is processed by only one EDC instance at a time (assuming processing is quicker than lease expiration)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},"public void save(StatefulEntityImpl instance) {\n  // persist instance\n  // release lease\n}\n\npublic Collection<StatefulEntityImpl> nextForState(State state, int limit) {\n  // retrieve and lease at most limit instances in state\n}\n")))}m.isMDXComponent=!0}}]);