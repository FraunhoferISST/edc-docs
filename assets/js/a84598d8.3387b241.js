"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[5018],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>m});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||i;return t?a.createElement(h,r(r({ref:n},p),{},{components:t})):a.createElement(h,r({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:o,r[1]=l;for(var c=2;c<i;c++)r[c]=t[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},7960:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var a=t(87462),o=(t(67294),t(3905));const i={},r="Use the filesystem-based configuration",l={unversionedId:"submodule/Connector/samples/configuration/README",id:"submodule/Connector/samples/configuration/README",title:"Use the filesystem-based configuration",description:"So far we have not had any way to configure our system other than directly modifying code, which generally is not an",source:"@site/docs/submodule/Connector/samples/03-configuration/README.md",sourceDirName:"submodule/Connector/samples/03-configuration",slug:"/submodule/Connector/samples/configuration/",permalink:"/edc-docs/docs/submodule/Connector/samples/configuration/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/samples/03-configuration/README.md",tags:[],version:"current",frontMatter:{}},s={},c=[{value:"Set up the configuration extension",id:"set-up-the-configuration-extension",level:2},{value:"Add your own configuration value",id:"add-your-own-configuration-value",level:2},{value:"1. Add the config value",id:"1-add-the-config-value",level:3},{value:"2. Access the config value",id:"2-access-the-config-value",level:3},{value:"Management API",id:"management-api",level:2}],p={toc:c};function u(e){let{components:n,...i}=e;return(0,o.kt)("wrapper",(0,a.Z)({},p,i,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"use-the-filesystem-based-configuration"},"Use the filesystem-based configuration"),(0,o.kt)("p",null,"So far we have not had any way to configure our system other than directly modifying code, which generally is not an\nelegant way."),(0,o.kt)("p",null,"The Eclipse Dataspace Connector exposes configuration through its ",(0,o.kt)("inlineCode",{parentName:"p"},"ConfigurationExtension"),' interface. That is a "\nspecial" extension in that sense that it gets loaded at a very early stage. There is also a default implementation\nnamed ',(0,o.kt)("a",{target:"_blank",href:t(46571).Z},(0,o.kt)("code",null,"FsConfigurationExtension.java")),"\nwhich uses a standard Java properties file to store configuration entries."),(0,o.kt)("p",null,"In the previous steps we had not included that in the JAR file, so we need to add\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},":extensions:common:configuration:configuration-filesystem")," module to the dependency list:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    // ...\n    implementation(project(":extensions:common:configuration:configuration-filesystem"))\n    // ...\n}\n')),(0,o.kt)("p",null,"We compile and run the application with:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"./gradlew clean samples:03-configuration:build\njava -jar samples/03-configuration/build/libs/filsystem-config-connector.jar\n")),(0,o.kt)("p",null,'you will notice an additional log line stating that the "configuration file does not exist":'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"INFO 2021-09-07T08:26:08.282159 Configuration file does not exist: dataspaceconnector-configuration.properties. Ignoring.\n")),(0,o.kt)("h2",{id:"set-up-the-configuration-extension"},"Set up the configuration extension"),(0,o.kt)("p",null,"By default, the ",(0,o.kt)("inlineCode",{parentName:"p"},"FsConfigurationExtension")," expects there to be a properties file\nnamed ",(0,o.kt)("inlineCode",{parentName:"p"},"dataspaceconnector-configuration.properties")," located in the current directory. The name (and path) of the config\nfile is configurable using the ",(0,o.kt)("inlineCode",{parentName:"p"},"edc.fs.config")," property, so we can customize this to our liking."),(0,o.kt)("p",null,"First, create a properties file in a location of your convenience,\ne.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"/etc/eclipse/dataspaceconnector/config.properties"),"."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"mkdir -p /etc/eclipse/dataspaceconnector\ntouch /etc/eclipse/dataspaceconnector/config.properties\n")),(0,o.kt)("p",null,"Second, lets reconfigure the Jetty Web Server to listen to port ",(0,o.kt)("inlineCode",{parentName:"p"},"9191")," instead of the default ",(0,o.kt)("inlineCode",{parentName:"p"},"8181"),". Open\nthe ",(0,o.kt)("inlineCode",{parentName:"p"},"config.properties")," with a text editor of your choice and add the following line:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-properties"},"web.http.port=9191\n")),(0,o.kt)("p",null,"An example file can be found ",(0,o.kt)("a",{target:"_blank",href:t(89593).Z},"here"),". Clean, rebuild and run the connector again, but this time\npassing the path to the config file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"java -Dedc.fs.config=/etc/eclipse/dataspaceconnector/config.properties -jar samples/03-configuration/build/libs/filsystem-config-connector.jar\n")),(0,o.kt)("p",null,"Observing the log output we now see that the connector's REST API is exposed on port ",(0,o.kt)("inlineCode",{parentName:"p"},"9191")," instead:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"INFO 2022-04-27T14:09:10.547662345 HTTP context 'default' listening on port 9191      <-- this is the relevant line\nDEBUG 2022-04-27T14:09:10.589738491 Port mappings: {alias='default', port=9191, path='/api'}   \nINFO 2022-04-27T14:09:10.589846121 Started Jetty Service\n\n")),(0,o.kt)("h2",{id:"add-your-own-configuration-value"},"Add your own configuration value"),(0,o.kt)("p",null,"Let's say we want to have a configurable log prefix in our health REST endpoint. The way to do this involves two steps:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"add the config value to the ",(0,o.kt)("inlineCode",{parentName:"li"},"config.properties")," file"),(0,o.kt)("li",{parentName:"ol"},"access and read the config value from code")),(0,o.kt)("h3",{id:"1-add-the-config-value"},"1. Add the config value"),(0,o.kt)("p",null,"Simply add a new line with an arbitrary key to your ",(0,o.kt)("inlineCode",{parentName:"p"},"config.properties"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-properties"},"edc.samples.03.logprefix=MyLogPrefix\n")),(0,o.kt)("h3",{id:"2-access-the-config-value"},"2. Access the config value"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"ServiceExtensionContext")," exposes a method ",(0,o.kt)("inlineCode",{parentName:"p"},"getSettings(String, String)")," to read settings (i.e. config values)'.\nModify the code from the ",(0,o.kt)("inlineCode",{parentName:"p"},"HealthEndpointExtension.java")," as shown below (use the one from the ",(0,o.kt)("inlineCode",{parentName:"p"},"samples/03-configuration"),"\nof course):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'public class HealthEndpointExtension implements ServiceExtension {\n\n    @Inject\n    WebService webService;\n\n    private static final String LOG_PREFIX_SETTING = "edc.samples.03.logprefix"; // this constant is new\n\n    @Override\n    public void initialize(ServiceExtensionContext context) {\n        var logPrefix = context.getSetting(LOG_PREFIX_SETTING, "health"); //this line is new\n        webService.registerResource(new HealthApiController(context.getMonitor(), logPrefix));\n    }\n}\n')),(0,o.kt)("p",null,"Next, we must modify the constructor signature of the ",(0,o.kt)("inlineCode",{parentName:"p"},"HealthApiController")," class and store the ",(0,o.kt)("inlineCode",{parentName:"p"},"logPrefix")," as variable:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'\n@Consumes({ MediaType.APPLICATION_JSON })\n@Produces({ MediaType.APPLICATION_JSON })\n@Path("/")\npublic class HealthApiController {\n\n    private final Monitor monitor;\n    private final String logPrefix;\n\n    public HealthApiController(Monitor monitor, String logPrefix) {\n        this.monitor = monitor;\n        this.logPrefix = logPrefix;\n    }\n\n    @GET\n    @Path("health")\n    public String checkHealth() {\n        monitor.info(String.format("%s :: Received a health request", logPrefix));\n        return "{\\"response\\":\\"I\'m alive!\\"}";\n    }\n}\n')),(0,o.kt)("p",null,"There are a few things worth mentioning here:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"things like configuration value names should be implemented as constants, e.g. ",(0,o.kt)("inlineCode",{parentName:"li"},"LOG_PREFIX_SETTING")," and should have a\nconsistent and hierarchical naming scheme"),(0,o.kt)("li",{parentName:"ul"},"if a config value is not present, we should either specify a default value (i.e. ",(0,o.kt)("inlineCode",{parentName:"li"},'"health"'),") or throw\nan ",(0,o.kt)("inlineCode",{parentName:"li"},"EdcException")),(0,o.kt)("li",{parentName:"ul"},"configuration values should be handled in the ",(0,o.kt)("inlineCode",{parentName:"li"},"*Extension")," class, as it's job is to set up the extension and its\nrequired business logic (e.g. the controller). The extension itself should not contain any business logic"),(0,o.kt)("li",{parentName:"ul"},"it's better to pass the config value directly into the business logic than passing the\nentire ",(0,o.kt)("inlineCode",{parentName:"li"},"ServiceExtensionContext"),", using configuration objects when there are more than one")),(0,o.kt)("h2",{id:"management-api"},"Management API"),(0,o.kt)("p",null,"Part of most connectors will be the management api defined in the\n",(0,o.kt)("a",{parentName:"p",href:"../../extensions/control-plane/api/management-api/"},(0,o.kt)("inlineCode",{parentName:"a"},":extensions:control-plane:api:management-api"))," module. Therefore, we need to add the following\nmodule to the dependency list in our ",(0,o.kt)("inlineCode",{parentName:"p"},"build.gradle.kts"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-kotlin"},'dependencies {\n    // ...\n    implementation(project(":extensions:control-plane:api:management-api"))\n    // ...\n}\n')),(0,o.kt)("p",null,"As described in the ",(0,o.kt)("a",{parentName:"p",href:"../../extensions/control-plane/api/management-api/management-api-configuration/README.md"},"README.md")," of\nthe ",(0,o.kt)("a",{parentName:"p",href:"../../extensions/control-plane/api/management-api/management-api-configuration"},"api-configuration module"),", the management api should be\nexposed on a separate jetty context. Therefore, it is necessary to provide the following configuration to the connector:"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Note: The ports could be chosen arbitrarily. In this example, they are aligned to the already existing ",(0,o.kt)("inlineCode",{parentName:"p"},"web.http.port")," setting described above.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-properties"},"web.http.port=9191\nweb.http.path=/api\nweb.http.management.port=9192\nweb.http.management.path=/api/v1/management\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},(0,o.kt)("strong",{parentName:"em"},"Caution"),": If you do not provide this configuration, it leads to the problem that the authentication mechanism is\nalso applied to EVERY request in the _default")," context of Jetty, which includes the IDS communication between two\nconnectors._"),(0,o.kt)("hr",null),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/edc-docs/docs/submodule/Connector/samples/health-endpoint/"},"Previous Chapter")," | ",(0,o.kt)("a",{parentName:"p",href:"/edc-docs/docs/submodule/Connector/samples/04.0-file-transfer/"},"Next Chapter")))}u.isMDXComponent=!0},46571:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/files/FsConfigurationExtension-86ebc38b575698e38cad1911142b6be5.java"},89593:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/files/config-5b12bcd2c8bfc34d4d3a4b2c16c92663.properties"}}]);