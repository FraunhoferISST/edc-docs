"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[1710],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=i(n),u=o,f=m["".concat(c,".").concat(u)]||m[u]||d[u]||a;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function u(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var i=2;i<a;i++)s[i]=n[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},8242:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>l,toc:()=>i});var r=n(7462),o=(n(7294),n(3905));const a={},s="SQL-based `TransferProcessStore` - technical proposal",l={unversionedId:"submodule/Connector/extensions/control-plane/store/sql/transfer-process-store-sql/README",id:"submodule/Connector/extensions/control-plane/store/sql/transfer-process-store-sql/README",title:"SQL-based `TransferProcessStore` - technical proposal",description:"_Note that the SQL statements (DDL) are specific to and only tested with PostgreSQL. Using it with other RDBMS may",source:"@site/docs/submodule/Connector/extensions/control-plane/store/sql/transfer-process-store-sql/README.md",sourceDirName:"submodule/Connector/extensions/control-plane/store/sql/transfer-process-store-sql",slug:"/submodule/Connector/extensions/control-plane/store/sql/transfer-process-store-sql/",permalink:"/edc-docs/docs/submodule/Connector/extensions/control-plane/store/sql/transfer-process-store-sql/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/extensions/control-plane/store/sql/transfer-process-store-sql/README.md",tags:[],version:"current",frontMatter:{}},c={},i=[{value:"Table schema DDL",id:"table-schema-ddl",level:2},{value:"Translating the <code>TransferProcessStore</code> interface into SQL statements",id:"translating-the-transferprocessstore-interface-into-sql-statements",level:2},{value:"Create a flexible query API to accommodate <code>QuerySpec</code>",id:"create-a-flexible-query-api-to-accommodate-queryspec",level:2}],p={toc:i};function d(e){let{components:t,...a}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"sql-based-transferprocessstore---technical-proposal"},"SQL-based ",(0,o.kt)("inlineCode",{parentName:"h1"},"TransferProcessStore")," - technical proposal"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("em",{parentName:"strong"},"Note that the SQL statements (DDL) are specific to and only tested with PostgreSQL. Using it with other RDBMS may\nwork but might have unexpected side effects!"))),(0,o.kt)("h2",{id:"table-schema-ddl"},"Table schema DDL"),(0,o.kt)("p",null,"please refer to ",(0,o.kt)("a",{target:"_blank",href:n(1408).Z},"schema.sql"),":"),(0,o.kt)("h2",{id:"translating-the-transferprocessstore-interface-into-sql-statements"},"Translating the ",(0,o.kt)("inlineCode",{parentName:"h2"},"TransferProcessStore")," interface into SQL statements"),(0,o.kt)("p",null,"All SQL contants such as table names, column names, statement templates etc. are stored in an interface\ncalled ",(0,o.kt)("inlineCode",{parentName:"p"},"TransferProcessStoreStatements"),". Column names are declared directly in that interface, as they likely won't\nchange between different DB technologies, but all statements are then implemented in the ",(0,o.kt)("inlineCode",{parentName:"p"},"PostgreStatements")," class."),(0,o.kt)("h2",{id:"create-a-flexible-query-api-to-accommodate-queryspec"},"Create a flexible query API to accommodate ",(0,o.kt)("inlineCode",{parentName:"h2"},"QuerySpec")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"For the first version, only the ",(0,o.kt)("inlineCode",{parentName:"em"},"limit")," and ",(0,o.kt)("inlineCode",{parentName:"em"},"offset")," arguments from the ",(0,o.kt)("inlineCode",{parentName:"em"},"QuerySpec")," will be used.")),(0,o.kt)("p",null,"For subsequent versions it is recommended to re-use the ",(0,o.kt)("inlineCode",{parentName:"p"},"Clause")," interface and its implementors, that were originally\nimplemented for CosmosDB, and create an equivalent set of clauses for SQL. Thus, there would be a ",(0,o.kt)("inlineCode",{parentName:"p"},"Limit-"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"Offset-"),"\n, ",(0,o.kt)("inlineCode",{parentName:"p"},"Order-")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"WhereClause")," for SQL."),(0,o.kt)("p",null,"That way, dialect-dependent variants can be implemented should the need arise, because the actual SQL statement is\nencoded in those clauses, offering a fluent Java API."))}d.isMDXComponent=!0},1408:(e,t,n)=>{n.d(t,{Z:()=>r});const r=n.p+"assets/files/schema-63f87119bafc45c23fdf8d1ab1ad423a.sql"}}]);