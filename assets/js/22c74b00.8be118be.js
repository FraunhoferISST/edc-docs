"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[6663],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var s=r.createContext({}),l=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=l(e.components);return r.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,c=e.originalType,s=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=l(n),m=o,h=u["".concat(s,".").concat(m)]||u[m]||p[m]||c;return n?r.createElement(h,a(a({ref:t},d),{},{components:n})):r.createElement(h,a({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var c=n.length,a=new Array(c);a[0]=u;var i={};for(var s in t)hasOwnProperty.call(t,s)&&(i[s]=t[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var l=2;l<c;l++)a[l]=n[l];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9083:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>c,metadata:()=>i,toc:()=>l});var r=n(7462),o=(n(7294),n(3905));const c={},a="Shared clock",i={unversionedId:"submodule/Connector/docs/developer/decision-records/2022-06-09-shared-clock/README",id:"submodule/Connector/docs/developer/decision-records/2022-06-09-shared-clock/README",title:"Shared clock",description:"Decision",source:"@site/docs/submodule/Connector/docs/developer/decision-records/2022-06-09-shared-clock/README.md",sourceDirName:"submodule/Connector/docs/developer/decision-records/2022-06-09-shared-clock",slug:"/submodule/Connector/docs/developer/decision-records/2022-06-09-shared-clock/",permalink:"/edc-docs/docs/submodule/Connector/docs/developer/decision-records/2022-06-09-shared-clock/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/docs/developer/decision-records/2022-06-09-shared-clock/README.md",tags:[],version:"current",frontMatter:{}},s={},l=[{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Approach",id:"approach",level:2}],d={toc:l};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"shared-clock"},"Shared clock"),(0,o.kt)("h2",{id:"decision"},"Decision"),(0,o.kt)("p",null,"A mockable shared ",(0,o.kt)("inlineCode",{parentName:"p"},"Clock")," is used across EDC modules  to get the time."),(0,o.kt)("p",null,"Other mechanisms for accessing the time, such as calls to ",(0,o.kt)("inlineCode",{parentName:"p"},"Instant.now()"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"new Date()"),", or ",(0,o.kt)("inlineCode",{parentName:"p"},"System.currentTimeMillis()")," shall not be used in production code. They may be used in test code."),(0,o.kt)("h2",{id:"rationale"},"Rationale"),(0,o.kt)("p",null,"This allows writing consistent test code with assertions about time behavior."),(0,o.kt)("h2",{id:"approach"},"Approach"),(0,o.kt)("p",null,"The shared clock can be injected in service extensions:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"@Inject\nprivate Clock clock;\n")),(0,o.kt)("p",null,"or with a convenience method:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"@Override\npublic void initialize(ServiceExtensionContext context) {\n  var clock = context.getClock();\n  ...\n}\n")),(0,o.kt)("p",null,"By default, this provides the system clock. In integration tests, another ",(0,o.kt)("inlineCode",{parentName:"p"},"Clock")," implementation can be registered through mocking:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},"@ExtendWith(EdcExtension.class)\nclass AnIntegrationTest {\n  @BeforeEach\n  void setUp(EdcExtension extension) {\n    extension.registerServiceMock(Clock.class, Clock.fixed(now, UTC));\n  }\n}\n")))}p.isMDXComponent=!0}}]);