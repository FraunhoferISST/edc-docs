"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[2985],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>u});var o=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=o.createContext({}),c=function(e){var t=o.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return o.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},m=o.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),m=c(n),u=r,f=m["".concat(l,".").concat(u)]||m[u]||d[u]||a;return n?o.createElement(f,s(s({ref:t},p),{},{components:n})):o.createElement(f,s({ref:t},p))}));function u(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,s=new Array(a);s[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var c=2;c<a;c++)s[c]=n[c];return o.createElement.apply(null,s)}return o.createElement.apply(null,n)}m.displayName="MDXCreateElement"},7738:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>d,frontMatter:()=>a,metadata:()=>i,toc:()=>c});var o=n(7462),r=(n(7294),n(3905));const a={},s="SQL-based `ContractNegotiationStore` - technical proposal",i={unversionedId:"submodule/Connector/extensions/control-plane/store/sql/contract-negotiation-store-sql/README",id:"submodule/Connector/extensions/control-plane/store/sql/contract-negotiation-store-sql/README",title:"SQL-based `ContractNegotiationStore` - technical proposal",description:"_Note that the SQL statements (DDL) are specific to and only tested with PostgreSQL. Using it with other RDBMS may",source:"@site/docs/submodule/Connector/extensions/control-plane/store/sql/contract-negotiation-store-sql/README.md",sourceDirName:"submodule/Connector/extensions/control-plane/store/sql/contract-negotiation-store-sql",slug:"/submodule/Connector/extensions/control-plane/store/sql/contract-negotiation-store-sql/",permalink:"/edc-docs/docs/submodule/Connector/extensions/control-plane/store/sql/contract-negotiation-store-sql/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/extensions/control-plane/store/sql/contract-negotiation-store-sql/README.md",tags:[],version:"current",frontMatter:{}},l={},c=[{value:"1. Table schema",id:"1-table-schema",level:2},{value:"2. Translating the <code>ContractNegotiationStore</code> into SQL statements",id:"2-translating-the-contractnegotiationstore-into-sql-statements",level:2},{value:"Create a flexible query API to accommodate <code>QuerySpec</code>",id:"create-a-flexible-query-api-to-accommodate-queryspec",level:2}],p={toc:c};function d(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,o.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"sql-based-contractnegotiationstore---technical-proposal"},"SQL-based ",(0,r.kt)("inlineCode",{parentName:"h1"},"ContractNegotiationStore")," - technical proposal"),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("em",{parentName:"strong"},"Note that the SQL statements (DDL) are specific to and only tested with PostgreSQL. Using it with other RDBMS may\nwork but might have unexpected side effects!"))),(0,r.kt)("h2",{id:"1-table-schema"},"1. Table schema"),(0,r.kt)("p",null,"see ",(0,r.kt)("a",{target:"_blank",href:n(8175).Z},"schema.sql"),"."),(0,r.kt)("p",null,"As an alternative to storing ",(0,r.kt)("inlineCode",{parentName:"p"},"ContractAgreement"),"s in a dedicated table, it could also be serialized and stored as column\nin the ",(0,r.kt)("inlineCode",{parentName:"p"},"contract_negotiation")," table. However, we will need to be able to list all contract agreements at some point, so\nit seemed more future-proof to have it separate."),(0,r.kt)("h2",{id:"2-translating-the-contractnegotiationstore-into-sql-statements"},"2. Translating the ",(0,r.kt)("inlineCode",{parentName:"h2"},"ContractNegotiationStore")," into SQL statements"),(0,r.kt)("p",null,"All SQL contants such as table names, column names, statement templates etc. are stored in an interface\ncalled ",(0,r.kt)("inlineCode",{parentName:"p"},"ContractNegotiationStatements"),". Column names are declared directly in that interface, as they likely won't\nchange between different DB technologies, but all statements are then implemented in the ",(0,r.kt)("inlineCode",{parentName:"p"},"PostgreStatements")," class."),(0,r.kt)("h2",{id:"create-a-flexible-query-api-to-accommodate-queryspec"},"Create a flexible query API to accommodate ",(0,r.kt)("inlineCode",{parentName:"h2"},"QuerySpec")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},"For the first version, only the ",(0,r.kt)("inlineCode",{parentName:"em"},"limit")," and ",(0,r.kt)("inlineCode",{parentName:"em"},"offset")," arguments from the ",(0,r.kt)("inlineCode",{parentName:"em"},"QuerySpec")," will be used.")),(0,r.kt)("p",null,"For subsequent versions it is recommended to re-use the ",(0,r.kt)("inlineCode",{parentName:"p"},"Clause")," interface and its implementors, that were originally\nimplemented for CosmosDB, and create an equivalent set of clauses for SQL. Thus, there would be a ",(0,r.kt)("inlineCode",{parentName:"p"},"Limit-"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"Offset-"),"\n, ",(0,r.kt)("inlineCode",{parentName:"p"},"Order-")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"WhereClause")," for SQL."),(0,r.kt)("p",null,"That way, dialect-dependent variants can be implemented should the need arise, because the actual SQL statement is\nencoded in those clauses, offering a fluent Java API."))}d.isMDXComponent=!0},8175:(e,t,n)=>{n.d(t,{Z:()=>o});const o=n.p+"assets/files/schema-8ce01f1b4fec5a26639fc5bcf232fb42.sql"}}]);