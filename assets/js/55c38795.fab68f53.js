"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[3833],{3905:(e,t,n)=>{n.d(t,{Zo:()=>l,kt:()=>h});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),p=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},l=function(e){var t=p(e.components);return r.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),u=p(n),h=o,m=u["".concat(c,".").concat(h)]||u[h]||d[h]||i;return n?r.createElement(m,a(a({ref:t},l),{},{components:n})):r.createElement(m,a({ref:t},l))}));function h(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var p=2;p<i;p++)a[p]=n[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},65502:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>p});var r=n(87462),o=(n(67294),n(3905));const i={},a='TransferProcess new "Provisioning Requested" state',s={unversionedId:"submodule/Connector/docs/developer/decision-records/2022-07-28-transfer-process-new-state/README",id:"submodule/Connector/docs/developer/decision-records/2022-07-28-transfer-process-new-state/README",title:'TransferProcess new "Provisioning Requested" state',description:"Decision",source:"@site/docs/submodule/Connector/docs/developer/decision-records/2022-07-28-transfer-process-new-state/README.md",sourceDirName:"submodule/Connector/docs/developer/decision-records/2022-07-28-transfer-process-new-state",slug:"/submodule/Connector/docs/developer/decision-records/2022-07-28-transfer-process-new-state/",permalink:"/edc-docs/docs/submodule/Connector/docs/developer/decision-records/2022-07-28-transfer-process-new-state/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/docs/developer/decision-records/2022-07-28-transfer-process-new-state/README.md",tags:[],version:"current",frontMatter:{}},c={},p=[{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Approach",id:"approach",level:2}],l={toc:p};function d(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"transferprocess-new-provisioning-requested-state"},'TransferProcess new "Provisioning Requested" state'),(0,o.kt)("h2",{id:"decision"},"Decision"),(0,o.kt)("p",null,'Since the provisioning phase became "async" with the introduction of the ',(0,o.kt)("inlineCode",{parentName:"p"},"http-provisioner")," extension,\nthere's the need to introduce a new state that describes a transfer process for which the provisioning has been requested\nbut it hasn't been completed yet."),(0,o.kt)("h2",{id:"rationale"},"Rationale"),(0,o.kt)("p",null,"The classic provision method (see ",(0,o.kt)("inlineCode",{parentName:"p"},"S3BucketProvisioner")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"ObjectStorageProvisioner"),"), despite providing ",(0,o.kt)("inlineCode",{parentName:"p"},"async")," interface,\nworks in a synchronous way: when the ",(0,o.kt)("inlineCode",{parentName:"p"},"CompletableFuture")," returned by the provisioner completes, this means that the actual\nprovisioning process completed and the ",(0,o.kt)("inlineCode",{parentName:"p"},"StateMachineManager")," can fetch that ",(0,o.kt)("inlineCode",{parentName:"p"},"TransferProcess")," and continue its processing.\nThe ",(0,o.kt)("inlineCode",{parentName:"p"},"http-provisioner")," works in a different way: when the ",(0,o.kt)("inlineCode",{parentName:"p"},"CompletableFuture")," completes, this means that the provisioning\nhas been requested, but it will be completed in the future. At that point the ",(0,o.kt)("inlineCode",{parentName:"p"},"TransferProcess")," should stay in a state\nthat would make the ",(0,o.kt)("inlineCode",{parentName:"p"},"StateMachineManager")," ignore it, as it would be up to the external provisioner to complete the provisioning\ncalling back the connector."),(0,o.kt)("p",null,"The same rationale goes for the ",(0,o.kt)("inlineCode",{parentName:"p"},"deprovisioning")," phase."),(0,o.kt)("h2",{id:"approach"},"Approach"),(0,o.kt)("p",null,'As we already did for the execution of "asynchronous operations" like contract negotiation, the solution would be to add\na new state that is not processed by the ',(0,o.kt)("inlineCode",{parentName:"p"},"StateMachineManager"),", in this case the state sequence would go:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"PROVISIONING(200)")," (request sent to provisioner) -> ",(0,o.kt)("inlineCode",{parentName:"li"},"PROVISIONING_REQUESTED(250)")," (while the provisioner is working) -> ",(0,o.kt)("inlineCode",{parentName:"li"},"PROVISIONED(300)")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"DEPROVISIONING(900)")," (request sent to deprovisioner) -> ",(0,o.kt)("inlineCode",{parentName:"li"},"DEPROVISIONING_REQUESTED(950)")," (while the deprovisioner is working) -> ",(0,o.kt)("inlineCode",{parentName:"li"},"DEPROVISIONED(1000)"))),(0,o.kt)("p",null,"When the ",(0,o.kt)("inlineCode",{parentName:"p"},"provisionManager.provision")," result completes and in the resource manifest there's at least one ",(0,o.kt)("inlineCode",{parentName:"p"},"ProvisionResponse"),"\nthat's ",(0,o.kt)("inlineCode",{parentName:"p"},"inProcess")," then the ",(0,o.kt)("inlineCode",{parentName:"p"},"TransferProcess")," will be put in that ",(0,o.kt)("inlineCode",{parentName:"p"},"*_REQUESTED")," state."),(0,o.kt)("p",null,"The same approach goes for the ",(0,o.kt)("inlineCode",{parentName:"p"},"deprovisioning phase")))}d.isMDXComponent=!0}}]);