"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[669],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>d});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var a=n.createContext({}),l=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},m=function(e){var t=l(e.components);return n.createElement(a.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),p=l(r),d=o,f=p["".concat(a,".").concat(d)]||p[d]||u[d]||i;return r?n.createElement(f,s(s({ref:t},m),{},{components:r})):n.createElement(f,s({ref:t},m))}));function d(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,s=new Array(i);s[0]=p;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c.mdxType="string"==typeof e?e:o,s[1]=c;for(var l=2;l<i;l++)s[l]=r[l];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},7079:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>a,contentTitle:()=>s,default:()=>u,frontMatter:()=>i,metadata:()=>c,toc:()=>l});var n=r(7462),o=(r(7294),r(3905));const i={},s="EDC extensions for instrumentation with Micrometer",c={unversionedId:"submodule/Connector/docs/developer/metrics",id:"submodule/Connector/docs/developer/metrics",title:"EDC extensions for instrumentation with Micrometer",description:"EDC provides extensions for instrumentation with the Micrometer metrics library to automatically collect metrics from the host system, JVM, and frameworks and libraries used in EDC (including OkHttp, Jetty, Jersey and ExecutorService).",source:"@site/docs/submodule/Connector/docs/developer/metrics.md",sourceDirName:"submodule/Connector/docs/developer",slug:"/submodule/Connector/docs/developer/metrics",permalink:"/edc-docs/docs/submodule/Connector/docs/developer/metrics",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/docs/developer/metrics.md",tags:[],version:"current",frontMatter:{}},a={},l=[{value:"Micrometer Extension",id:"micrometer-extension",level:2},{value:"Jetty Micrometer Extension",id:"jetty-micrometer-extension",level:2},{value:"Jersey Micrometer Extension",id:"jersey-micrometer-extension",level:2},{value:"Instrumenting ExecutorServices",id:"instrumenting-executorservices",level:2},{value:"Configuration",id:"configuration",level:2}],m={toc:l};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"edc-extensions-for-instrumentation-with-micrometer"},"EDC extensions for instrumentation with Micrometer"),(0,o.kt)("p",null,"EDC provides extensions for instrumentation with the ",(0,o.kt)("a",{parentName:"p",href:"https://micrometer.io/"},"Micrometer")," metrics library to automatically collect metrics from the host system, JVM, and frameworks and libraries used in EDC (including OkHttp, Jetty, Jersey and ExecutorService)."),(0,o.kt)("p",null,"See ",(0,o.kt)("a",{parentName:"p",href:"/edc-docs/docs/submodule/Connector/samples/04.3-open-telemetry/"},"sample 04.3")," for an example of an instrumented EDC consumer. "),(0,o.kt)("h2",{id:"micrometer-extension"},"Micrometer Extension"),(0,o.kt)("p",null,"This extension provides support for instrumentation for some core EDC components:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"JVM metrics"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://square.github.io/okhttp/"},"OkHttp")," client metrics"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/concurrent/ExecutorService.html"},"ExecutorService")," metrics")),(0,o.kt)("h2",{id:"jetty-micrometer-extension"},"Jetty Micrometer Extension"),(0,o.kt)("p",null,"This extension provides support for instrumentation for the ",(0,o.kt)("a",{parentName:"p",href:"https://www.eclipse.org/jetty/"},"Jetty")," web server, which is enabled when using the ",(0,o.kt)("inlineCode",{parentName:"p"},"JettyExtension"),"."),(0,o.kt)("h2",{id:"jersey-micrometer-extension"},"Jersey Micrometer Extension"),(0,o.kt)("p",null,"This extension provides support for instrumentation for the ",(0,o.kt)("a",{parentName:"p",href:"https://eclipse-ee4j.github.io/jersey/"},"Jersey")," framework, which is enabled when using the ",(0,o.kt)("inlineCode",{parentName:"p"},"JerseyExtension"),"."),(0,o.kt)("h2",{id:"instrumenting-executorservices"},"Instrumenting ExecutorServices"),(0,o.kt)("p",null,"Instrumenting ExecutorServices requires using the ",(0,o.kt)("inlineCode",{parentName:"p"},"ExecutorInstrumentation")," service to create a wrapper around the service to be instrumented:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-java"},'ExecutorInstrumentation executorInstrumentation = context.getService(ExecutorInstrumentation.class);\n\n// instrument a ScheduledExecutorService\nScheduledExecutorService executor = executorInstrumentation.instrument(Executors.newScheduledThreadPool(10), "name");\n')),(0,o.kt)("p",null,"Without any further configuration, a noop implementation of ",(0,o.kt)("inlineCode",{parentName:"p"},"ExecutorInstrumentation")," is used. We recommend using the implementation provided in the Micrometer Extension that uses Micrometer's ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/micrometer-metrics/micrometer/blob/main/micrometer-core/src/main/java/io/micrometer/core/instrument/binder/jvm/ExecutorServiceMetrics.java"},"ExecutorServiceMetrics")," to record ExecutorService metrics."),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"The following properties can use used to configure which metrics will be collected."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edc.metrics.enabled"),": enables/disables metrics collection globally"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edc.metrics.system.enabled"),": enables/disables collection of system metrics (class loader, memory, garbage collection, processor and thread metrics)"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edc.metrics.okhttp.enabled"),": enables/disables collection of metrics for the OkHttp client"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edc.metrics.executor.enabled"),": enables/disables collection of metrics for the instrumented ExecutorServices"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edc.metrics.jetty.enabled"),": enables/disables collection of Jetty metrics"),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"edc.metrics.jersey.enabled"),": enables/disables collection of Jersey metrics")),(0,o.kt)("p",null,'Default values are always "true", switch to "false" to disable the corresponding feature.'))}u.isMDXComponent=!0}}]);