"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[7803],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>m});var o=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,a=function(e,t){if(null==e)return{};var n,o,a={},r=Object.keys(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(o=0;o<r.length;o++)n=r[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=o.createContext({}),d=function(e){var t=o.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=d(e.components);return o.createElement(s.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},c=o.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=d(n),m=a,g=c["".concat(s,".").concat(m)]||c[m]||p[m]||r;return n?o.createElement(g,i(i({ref:t},u),{},{components:n})):o.createElement(g,i({ref:t},u))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,i=new Array(r);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var d=2;d<r;d++)i[d]=n[d];return o.createElement.apply(null,i)}return o.createElement.apply(null,n)}c.displayName="MDXCreateElement"},2159:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var o=n(7462),a=(n(7294),n(3905));const r={},i="The `autodoc` Gradle Plugin",l={unversionedId:"submodule/GradlePlugins/docs/developer/autodoc",id:"submodule/GradlePlugins/docs/developer/autodoc",title:"The `autodoc` Gradle Plugin",description:"Introduction",source:"@site/docs/submodule/GradlePlugins/docs/developer/autodoc.md",sourceDirName:"submodule/GradlePlugins/docs/developer",slug:"/submodule/GradlePlugins/docs/developer/autodoc",permalink:"/edc-docs/docs/submodule/GradlePlugins/docs/developer/autodoc",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/GradlePlugins/docs/developer/autodoc.md",tags:[],version:"current",frontMatter:{}},s={},d=[{value:"Introduction",id:"introduction",level:2},{value:"Module structure",id:"module-structure",level:2},{value:"Usage",id:"usage",level:2},{value:"Add the plugin to the <code>buildscript</code> block of your <code>build.gradle.kts</code>:",id:"add-the-plugin-to-the-buildscript-block-of-your-buildgradlekts",level:3},{value:"Apply the plugin to the project:",id:"apply-the-plugin-to-the-project",level:3},{value:"Configure the plugin optional",id:"configure-the-plugin-optional",level:3},{value:"Merging the manifests",id:"merging-the-manifests",level:2}],u={toc:d};function p(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,o.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"the-autodoc-gradle-plugin"},"The ",(0,a.kt)("inlineCode",{parentName:"h1"},"autodoc")," Gradle Plugin"),(0,a.kt)("h2",{id:"introduction"},"Introduction"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"autodoc")," plugin hooks into the Java compiler task (",(0,a.kt)("inlineCode",{parentName:"p"},"compileJava"),") and generates a module\nmanifest file that contains meta information about each module.\nFor example, it exposes all required and provided dependencies of an EDC ",(0,a.kt)("inlineCode",{parentName:"p"},"ServiceExtension"),"."),(0,a.kt)("h2",{id:"module-structure"},"Module structure"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"autodoc")," plugin is located at ",(0,a.kt)("inlineCode",{parentName:"p"},"plugins/autodoc")," and consists of four separate modules:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"autodoc-plugin"),": contains the actual Gradle ",(0,a.kt)("inlineCode",{parentName:"li"},"Plugin")," and an ",(0,a.kt)("inlineCode",{parentName:"li"},"Extension")," to configure the plugin. This module is\npublished to the ",(0,a.kt)("a",{parentName:"li",href:"https://plugins.gradle.org"},"Gradle Portal"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"autodoc-processor"),": contains an ",(0,a.kt)("inlineCode",{parentName:"li"},"AnnotationProcessor")," that hooks into the compilation process and builds the manifest\nfile. Published to MavenCentral."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"autodoc-extension-test"),": test code for the annotation processor. Not published."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"autodoc-spi-test"),": test code for the annotation processor. Not published.")),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("p",null,"In order to use the ",(0,a.kt)("inlineCode",{parentName:"p"},"autodoc")," plugin we must follow a few simple steps. All examples use the Kotlin DSL."),(0,a.kt)("h3",{id:"add-the-plugin-to-the-buildscript-block-of-your-buildgradlekts"},"Add the plugin to the ",(0,a.kt)("inlineCode",{parentName:"h3"},"buildscript")," block of your ",(0,a.kt)("inlineCode",{parentName:"h3"},"build.gradle.kts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'buildscript {\n repositories {\n     maven {\n         url = uri("https://oss.sonatype.org/content/repositories/snapshots/")\n     }\n }\n dependencies {\n     classpath("org.eclipse.edc.autodoc:org.eclipse.edc.autodoc.gradle.plugin:<VERSION>>")\n }\n}\n')),(0,a.kt)("p",null,"Please note that the ",(0,a.kt)("inlineCode",{parentName:"p"},"repositories")," configuration can be omitted, if the release version of the plugin is used."),(0,a.kt)("h3",{id:"apply-the-plugin-to-the-project"},"Apply the plugin to the project:"),(0,a.kt)("p",null,"There are two options to apply a plugin. For multi-module builds this should be done at the root level."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"via ",(0,a.kt)("inlineCode",{parentName:"li"},"plugin")," block:",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n    id("org.eclipse.edc.autodoc")\n}\n'))),(0,a.kt)("li",{parentName:"ol"},"using the iterative approach, useful when applying to ",(0,a.kt)("inlineCode",{parentName:"li"},"allprojects")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"subprojects"),":",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'subprojects{\n   apply(plugin = "org.eclipse.edc.autodoc")\n}\n')))),(0,a.kt)("h3",{id:"configure-the-plugin-optional"},"Configure the plugin ","[optional]"),(0,a.kt)("p",null,"The ",(0,a.kt)("inlineCode",{parentName:"p"},"autodoc")," plugin exposes the following configuration values:"),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"the ",(0,a.kt)("inlineCode",{parentName:"li"},"processorVersion"),": tells the plugin, which version of the annotation processor module to use. Set this value if\nthe version of the plugin and of the annotation processor diverge. If this is\nomitted, the plugin will use its own version. Please enter ",(0,a.kt)("em",{parentName:"li"},"just")," the SemVer-compliant version string,\nno ",(0,a.kt)("inlineCode",{parentName:"li"},"groupId")," or ",(0,a.kt)("inlineCode",{parentName:"li"},"artifactName")," are needed.",(0,a.kt)("pre",{parentName:"li"},(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'configure<org.eclipse.edc.plugins.autodoc.AutodocExtension> {\n    processorVersion.set("<VERSION>")\n}\n')),(0,a.kt)("strong",{parentName:"li"},"Typically, you do not need to configure this and can safely omit it."))),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"The plugin will then generate an ",(0,a.kt)("inlineCode",{parentName:"em"},"edc.json")," file for every module/gradle project.")),(0,a.kt)("h2",{id:"merging-the-manifests"},"Merging the manifests"),(0,a.kt)("p",null,"There is a Gradle task readily available to merge all the manifests into one large ",(0,a.kt)("inlineCode",{parentName:"p"},"manifest.json")," file. This comes in\nhandy when the JSON manifest is to be converted into other formats, such as Markdown, HTML, etc."),(0,a.kt)("p",null,"To do that, execute the following command on a shell:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"./gradlew mergeManifest\n")),(0,a.kt)("p",null,"By default, the merged manifests are saved to ",(0,a.kt)("inlineCode",{parentName:"p"},"<rootProject>/build/manifest.json"),". This destination file can be\nconfigured using a task property:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"    // delete the merged manifest before the first merge task runs\ntasks.withType<MergeManifestsTask> {\n    destinationFile = YOUR_MANIFEST_FILE\n}\n")),(0,a.kt)("p",null,"Be aware that due to the multithreaded nature of the merger task, every subproject's ",(0,a.kt)("inlineCode",{parentName:"p"},"edc.json")," gets appended to the\ndestination file, so it is a good idea to delete that file before running the ",(0,a.kt)("inlineCode",{parentName:"p"},"mergeManifest")," task.\nGradle can take care of that for you though:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},"// delete the merged manifest before the first merge task runs\nrootProject.tasks.withType<MergeManifestsTask> {\n    doFirst { YOUR_MANIFEST_FILE.delete() }\n}\n")))}p.isMDXComponent=!0}}]);