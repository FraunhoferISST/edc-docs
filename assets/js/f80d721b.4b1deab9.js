"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[4201],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var s=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},o=Object.keys(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=s.createContext({}),c=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return s.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},u=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=c(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||o;return n?s.createElement(h,a(a({ref:t},d),{},{components:n})):s.createElement(h,a({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,a=new Array(o);a[0]=u;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,a[1]=i;for(var c=2;c<o;c++)a[c]=n[c];return s.createElement.apply(null,a)}return s.createElement.apply(null,n)}u.displayName="MDXCreateElement"},70203:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var s=n(87462),r=(n(67294),n(3905));const o={},a="Remove H2 as test database",i={unversionedId:"submodule/Connector/docs/developer/decision-records/2022-08-17-remove_h2_database_tests/README",id:"submodule/Connector/docs/developer/decision-records/2022-08-17-remove_h2_database_tests/README",title:"Remove H2 as test database",description:"Decision",source:"@site/docs/submodule/Connector/docs/developer/decision-records/2022-08-17-remove_h2_database_tests/README.md",sourceDirName:"submodule/Connector/docs/developer/decision-records/2022-08-17-remove_h2_database_tests",slug:"/submodule/Connector/docs/developer/decision-records/2022-08-17-remove_h2_database_tests/",permalink:"/edc-docs/docs/submodule/Connector/docs/developer/decision-records/2022-08-17-remove_h2_database_tests/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/docs/developer/decision-records/2022-08-17-remove_h2_database_tests/README.md",tags:[],version:"current",frontMatter:{}},l={},c=[{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Approach",id:"approach",level:2},{value:"Future improvements",id:"future-improvements",level:2}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,s.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"remove-h2-as-test-database"},"Remove H2 as test database"),(0,r.kt)("h2",{id:"decision"},"Decision"),(0,r.kt)("p",null,"All SQL implementations will be changed so that all their tests target an actual Postgres instance instead of an\nembedded H2. Test code is currently split up in multiple test classes, one targeting H2, and one for Postgres-specific\ncode."),(0,r.kt)("h2",{id:"rationale"},"Rationale"),(0,r.kt)("p",null,"While H2 is great for testing generic stuff, it does not support any Postgres-specific features such as JSON queries.\nAlso, some datatypes behave slightly differently in Postgres. Thus, other than duplicating all test code, the only\noption left was for developers to decide which tests should target which database, which is error-prone and almost\nimpossible to keep consistent. Due to the fact that JUnit ",(0,r.kt)("inlineCode",{parentName:"p"},"@Tag")," annotations are inherited, we cannot simply let the\nPostgres tests extend the H2 test, because then excluding them from a test run would not work anymore."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"For that reason the decision was made to only target Postgres, completely ditching H2.")),(0,r.kt)("h2",{id:"approach"},"Approach"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"There will be an ",(0,r.kt)("inlineCode",{parentName:"li"},"abstract")," test class, that only contains the ",(0,r.kt)("inlineCode",{parentName:"li"},"@Test")," methods and a reference to the\nsystem-under-test. Then there will be a Postgres-specific subclass, that initializes the database and instantiates the\nsystem-under-test. For example, there will be an ",(0,r.kt)("inlineCode",{parentName:"li"},"AssetIndexTest.java")," and a ",(0,r.kt)("inlineCode",{parentName:"li"},"PostgresAssetIndexTest.java"),". That way\nwe can easily test multiple SQL implementations against the same test scenario."),(0,r.kt)("li",{parentName:"ul"},"A JUnit extension will be devised that provides the Postgres database connection to deduplicate code. Currently, it is\ncreated in every test separately.")),(0,r.kt)("h2",{id:"future-improvements"},"Future improvements"),(0,r.kt)("p",null,"Once we actually have another SQL implementation next to Postgres, we could split up the modules into a generic SQL one,\nand a postgres specific one, contributing the actual statements and the test code, for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"extensions\n\u251c\u2500\u2500 sql\n\u2502   \u251c\u2500\u2500 asset-index // <- only contains unit test\n\u2502   \u251c\u2500\u2500 contract-definition-store\n\u2502   \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 postgres\n\u2502   \u251c\u2500\u2500 asset-index-postgres // <- contributes PostgresDialectStatements.java and PostgresAssetIndexTest.java\n\u2502   \u251c\u2500\u2500 contract-definition-store-postgres\n\u2502   \u251c\u2500\u2500 ...\n\u251c\u2500\u2500 mssql \n\u2502   \u251c\u2500\u2500 asset-index-mssql // <- contributes MssqlDialectStatements.java and MssqlAssetIndexTest.java\n\u2502   \u251c\u2500\u2500 contract-definition-store-mssql\n\u2502   \u251c\u2500\u2500 ...\n\n")))}p.isMDXComponent=!0}}]);