"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[7997],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function a(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),c=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):a(a({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=c(n),m=o,h=u["".concat(l,".").concat(m)]||u[m]||p[m]||i;return n?r.createElement(h,a(a({ref:t},d),{},{components:n})):r.createElement(h,a({ref:t},d))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=n.length,a=new Array(i);a[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=n[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},15939:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=n(87462),o=(n(67294),n(3905));const i={},a="Add pagination to IDS requests",s={unversionedId:"submodule/Connector/docs/developer/decision-records/2022-07-05-ids-requests-pagination/README",id:"submodule/Connector/docs/developer/decision-records/2022-07-05-ids-requests-pagination/README",title:"Add pagination to IDS requests",description:"Decision",source:"@site/docs/submodule/Connector/docs/developer/decision-records/2022-07-05-ids-requests-pagination/README.md",sourceDirName:"submodule/Connector/docs/developer/decision-records/2022-07-05-ids-requests-pagination",slug:"/submodule/Connector/docs/developer/decision-records/2022-07-05-ids-requests-pagination/",permalink:"/edc-docs/docs/submodule/Connector/docs/developer/decision-records/2022-07-05-ids-requests-pagination/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/docs/developer/decision-records/2022-07-05-ids-requests-pagination/README.md",tags:[],version:"current",frontMatter:{}},l={},c=[{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Approach",id:"approach",level:2},{value:"1. Encoding <code>Range</code> into IDS",id:"1-encoding-range-into-ids",level:3},{value:"2. Collecting results of all requests",id:"2-collecting-results-of-all-requests",level:3},{value:"Future improvements",id:"future-improvements",level:2}],d={toc:c};function p(e){let{components:t,...n}=e;return(0,o.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"add-pagination-to-ids-requests"},"Add pagination to IDS requests"),(0,o.kt)("h2",{id:"decision"},"Decision"),(0,o.kt)("p",null,"Until such time that a holistic refactoring of the IDS protocol module can be done, we will implement a short-term fix\nto accommodate the need to have pageable requests."),(0,o.kt)("p",null,"Currently, this is only needed for the ",(0,o.kt)("inlineCode",{parentName:"p"},"CatalogRequest"),", as it is the only request that returns a set of data (\ni.e. ",(0,o.kt)("inlineCode",{parentName:"p"},"ContractOffers")," wrapped in a ",(0,o.kt)("inlineCode",{parentName:"p"},"Catalog"),"). However, due to the way how the multipart request handlers are\narchitected now, it is unfortunately also necessary to update the other ",(0,o.kt)("inlineCode",{parentName:"p"},"*RequestHandler")," classes."),(0,o.kt)("h2",{id:"rationale"},"Rationale"),(0,o.kt)("p",null,"To alleviate problems that surfaced when transmitting large response bodies over HTTP (e.g. a ",(0,o.kt)("inlineCode",{parentName:"p"},"Catalog")," with\n5000 ",(0,o.kt)("inlineCode",{parentName:"p"},"ContractOffers"),'), it is necessary to splice the response into several digestible chunks. The exact composition of\nthose chunks is determined by so-called "pagination parameters". Clients must then re-send the request with updated\npagination parameters until no more items are received.'),(0,o.kt)("h2",{id:"approach"},"Approach"),(0,o.kt)("p",null,"We introduce the concept of a ",(0,o.kt)("inlineCode",{parentName:"p"},"Range"),", which contains ",(0,o.kt)("inlineCode",{parentName:"p"},"from")," and a ",(0,o.kt)("inlineCode",{parentName:"p"},"to")," fields. To make this work over IDS two things\nare necessary:"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},"transmit ",(0,o.kt)("inlineCode",{parentName:"li"},"from")," and ",(0,o.kt)("inlineCode",{parentName:"li"},"to")," over IDS"),(0,o.kt)("li",{parentName:"ol"},"have a piece of code on the requesting side, that re-sends the request until no more items are received")),(0,o.kt)("h3",{id:"1-encoding-range-into-ids"},"1. Encoding ",(0,o.kt)("inlineCode",{parentName:"h3"},"Range")," into IDS"),(0,o.kt)("p",null,"The easiest way of doing this to add two integers to the IDS message:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"// in MultiPartCatalogDescriptionRequestSender.java\nmessage.setProperty(Range.FROM_NAME,request.getRange().getFrom());\nmessage.setProperty(Range.TO_NAME,request.getRange().getTo());\n")),(0,o.kt)("p",null,"Then, on the receiving end, they simply are extracted again:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"// in ConnectorDescriptionRequestHandler.java \nvar from=getInt(descriptionRequestMessage,Range.FROM_NAME,0);\nvar to=getInt(descriptionRequestMessage,Range.TO_NAME,Integer.MAX_VALUE);\nvar range=new Range(from,to);\n")),(0,o.kt)("p",null,"Note that ",(0,o.kt)("inlineCode",{parentName:"p"},"getInt(...)")," simply is a null-safe way to either get the value, or use a default value."),(0,o.kt)("h3",{id:"2-collecting-results-of-all-requests"},"2. Collecting results of all requests"),(0,o.kt)("p",null,"Instead of calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"DispatcherRegistry")," directly, there will be a collaborator object that handles this. This\npseudocode demonstrates this:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"int size = to - from;\ndo {\n    var offers = sendCatalogRequest(..., from, to);\n    from += size;\n    to += size;\n} while(offers.size() > 0);\n")),(0,o.kt)("p",null,"Since we do not know the total size of items, we must employ a ",(0,o.kt)("inlineCode",{parentName:"p"},"do-while"),"-style to re-send the requests."),(0,o.kt)("h2",{id:"future-improvements"},"Future improvements"),(0,o.kt)("p",null,"As this is only a temporary fix, which will likely get replaced once a larger refactoring/redesign of IDS is done, there\nare several things to highlight here."),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"non-deterministic looping: currently, the total number of items is not known, therefore only non-deterministic loops\nare available."),(0,o.kt)("li",{parentName:"ul"},"Blocking ",(0,o.kt)("inlineCode",{parentName:"li"},"CompletableFutures"),": as a consequence of non-deterministic looping, it is not possible to parallelize\nmultiple requests, which means we must wait on them with ",(0,o.kt)("inlineCode",{parentName:"li"},"join()"),". If in the future we know the total number of items,\nwe can further optimize this."),(0,o.kt)("li",{parentName:"ul"},"Object hierarchy of the ",(0,o.kt)("inlineCode",{parentName:"li"},"DescriptionRequestHandler"),": there is the ",(0,o.kt)("inlineCode",{parentName:"li"},"AbstractDescriptionRequestHandler"),", which is a base\nclass for all other request handlers, except the ",(0,o.kt)("inlineCode",{parentName:"li"},"ConnectorDescriptionRequestHandler"),". Obviously, this needs some\ncleaning up, as is it questionable whether all of them are needed at all."),(0,o.kt)("li",{parentName:"ul"},"differentiate between pageable and non-pageable requests")))}p.isMDXComponent=!0}}]);