"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[5375],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),c=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return r.createElement(s.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),m=a,h=p["".concat(s,".").concat(m)]||p[m]||u[m]||o;return n?r.createElement(h,i(i({ref:t},d),{},{components:n})):r.createElement(h,i({ref:t},d))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=p;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},34082:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(87462),a=(n(67294),n(3905));const o={},i="Usage of Gradle Version Catalogs",l={unversionedId:"submodule/Connector/docs/developer/decision-records/2022-10-21-gradle-versioncatalogs/README",id:"submodule/Connector/docs/developer/decision-records/2022-10-21-gradle-versioncatalogs/README",title:"Usage of Gradle Version Catalogs",description:"Decision",source:"@site/docs/submodule/Connector/docs/developer/decision-records/2022-10-21-gradle-versioncatalogs/README.md",sourceDirName:"submodule/Connector/docs/developer/decision-records/2022-10-21-gradle-versioncatalogs",slug:"/submodule/Connector/docs/developer/decision-records/2022-10-21-gradle-versioncatalogs/",permalink:"/edc-docs/docs/submodule/Connector/docs/developer/decision-records/2022-10-21-gradle-versioncatalogs/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/docs/developer/decision-records/2022-10-21-gradle-versioncatalogs/README.md",tags:[],version:"current",frontMatter:{}},s={},c=[{value:"Decision",id:"decision",level:2},{value:"Rationale",id:"rationale",level:2},{value:"Approach",id:"approach",level:2},{value:"A word on naming",id:"a-word-on-naming",level:3},{value:"Guidelines when to create new entries in the catalog",id:"guidelines-when-to-create-new-entries-in-the-catalog",level:3},{value:"Nota Bene",id:"nota-bene",level:2}],d={toc:c};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"usage-of-gradle-version-catalogs"},"Usage of Gradle Version Catalogs"),(0,a.kt)("h2",{id:"decision"},"Decision"),(0,a.kt)("p",null,"The EDC Build Plugin (currently under development) will provide\na ",(0,a.kt)("a",{parentName:"p",href:"https://docs.gradle.org/7.4/userguide/platforms.html"},"Gradle Version Catalog"),"\nthat will contain versions of all the third-party libraries that are presently used in the EDC codebase."),(0,a.kt)("h2",{id:"rationale"},"Rationale"),(0,a.kt)("p",null,"The usage of version catalogs is expected to remove the possibility for version clashes between EDC and client projects\nbecause it centralizes common definitions.\nIt will also make it transparent, which versions of which libraries EDC is using internally without having to look at\nthe source code or performing a dependency inspection on the build level."),(0,a.kt)("p",null,"There are in fact multiple scenarios where a benefit can be gained from version catalogs."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"EDC itself will be able to get rid of declaring all dependencies and accessing them through build\nproperties (",(0,a.kt)("inlineCode",{parentName:"p"},"val something : String by project"),"), because the version catalog is typed and accessible at\nconfiguration time. It is also hierarchical, so it is easy to navigate and access.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Other EDC projects/components: here we'll mostly use the version catalog to enforce version consistency across\nmultiple repos/projects. The version catalog is created centrally, and distributed through Gradle plugins. This also\nhelps in keeping third-party libraries updated across multiple projects.")),(0,a.kt)("li",{parentName:"ol"},(0,a.kt)("p",{parentName:"li"},"Third-party client projects: various industry initiative such as Catena-X would benefit from the version catalog, in\nthat they do not have to look at EDC's source code in order to learn which version of which lib it uses, but can\nconsult the version catalog distributed by the plugin. That will avoid version clashes with transitive dependencies,\nand the amount of introspection and intricate knowledge necessary to use EDC."))),(0,a.kt)("h2",{id:"approach"},"Approach"),(0,a.kt)("p",null,"The EDC Build Plugin (under development) will declare and distribute the version catalog as part of its public API. It\nwill contain all third-party libraries currently in use by EDC at the time of publication. For example a structure\nsimilar to the following could emerge:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'versionCatalogs {\n    create("edcext") { //extensions is a reserved keyword\n        library("azure-storage", "com.azure:azure-storage-blob:X.Y.Z")\n        library("azure-cosmos", "com.azure:azure-cosmos:X.Y.Z")\n        library("azure-resourcemanager", "com.azure:azure-resource-manager:X.Y.Z")\n        library("azure-resourcemanager-auth", "com.azure:azure-resource-manager-authorization:X.Y.Z")\n        // ...\n    }\n}\n')),(0,a.kt)("p",null,"Version catalogs are lightweight, much more so than platforms (which actually influence the dependency graph), and they\nshould be understood as the EDC project team's recommendation. Clients can then use the platform feature to apply them\nand restrict the dependency graph or simply choose to override them at their own risk."),(0,a.kt)("h3",{id:"a-word-on-naming"},"A word on naming"),(0,a.kt)("p",null,"Version catalogs automatically convert separated aliases into hierarchical structures, so ",(0,a.kt)("inlineCode",{parentName:"p"},"azure-resourcemanager-auth"),"\nwould be converted into ",(0,a.kt)("inlineCode",{parentName:"p"},"azure.resourcemanager.auth"),". As a general rule of thumb those aliases should include the\nproject name and the module that is being imported, for example\nJackson: ",(0,a.kt)("inlineCode",{parentName:"p"},"com.fasterxml.jackson.core:jackson-annotations:X.Y.Z"),":"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"bad"),": ",(0,a.kt)("inlineCode",{parentName:"li"},"jackson.core.annotations"),": the ",(0,a.kt)("inlineCode",{parentName:"li"},"core")," is not needed, as it's part of the group id and does not offer\nadditional\ninsights"),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"bad"),": ",(0,a.kt)("inlineCode",{parentName:"li"},"fasterxml-jackson.annotations"),": should avoid long project names, people would likely expect it to\nbe ",(0,a.kt)("inlineCode",{parentName:"li"},"jackson")," rather than ",(0,a.kt)("inlineCode",{parentName:"li"},"fasterxml-jackson")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("strong",{parentName:"li"},"better")," ",(0,a.kt)("inlineCode",{parentName:"li"},"jackson.annotations"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"jackson.core"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"jackson.databind"),", etc.")),(0,a.kt)("h3",{id:"guidelines-when-to-create-new-entries-in-the-catalog"},"Guidelines when to create new entries in the catalog"),(0,a.kt)("p",null,"As a general rule of thumb a library should be included in the dependency version catalog when:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"it is used in multiple modules in EDC"),(0,a.kt)("li",{parentName:"ul"},"it is a technology dependency, such as Azure Blob Storage or Google Cloud Storage"),(0,a.kt)("li",{parentName:"ul"},"it is an essential dependency, such as AssertJ, Mockito, etc."),(0,a.kt)("li",{parentName:"ul"},"there are known conflicts, vulnerabilities or inconsistencies, even between minor versions. Crypto-libraries sometimes\nare affected by this.")),(0,a.kt)("h2",{id:"nota-bene"},"Nota Bene"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Version catalogs will be implemented in the EDC Build Plugin first, and will be adopted in EDC at a later point in\ntime"),(0,a.kt)("li",{parentName:"ul"},"Version catalogs are still an incubating feature")))}u.isMDXComponent=!0}}]);