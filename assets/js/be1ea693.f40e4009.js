"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[5796],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>u});var i=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,i)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,i,n=function(e,t){if(null==e)return{};var a,i,n={},r=Object.keys(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)a=r[i],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=i.createContext({}),p=function(e){var t=i.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},c=function(e){var t=p(e.components);return i.createElement(l.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},d=i.forwardRef((function(e,t){var a=e.components,n=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(a),u=n,h=d["".concat(l,".").concat(u)]||d[u]||m[u]||r;return a?i.createElement(h,o(o({ref:t},c),{},{components:a})):i.createElement(h,o({ref:t},c))}));function u(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var r=a.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:n,o[1]=s;for(var p=2;p<r;p++)o[p]=a[p];return i.createElement.apply(null,o)}return i.createElement.apply(null,a)}d.displayName="MDXCreateElement"},60979:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>p});var i=a(87462),n=(a(67294),a(3905));const r={},o="Registration Service",s={unversionedId:"submodule/MinimumViableDataspace/docs/developer/decision-records/2022-06-15-registration-service/README",id:"submodule/MinimumViableDataspace/docs/developer/decision-records/2022-06-15-registration-service/README",title:"Registration Service",description:"Registration Service is a component of a Dataspace Authority. In the current version, the Dataspace Authority is centralized to support the Minimum Viable Dataspace (MVD). In future versions, the Authority could also be partly or fully decentralized.",source:"@site/docs/submodule/MinimumViableDataspace/docs/developer/decision-records/2022-06-15-registration-service/README.md",sourceDirName:"submodule/MinimumViableDataspace/docs/developer/decision-records/2022-06-15-registration-service",slug:"/submodule/MinimumViableDataspace/docs/developer/decision-records/2022-06-15-registration-service/",permalink:"/edc-docs/docs/submodule/MinimumViableDataspace/docs/developer/decision-records/2022-06-15-registration-service/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/MinimumViableDataspace/docs/developer/decision-records/2022-06-15-registration-service/README.md",tags:[],version:"current",frontMatter:{}},l={},p=[{value:"Deployment",id:"deployment",level:2},{value:"Identity",id:"identity",level:2},{value:"Operations",id:"operations",level:2},{value:"1. Dataspace participant enrollment",id:"1-dataspace-participant-enrollment",level:3},{value:"Participants",id:"participants",level:4},{value:"Overview",id:"overview",level:4},{value:"Pre-conditions",id:"pre-conditions",level:4},{value:"Post-conditions",id:"post-conditions",level:4},{value:"Flow sequence",id:"flow-sequence",level:4},{value:"2. List participants",id:"2-list-participants",level:3},{value:"Participants",id:"participants-1",level:4},{value:"Overview",id:"overview-1",level:4},{value:"Pre-conditions",id:"pre-conditions-1",level:4},{value:"Flow sequence",id:"flow-sequence-1",level:4},{value:"References",id:"references",level:2}],c={toc:p};function m(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,i.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"registration-service"},"Registration Service"),(0,n.kt)("p",null,"Registration Service is a component of a Dataspace Authority. In the current version, the Dataspace Authority is centralized to support the ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/eclipse-dataspaceconnector/MinimumViableDataspace"},"Minimum Viable Dataspace")," (MVD). In future versions, the Authority could also be partly or fully decentralized."),(0,n.kt)("p",null,"Responsibilities of the Dataspace Authority in MVD:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Establishes a DID (Decentralized Identifier) defining the Dataspace."),(0,n.kt)("li",{parentName:"ul"},"Manages policies defining who is allowed to participate in the dataspace."),(0,n.kt)("li",{parentName:"ul"},"Manages enrollment process of the Dataspace participants."),(0,n.kt)("li",{parentName:"ul"},"Lists the DID of available Dataspace participants.")),(0,n.kt)("h2",{id:"deployment"},"Deployment"),(0,n.kt)("p",null,"The Registration Service is deployed as a separate component in the Dataspace environment. Deployment workflows and artifacts are provided in the  ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/eclipse-dataspaceconnector/MinimumViableDataspace"},"Minimum Viable Dataspace")," repository."),(0,n.kt)("h2",{id:"identity"},"Identity"),(0,n.kt)("p",null,"The Registration Service endpoint can be resolved from the ",(0,n.kt)("inlineCode",{parentName:"p"},"did:web")," document deployed for the Dataspace Authority."),(0,n.kt)("p",null,"In future versions, the Registration Service endpoint will be resolved in a Self-Description Document whose URL is available in the the ",(0,n.kt)("inlineCode",{parentName:"p"},"did:web")," document. This version uses a simplified process omitting the Self-Description Document."),(0,n.kt)("h2",{id:"operations"},"Operations"),(0,n.kt)("p",null,"Operations supported by the Registration Service:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#1-dataspace-participant-enrollment"},"Dataspace participant enrollment")),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"#2-list-participants"},"Listing all Dataspace participants"))),(0,n.kt)("p",null,"Operations that will be supported in future versions of the Registration Service:"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Dataspace participant offboarding"),(0,n.kt)("li",{parentName:"ul"},"Blacklisting")),(0,n.kt)("h3",{id:"1-dataspace-participant-enrollment"},"1. Dataspace participant enrollment"),(0,n.kt)("h4",{id:"participants"},"Participants"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("em",{parentName:"li"},"Company1"),", an entity which intends to become a Dataspace participant"),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("em",{parentName:"li"},"The Dataspace Authority"),", which manages the enrollment process")),(0,n.kt)("h4",{id:"overview"},"Overview"),(0,n.kt)("p",null,"A Client for ",(0,n.kt)("em",{parentName:"p"},"Company1")," initiates the enrollment process by resolving and contacting the enrollment API endpoint for the ",(0,n.kt)("em",{parentName:"p"},"Dataspace Authority"),". (The client could be e.g. a CLI utility.)"),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},"The Dataspace Authority")," enrollment service obtains Verifiable Credentials (VCs) from ",(0,n.kt)("em",{parentName:"p"},"Company1")," to determine whether it meets enrollment policies. The enrollment service then issues a Verifiable Credential that establishes membership and pushes it to ",(0,n.kt)("em",{parentName:"p"},"Company 1's")," Identity Hub, and stores membership and certificate information."),(0,n.kt)("p",null,"In simple scenarios, enrollment could be fast and fully automated. However, in advanced scenarios, enrollment policies could require interactions with external systems, and even manual processes, therefore, it is implemented asynchronously."),(0,n.kt)("h4",{id:"pre-conditions"},"Pre-conditions"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("em",{parentName:"li"},"Company1")," has deployed an Identity Hub service, and a DID Document containing the Identity Hub URL."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("em",{parentName:"li"},"Company1")," knows the DID URL of the Dataspace it intends to join."),(0,n.kt)("li",{parentName:"ol"},"The ",(0,n.kt)("em",{parentName:"li"},"Company1")," Identity Hub contains VCs that satisfy ",(0,n.kt)("em",{parentName:"li"},"the Dataspace Authority")," enrollment policy. In MVD, a credential ",(0,n.kt)("inlineCode",{parentName:"li"},'{"gaiaXMember": "true"}')," is seeded for each deployed participant, signed by a fake GAIA-X authority.")),(0,n.kt)("h4",{id:"post-conditions"},"Post-conditions"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The ",(0,n.kt)("em",{parentName:"li"},"Company1")," Identity Hub contains a VC signed by ",(0,n.kt)("em",{parentName:"li"},"the Dataspace Authority"),", that establishes membership in ",(0,n.kt)("em",{parentName:"li"},"Dataspace D"),". This is used by other participants to authorize requests from ",(0,n.kt)("em",{parentName:"li"},"Company1"),"."),(0,n.kt)("li",{parentName:"ol"},"The ",(0,n.kt)("em",{parentName:"li"},"Company1")," DID URL is stored in the Registration Service Participants Store. This is used to serve participant requests.")),(0,n.kt)("h4",{id:"flow-sequence"},"Flow sequence"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"dataspace-enrollment",src:a(79637).Z,width:"1102",height:"632"})),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The Client for ",(0,n.kt)("em",{parentName:"li"},"Company1")," initiates the enrollment process based on the Dataspace DID URL. It retrieves the DID Document, and parses it to retrieve Dataspace\nenrollment HTTP endpoint."),(0,n.kt)("li",{parentName:"ol"},"The client needs access to the ",(0,n.kt)("em",{parentName:"li"},"Company1")," Private Key to sign a JWS. The client sends an HTTP request to ",(0,n.kt)("em",{parentName:"li"},"the Dataspace Authority")," enrollment endpoint. The\nrequest is accepted for asynchronous processing."),(0,n.kt)("li",{parentName:"ol"},"The Registration Service uses the ",(0,n.kt)("a",{parentName:"li",href:"/edc-docs/docs/submodule/MinimumViableDataspace/docs/developer/decision-records/2022-06-16-distributed-authorization/"},"Distributed authorization sub-flow")," to authenticate the\nrequest..."),(0,n.kt)("li",{parentName:"ol"},"... and retrieves credentials from ",(0,n.kt)("em",{parentName:"li"},"Company1's")," Identity Hub."),(0,n.kt)("li",{parentName:"ol"},"The Registration Service stores participant information in its store. This includes Company 1's DID URL."),(0,n.kt)("li",{parentName:"ol"},"The Registration Service authorizes the request by applying the Dataspace enrollment policy on the obtained Verifiable Credentials. In MVD, the service checks for a credential ",(0,n.kt)("inlineCode",{parentName:"li"},'{"gaiaXMember": "true"}')," signed by any issuer (as the EDC policy engine does not currently allow restricting trusting claims to specific issuers)."),(0,n.kt)("li",{parentName:"ol"},"The Registration Service updates the status of the participant's membership indicating that the participant's onboarding is successful/failed."),(0,n.kt)("li",{parentName:"ol"},"The Registration Service issues and signs a membership Verifiable Credential."),(0,n.kt)("li",{parentName:"ol"},"The Registration Service sends the Verifiable Credential to ",(0,n.kt)("em",{parentName:"li"},"Company1's")," Identity Hub for storage. It uses the Identity Hub bearer token (from the Distributed authorization\nsub-flow) to authenticate the request."),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("em",{parentName:"li"},"Company1's")," Identity Hub validates the bearer token and stores the membership Verifiable Credential.")),(0,n.kt)("h3",{id:"2-list-participants"},"2. List participants"),(0,n.kt)("h4",{id:"participants-1"},"Participants"),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("em",{parentName:"li"},"Company1"),", a Dataspace Participant with a Dataspace Connector (e.g. EDC application) that wants to discover IDS endpoints (e.g. in order to list contract offers)"),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("em",{parentName:"li"},"The Dataspace Authority"),", which manages Dataspace memberships"),(0,n.kt)("li",{parentName:"ol"},(0,n.kt)("em",{parentName:"li"},"Company2"),", ",(0,n.kt)("em",{parentName:"li"},"Company3"),", etc., Dataspace Participants")),(0,n.kt)("h4",{id:"overview-1"},"Overview"),(0,n.kt)("p",null,"A typical EDC deployment caches contract offers from other participants in a federated catalog, so that users can quickly browse and negotiate contracts. To regularly retrieve offers, it regularly contacts the Registration Service to refresh its list of Dataspace Participants, then obtains contract offers from each participants to refresh its cache."),(0,n.kt)("p",null,"In this flow, the EDC for ",(0,n.kt)("em",{parentName:"p"},"Company1")," obtains a list of Dataspace Participants and resolves their IDS endpoints."),(0,n.kt)("h4",{id:"pre-conditions-1"},"Pre-conditions"),(0,n.kt)("p",null,"Participants are registered as (currently valid) Dataspace Participants"),(0,n.kt)("h4",{id:"flow-sequence-1"},"Flow sequence"),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"list-participants",src:a(98488).Z,width:"988",height:"520"})),(0,n.kt)("ol",null,(0,n.kt)("li",{parentName:"ol"},"The EDC for ",(0,n.kt)("em",{parentName:"li"},"Company1")," determines the Registration Service endpoint from the Dataspace DID Document."),(0,n.kt)("li",{parentName:"ol"},"The EDC for ",(0,n.kt)("em",{parentName:"li"},"Company1")," issues a request to the Registration Service, to list participants."),(0,n.kt)("li",{parentName:"ol"},"The Registration Service uses the ",(0,n.kt)("a",{parentName:"li",href:"/edc-docs/docs/submodule/MinimumViableDataspace/docs/developer/decision-records/2022-06-16-distributed-authorization/"},"Distributed authorization sub-flow")," to authenticate the\nrequest..."),(0,n.kt)("li",{parentName:"ol"},"... and retrieves Verifiable Presentations from ",(0,n.kt)("em",{parentName:"li"},"Company1's")," Identity Hub."),(0,n.kt)("li",{parentName:"ol"},"The Registration Service authorizes the request by applying the access policy on the obtained Verifiable Presentations. For example, the caller must be a valid\nDataspace Participant."),(0,n.kt)("li",{parentName:"ol"},"The Registration Service obtains the list of Dataspace Participant DID URIs from its storage..."),(0,n.kt)("li",{parentName:"ol"},"... and returns it synchronously to the caller (",(0,n.kt)("em",{parentName:"li"},"Company1")," EDC)."),(0,n.kt)("li",{parentName:"ol"},"The EDC for ",(0,n.kt)("em",{parentName:"li"},"Company1")," iterates through the Participants' DID URIs, and retrieves the collection of their IDS endpoints from their DID Documents.")),(0,n.kt)("h2",{id:"references"},"References"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"https://github.com/eclipse-dataspaceconnector/IdentityHub/blob/main/docs/developer/decision-records/2022-06-08-identity-hub/README.md"},"Identity Hub in MVD"))))}m.isMDXComponent=!0},79637:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/dataspace-enrollment-f41bdaf43d51cbbdb21cea2c66a66349.png"},98488:(e,t,a)=>{a.d(t,{Z:()=>i});const i=a.p+"assets/images/list-participants-96644d9980ec2c0a31e48ffed449bb79.png"}}]);