"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[3671],{3905:(e,n,t)=>{t.d(n,{Zo:()=>d,kt:()=>g});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var p=r.createContext({}),s=function(e){var n=r.useContext(p),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},d=function(e){var n=s(e.components);return r.createElement(p.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),u=s(t),g=a,m=u["".concat(p,".").concat(g)]||u[g]||c[g]||o;return t?r.createElement(m,l(l({ref:n},d),{},{components:t})):r.createElement(m,l({ref:n},d))}));function g(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,l=new Array(o);l[0]=u;var i={};for(var p in n)hasOwnProperty.call(n,p)&&(i[p]=n[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var s=2;s<o;s++)l[s]=t[s];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},9185:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>l,default:()=>c,frontMatter:()=>o,metadata:()=>i,toc:()=>s});var r=t(7462),a=(t(7294),t(3905));const o={},l="Generating the OpenApi Spec (*.yaml)",i={unversionedId:"submodule/Connector/docs/developer/openapi",id:"submodule/Connector/docs/developer/openapi",title:"Generating the OpenApi Spec (*.yaml)",description:"It is possible to generate an OpenApi spec in the form of a *.yaml file by invoking two simple Gradle tasks.",source:"@site/docs/submodule/Connector/docs/developer/openapi.md",sourceDirName:"submodule/Connector/docs/developer",slug:"/submodule/Connector/docs/developer/openapi",permalink:"/edc-docs/docs/submodule/Connector/docs/developer/openapi",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/docs/developer/openapi.md",tags:[],version:"current",frontMatter:{}},p={},s=[{value:"Generate <code>*.yaml</code> files",id:"generate-yaml-files",level:2},{value:"Gradle Plugins",id:"gradle-plugins",level:2},{value:"Categorizing your API",id:"categorizing-your-api",level:3},{value:"How to generate code",id:"how-to-generate-code",level:2}],d={toc:s};function c(e){let{components:n,...t}=e;return(0,a.kt)("wrapper",(0,r.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"generating-the-openapi-spec-yaml"},"Generating the OpenApi Spec (*.yaml)"),(0,a.kt)("p",null,"It is possible to generate an OpenApi spec in the form of a ",(0,a.kt)("inlineCode",{parentName:"p"},"*.yaml")," file by invoking two simple Gradle tasks."),(0,a.kt)("h2",{id:"generate-yaml-files"},"Generate ",(0,a.kt)("inlineCode",{parentName:"h2"},"*.yaml")," files"),(0,a.kt)("p",null,"Every module (=subproject) that contains REST endpoints is scanned for Jakarta Annotations which are then used to\ngenerate a ",(0,a.kt)("inlineCode",{parentName:"p"},"*.yaml")," specification for that particular module. This means that there is one ",(0,a.kt)("inlineCode",{parentName:"p"},"*.yaml"),"file ",(0,a.kt)("em",{parentName:"p"},"per module"),",\nresulting in several ",(0,a.kt)("inlineCode",{parentName:"p"},"*.yaml")," files."),(0,a.kt)("p",null,"Those files are named ",(0,a.kt)("inlineCode",{parentName:"p"},"MODULENAME.yaml"),", e.g. ",(0,a.kt)("inlineCode",{parentName:"p"},"observability.yaml")," or ",(0,a.kt)("inlineCode",{parentName:"p"},"control.yaml"),"."),(0,a.kt)("p",null,"To re-generate those files, simply invoke"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-shell"},"./gradlew clean resolve\n")),(0,a.kt)("p",null,"This will generate all ",(0,a.kt)("inlineCode",{parentName:"p"},"*.yaml")," files in the ",(0,a.kt)("inlineCode",{parentName:"p"},"resources/openapi/yaml")," directory."),(0,a.kt)("h2",{id:"gradle-plugins"},"Gradle Plugins"),(0,a.kt)("p",null,"We use the official Swagger Gradle plugins:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},'"io.swagger.core.v3.swagger-gradle-plugin"'),": used to generate a ",(0,a.kt)("inlineCode",{parentName:"li"},"*.yaml")," file per module")),(0,a.kt)("p",null,"So in order for a module to be picked up by the Swagger Gradle plugin, simply add it to the ",(0,a.kt)("inlineCode",{parentName:"p"},"build.gradle.kts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'// in yourModule/build.gradle.kts\n\nval rsApi: String by project\n\nplugins {\n    `java-library`\n    id("io.swagger.core.v3.swagger-gradle-plugin") //<-- add this\n}\n\ndependencies {\n    implementation("jakarta.ws.rs:jakarta.ws.rs-api:${rsApi}") //<-- you\'ll probably already have this\n    // other dependencies\n}\n\n')),(0,a.kt)("p",null,"If you developed a REST endpoint, you very likely already have the ",(0,a.kt)("inlineCode",{parentName:"p"},"jakarta.ws.rs:....")," part in your build file. If you\ndon't, it'll get added automatically for you."),(0,a.kt)("h3",{id:"categorizing-your-api"},"Categorizing your API"),(0,a.kt)("p",null,'All APIs in EDC should be "categorized", i.e. they should belong to a certain group of APIs.\nPlease see ',(0,a.kt)("a",{parentName:"p",href:"/edc-docs/docs/submodule/Connector/docs/developer/decision-records/2022-11-09-api-refactoring/renaming"},"this decision record")," for reference. In order to\nadd your module to one of the categories, simply add this block to your module's ",(0,a.kt)("inlineCode",{parentName:"p"},"build.gradle.kts"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-kotlin"},'plugins {\n    `java-library`\n    id("io.swagger.core.v3.swagger-gradle-plugin")\n}\n\ndependencies {\n    // ...\n}\n\n// add this block:\nedcBuild {\n    swagger {\n        apiGroup.set("management-api")\n    }\n}\n')),(0,a.kt)("p",null,"This tells the build plugin how to categorize your API and SwaggerHub will list it accordingly.\n",(0,a.kt)("em",{parentName:"p"},"Note: currently we have categories for ",(0,a.kt)("inlineCode",{parentName:"em"},"control-api")," and ",(0,a.kt)("inlineCode",{parentName:"em"},"management-api"))),(0,a.kt)("h2",{id:"how-to-generate-code"},"How to generate code"),(0,a.kt)("p",null,"This feature does ",(0,a.kt)("strong",{parentName:"p"},"neither")," expose the generated files through a REST endpoint providing any sort of live try-out\nfeature, ",(0,a.kt)("strong",{parentName:"p"},"nor")," does it generate any sort of client code. A visual documentation page for our APIs is served\nthrough ",(0,a.kt)("a",{parentName:"p",href:"https://app.swaggerhub.com/home?type=API"},"SwaggerHub"),"."),(0,a.kt)("p",null,"However, there is Gradle plugin capable of generating client code.\nPlease refer to the ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/int128/gradle-swagger-generator-plugin"},"official documentation"),"."))}c.isMDXComponent=!0}}]);