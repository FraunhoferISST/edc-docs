"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[4367],{3905:(e,t,a)=>{a.d(t,{Zo:()=>d,kt:()=>m});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},o=Object.keys(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)a=o[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var c=n.createContext({}),s=function(e){var t=n.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},d=function(e){var t=s(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},u=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(a),m=r,f=u["".concat(c,".").concat(m)]||u[m]||p[m]||o;return a?n.createElement(f,i(i({ref:t},d),{},{components:a})):n.createElement(f,i({ref:t},d))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=a.length,i=new Array(o);i[0]=u;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var s=2;s<o;s++)i[s]=a[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}u.displayName="MDXCreateElement"},80272:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>l,toc:()=>s});var n=a(87462),r=(a(67294),a(3905));const o={},i="Federated Catalog",l={unversionedId:"submodule/MinimumViableDataspace/docs/developer/decision-records/2022-04-28-federated-catalog/README",id:"submodule/MinimumViableDataspace/docs/developer/decision-records/2022-04-28-federated-catalog/README",title:"Federated Catalog",description:"Decision",source:"@site/docs/submodule/MinimumViableDataspace/docs/developer/decision-records/2022-04-28-federated-catalog/README.md",sourceDirName:"submodule/MinimumViableDataspace/docs/developer/decision-records/2022-04-28-federated-catalog",slug:"/submodule/MinimumViableDataspace/docs/developer/decision-records/2022-04-28-federated-catalog/",permalink:"/edc-docs/docs/submodule/MinimumViableDataspace/docs/developer/decision-records/2022-04-28-federated-catalog/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/MinimumViableDataspace/docs/developer/decision-records/2022-04-28-federated-catalog/README.md",tags:[],version:"current",frontMatter:{}},c={},s=[{value:"Decision",id:"decision",level:2},{value:"Registration Service",id:"registration-service",level:4},{value:"Json files as data source",id:"json-files-as-data-source",level:4},{value:"Rationale",id:"rationale",level:2}],d={toc:s};function p(e){let{components:t,...a}=e;return(0,r.kt)("wrapper",(0,n.Z)({},d,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"federated-catalog"},"Federated Catalog"),(0,r.kt)("h2",{id:"decision"},"Decision"),(0,r.kt)("p",null,"Use Registration Service API to seed federated catalog of all participant EDC instances."),(0,r.kt)("h4",{id:"registration-service"},"Registration Service"),(0,r.kt)("p",null,"The deployment pipeline deploys one instance of Registration Service in MVD set up. The Registration Service instance is configured to use json\nfiles as a data source and exposes the data via REST API."),(0,r.kt)("h4",{id:"json-files-as-data-source"},"Json files as data source"),(0,r.kt)("p",null,"The deployment pipeline for each participant creates a file in common folder in a file share, with a prefix corresponding to each unique deployment. For example, when deploying participants ",(0,r.kt)("inlineCode",{parentName:"p"},"company1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"company2"),", the files could be named:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"280-company1.json")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"280-company2.json"))),(0,r.kt)("p",null,"Here ",(0,r.kt)("inlineCode",{parentName:"p"},"280-")," is an arbitrary prefix for one dataspace (in continuous delivery, one deployment)."),(0,r.kt)("p",null,"Each file contains a serialized EDC ",(0,r.kt)("inlineCode",{parentName:"p"},"FederatedCacheNode")," object, for example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "name": "company1",\n  "supportedProtocols": [\n    "ids-multipart"\n  ],\n  "url": "http://280-company1-edc-mvd.eastus.azurecontainer.io:8282"\n}\n\n')),(0,r.kt)("h2",{id:"rationale"},"Rationale"),(0,r.kt)("p",null,"URLs of deployed EDC instances are only known after deployment in parallel Terraform runs."),(0,r.kt)("p",null,"Until ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/eclipse-dataspaceconnector/DataSpaceConnector/issues/1230"},"the federated catalog node list can be dynamically updated"),", this requires restarting the connectors after all catalog files have been stored."))}p.isMDXComponent=!0}}]);