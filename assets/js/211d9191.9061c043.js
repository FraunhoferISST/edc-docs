"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[530],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>s});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=r.createContext({}),c=function(e){var t=r.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=c(e.components);return r.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,d=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=c(n),s=a,f=u["".concat(d,".").concat(s)]||u[s]||m[s]||o;return n?r.createElement(f,i(i({ref:t},p),{},{components:n})):r.createElement(f,i({ref:t},p))}));function s(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var d in t)hasOwnProperty.call(t,d)&&(l[d]=t[d]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var c=2;c<o;c++)i[c]=n[c];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}u.displayName="MDXCreateElement"},1046:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var r=n(7462),a=(n(7294),n(3905));const o={},i="OAuth 2 Identity Service",l={unversionedId:"submodule/Connector/extensions/common/iam/oauth2/oauth2-core/README",id:"submodule/Connector/extensions/common/iam/oauth2/oauth2-core/README",title:"OAuth 2 Identity Service",description:"This extension provides an IdentityService implementation based on the OAuth2 protocol for authorization.",source:"@site/docs/submodule/Connector/extensions/common/iam/oauth2/oauth2-core/README.md",sourceDirName:"submodule/Connector/extensions/common/iam/oauth2/oauth2-core",slug:"/submodule/Connector/extensions/common/iam/oauth2/oauth2-core/",permalink:"/edc-docs/docs/submodule/Connector/extensions/common/iam/oauth2/oauth2-core/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/extensions/common/iam/oauth2/oauth2-core/README.md",tags:[],version:"current",frontMatter:{}},d={},c=[{value:"Configuration",id:"configuration",level:2},{value:"Extensions",id:"extensions",level:2},{value:"CredentialsRequestAdditionalParametersProvider",id:"credentialsrequestadditionalparametersprovider",level:3}],p={toc:c};function m(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"oauth-2-identity-service"},"OAuth 2 Identity Service"),(0,a.kt)("p",null,"This extension provides an ",(0,a.kt)("inlineCode",{parentName:"p"},"IdentityService")," implementation based on the OAuth2 protocol for authorization."),(0,a.kt)("h2",{id:"configuration"},"Configuration"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Parameter name"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Mandatory"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Default value"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"edc.oauth.token.url")),(0,a.kt)("td",{parentName:"tr",align:"left"},"URL of the authorization server"),(0,a.kt)("td",{parentName:"tr",align:"left"},"true"),(0,a.kt)("td",{parentName:"tr",align:"left"},"null")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"edc.oauth.provider.audience")),(0,a.kt)("td",{parentName:"tr",align:"left"},"Provider audience to be put in the outgoing token as 'aud' claim"),(0,a.kt)("td",{parentName:"tr",align:"left"},"false"),(0,a.kt)("td",{parentName:"tr",align:"left"},"id of the connector")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"edc.oauth.endpoint.audience")),(0,a.kt)("td",{parentName:"tr",align:"left"},"Endpoint audience to verify incoming token 'aud' claim"),(0,a.kt)("td",{parentName:"tr",align:"left"},"false"),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"edc.oauth.provider.audience")," value")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"edc.oauth.provider.jwks.url")),(0,a.kt)("td",{parentName:"tr",align:"left"},"URL from which well-known public keys of Authorization server can be fetched"),(0,a.kt)("td",{parentName:"tr",align:"left"},"false"),(0,a.kt)("td",{parentName:"tr",align:"left"},"http://localhost/empty_jwks_url")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"edc.oauth.certificate.alias")),(0,a.kt)("td",{parentName:"tr",align:"left"},"Alias of public associated with client certificate"),(0,a.kt)("td",{parentName:"tr",align:"left"},"true"),(0,a.kt)("td",{parentName:"tr",align:"left"},"null")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"edc.oauth.private.key.alias")),(0,a.kt)("td",{parentName:"tr",align:"left"},"Alias of private key (used to sign the token)"),(0,a.kt)("td",{parentName:"tr",align:"left"},"true"),(0,a.kt)("td",{parentName:"tr",align:"left"},"null")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"edc.oauth.provider.jwks.refresh")),(0,a.kt)("td",{parentName:"tr",align:"left"},"Interval at which public keys are refreshed from Authorization server (in minutes)"),(0,a.kt)("td",{parentName:"tr",align:"left"},"false"),(0,a.kt)("td",{parentName:"tr",align:"left"},"5")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"edc.oauth.client.id")),(0,a.kt)("td",{parentName:"tr",align:"left"},"Public identifier of the client"),(0,a.kt)("td",{parentName:"tr",align:"left"},"true"),(0,a.kt)("td",{parentName:"tr",align:"left"},"null")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"edc.oauth.validation.nbf.leeway")),(0,a.kt)("td",{parentName:"tr",align:"left"},"Leeway in seconds added to current time to remedy clock skew on notBefore claim validation"),(0,a.kt)("td",{parentName:"tr",align:"left"},"false"),(0,a.kt)("td",{parentName:"tr",align:"left"},"10")))),(0,a.kt)("h2",{id:"extensions"},"Extensions"),(0,a.kt)("h3",{id:"credentialsrequestadditionalparametersprovider"},"CredentialsRequestAdditionalParametersProvider"),(0,a.kt)("p",null,"An instance of the ",(0,a.kt)("inlineCode",{parentName:"p"},"CredentialsRequestAdditionalParametersProvider")," service interface can be provided to have the\npossibility to enrich the form parameters of the client credentials token request"))}m.isMDXComponent=!0}}]);