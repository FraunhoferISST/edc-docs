"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[7670],{3905:(e,t,r)=>{r.d(t,{Zo:()=>i,kt:()=>d});var o=r(7294);function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,o)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){n(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,o,n=function(e,t){if(null==e)return{};var r,o,n={},a=Object.keys(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)r=a[o],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var u=o.createContext({}),l=function(e){var t=o.useContext(u),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},i=function(e){var t=l(e.components);return o.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return o.createElement(o.Fragment,{},t)}},p=o.forwardRef((function(e,t){var r=e.components,n=e.mdxType,a=e.originalType,u=e.parentName,i=c(e,["components","mdxType","originalType","parentName"]),p=l(r),d=n,f=p["".concat(u,".").concat(d)]||p[d]||m[d]||a;return r?o.createElement(f,s(s({ref:t},i),{},{components:r})):o.createElement(f,s({ref:t},i))}));function d(e,t){var r=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=r.length,s=new Array(a);s[0]=p;var c={};for(var u in t)hasOwnProperty.call(t,u)&&(c[u]=t[u]);c.originalType=e,c.mdxType="string"==typeof e?e:n,s[1]=c;for(var l=2;l<a;l++)s[l]=r[l];return o.createElement.apply(null,s)}return o.createElement.apply(null,r)}p.displayName="MDXCreateElement"},1710:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>u,contentTitle:()=>s,default:()=>m,frontMatter:()=>a,metadata:()=>c,toc:()=>l});var o=r(7462),n=(r(7294),r(3905));const a={},s="Azure Test",c={unversionedId:"submodule/Connector/extensions/common/azure/azure-test/README",id:"submodule/Connector/extensions/common/azure/azure-test/README",title:"Azure Test",description:"Blobstorage",source:"@site/docs/submodule/Connector/extensions/common/azure/azure-test/README.md",sourceDirName:"submodule/Connector/extensions/common/azure/azure-test",slug:"/submodule/Connector/extensions/common/azure/azure-test/",permalink:"/edc-docs/docs/submodule/Connector/extensions/common/azure/azure-test/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/extensions/common/azure/azure-test/README.md",tags:[],version:"current",frontMatter:{}},u={},l=[{value:"Blobstorage",id:"blobstorage",level:2},{value:"CosmosDB",id:"cosmosdb",level:2}],i={toc:l};function m(e){let{components:t,...r}=e;return(0,n.kt)("wrapper",(0,o.Z)({},i,r,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"azure-test"},"Azure Test"),(0,n.kt)("h2",{id:"blobstorage"},"Blobstorage"),(0,n.kt)("p",null,"To run Azure Blob Integration tests you need to run an instance of ",(0,n.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/azure/storage/common/storage-use-azurite"},"Azurite")," locally:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'docker run -p 10000:10000 -e "AZURITE_ACCOUNTS=account1:key1;account2:key2" mcr.microsoft.com/azure-storage/azurite\n')),(0,n.kt)("h2",{id:"cosmosdb"},"CosmosDB"),(0,n.kt)("p",null,(0,n.kt)("a",{parentName:"p",href:"https://docs.microsoft.com/en-us/azure/cosmos-db/linux-emulator"},"CosmosDB Emulator")," is the tool you need for tests."),(0,n.kt)("p",null,"First, you need to export a variable with your ip address:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"export IP_ADDRESS=$(ip addr | grep \"inet \" | grep -Fv 127.0.0.1 | awk '{print $2}' | head -n 1 | cut -d/ -f1)\n")),(0,n.kt)("p",null,"Then run the CosmosDB Emulator image:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"docker run --rm -d -p 8081:8081 -p 10251:10251 -p 10252:10252 -p 10253:10253 -p 10254:10254 --name=test-linux-emulator \\ \n    -e AZURE_COSMOS_EMULATOR_PARTITION_COUNT=6 -e AZURE_COSMOS_EMULATOR_IP_ADDRESS_OVERRIDE=$IP_ADDRESS \\\n    -it mcr.microsoft.com/cosmosdb/linux/azure-cosmos-emulator\n")))}m.isMDXComponent=!0}}]);