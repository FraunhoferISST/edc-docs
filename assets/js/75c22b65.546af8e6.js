"use strict";(self.webpackChunkedc_docs=self.webpackChunkedc_docs||[]).push([[4341],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),h=c(n),f=r,u=h["".concat(l,".").concat(f)]||h[f]||p[f]||o;return n?a.createElement(u,i(i({ref:t},d),{},{components:n})):a.createElement(u,i({ref:t},d))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var c=2;c<o;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},693:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var a=n(7462),r=(n(7294),n(3905));const o={},i="Perform a contract negotiation",s={unversionedId:"submodule/Connector/samples/04.0-file-transfer/README",id:"submodule/Connector/samples/04.0-file-transfer/README",title:"Perform a contract negotiation",description:"After successfully providing custom configuration properties to the EDC, we will perform a data transfer next: transmit",source:"@site/docs/submodule/Connector/samples/04.0-file-transfer/README.md",sourceDirName:"submodule/Connector/samples/04.0-file-transfer",slug:"/submodule/Connector/samples/04.0-file-transfer/",permalink:"/edc-docs/docs/submodule/Connector/samples/04.0-file-transfer/",draft:!1,editUrl:"https://github.com/FraunhoferISST/edc-docs/tree/master/docs/submodule/Connector/samples/04.0-file-transfer/README.md",tags:[],version:"current",frontMatter:{}},l={},c=[{value:"Create the file transfer extension",id:"create-the-file-transfer-extension",level:2},{value:"Create the status checker extension",id:"create-the-status-checker-extension",level:2},{value:"Create the connectors",id:"create-the-connectors",level:2},{value:"Provider connector",id:"provider-connector",level:3},{value:"Consumer connector",id:"consumer-connector",level:3},{value:"Run the sample",id:"run-the-sample",level:2},{value:"1. Build and start the connectors",id:"1-build-and-start-the-connectors",level:3},{value:"2. Initiate a contract negotiation",id:"2-initiate-a-contract-negotiation",level:3},{value:"3. Look up the contract agreement ID",id:"3-look-up-the-contract-agreement-id",level:3},{value:"4. Request the file",id:"4-request-the-file",level:3},{value:"5. See transferred file",id:"5-see-transferred-file",level:3}],d={toc:c};function p(e){let{components:t,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},d,o,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"perform-a-contract-negotiation"},"Perform a contract negotiation"),(0,r.kt)("p",null,"After successfully providing custom configuration properties to the EDC, we will perform a data transfer next: transmit\na test file from one connector to another connector. We want to keep things simple, so we will run both connectors on\nthe same physical machine (i.e. your development machine) and the file is transferred from one folder in the file system\nto another folder. It is not difficult to imagine that instead of the local file system, the transfer happens between\nmore sophisticated storage locations, like a database or a cloud storage."),(0,r.kt)("p",null,"This is quite a big step up from the previous sample, where we ran only one connector. Those are the concrete tasks:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Creating an additional connector, so that in the end we have two connectors, a consumer and a provider"),(0,r.kt)("li",{parentName:"ul"},"Providing communication between provider and consumer using IDS multipart messages"),(0,r.kt)("li",{parentName:"ul"},"Utilizing the management API to interact with the connector system"),(0,r.kt)("li",{parentName:"ul"},"Performing a contract negotiation between provider and consumer"),(0,r.kt)("li",{parentName:"ul"},"Performing a file transfer",(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"The consumer will initiate a file transfer"),(0,r.kt)("li",{parentName:"ul"},"The provider will fulfill that request and copy a file to the desired location")))),(0,r.kt)("p",null,"Also, in order to keep things organized, the code in this example has been separated into several Java modules:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"[consumer|provider]"),": contains the configuration and build files for both the consumer and the provider connector"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"transfer-file"),": contains all the code necessary for the file transfer, integrated on provider side"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"status-checker"),": contains the code for checking if the file has been transfer, integrated on the consumer side")),(0,r.kt)("h2",{id:"create-the-file-transfer-extension"},"Create the file transfer extension"),(0,r.kt)("p",null,'The provider connector needs to transfer a file to the location specified by the consumer connector when the data is\nrequested. In order to offer any data, the provider must maintain an internal list of assets that are available for\ntransfer, the so-called "catalog". For the sake of simplicity we use an in-memory catalog and pre-fill it with just one\nsingle class. The provider also needs to create a contract offer for the asset, based on which a contract agreement can\nbe negotiated. For this, we also use an in-memory store and add a single contract definition that is valid for the\nasset.'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-java"},'// in FileTransferExtension.java\n@Override\npublic void initialize(ServiceExtensionContext context){\n    // ...\n    var policy = createPolicy();\n    policyStore.save(policy);\n    \n    registerDataEntries(context);\n    registerContractDefinition(policy.getUid());\n    // ...\n}\n\n//...\n\nprivate void registerDataEntries(ServiceExtensionContext context) {\n    var assetPathSetting = context.getSetting(EDC_ASSET_PATH, "/tmp/provider/test-document.txt");\n    var assetPath = Path.of(assetPathSetting);\n    \n    var dataAddress = DataAddress.Builder.newInstance()\n            .property("type", "File")\n            .property("path", assetPath.getParent().toString())\n            .property("filename", assetPath.getFileName().toString())\n            .build();\n    \n    var assetId = "test-document";\n    var asset = Asset.Builder.newInstance().id(assetId).build();\n    \n    loader.accept(asset, dataAddress);\n}\n\nprivate void registerContractDefinition(String uid) {\n    var contractDefinition = ContractDefinition.Builder.newInstance()\n            .id("1")\n            .accessPolicyId(uid)\n            .contractPolicyId(uid)\n            .selectorExpression(AssetSelectorExpression.Builder.newInstance()\n                    .whenEquals(Asset.PROPERTY_ID, "test-document")\n                    .build())\n            .build();\n    \n    contractStore.save(contractDefinition);\n}\n')),(0,r.kt)("p",null,"This adds an ",(0,r.kt)("inlineCode",{parentName:"p"},"Asset")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"AssetIndex")," and the relative ",(0,r.kt)("inlineCode",{parentName:"p"},"DataAddress")," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"DataAddressResolver"),'.\nOr, in other words, your provider now "hosts" one file named ',(0,r.kt)("inlineCode",{parentName:"p"},"test-document.txt")," located in the path\nconfigured by the setting ",(0,r.kt)("inlineCode",{parentName:"p"},"edc.samples.04.asset.path")," on your development machine. It makes it available for transfer\nunder its ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," ",(0,r.kt)("inlineCode",{parentName:"p"},'"test-document"'),". While it makes sense to have some sort of similarity between file name and id, it\nis by no means mandatory."),(0,r.kt)("p",null,"It also adds a ",(0,r.kt)("inlineCode",{parentName:"p"},"ContractDefinition")," with ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," ",(0,r.kt)("inlineCode",{parentName:"p"},"1")," and a previously created ",(0,r.kt)("inlineCode",{parentName:"p"},"Policy")," (code omitted above), that poses no\nrestrictions on the data usage. The ",(0,r.kt)("inlineCode",{parentName:"p"},"ContractDefinition")," also has an ",(0,r.kt)("inlineCode",{parentName:"p"},"AssetSelectorExpression")," defining that it is\nvalid for all assets with the ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," ",(0,r.kt)("inlineCode",{parentName:"p"},"test-document"),". Thus, it is valid for the created asset."),(0,r.kt)("p",null,"Next to offering the file, the provider also needs to be able to transfer the file. Therefore, the ",(0,r.kt)("inlineCode",{parentName:"p"},"transfer-file"),"\nmodule also provides the code for copying the file to a specified location (code omitted here for brevity). It contains\nthe ",(0,r.kt)("a",{target:"_blank",href:n(411).Z},"FileTransferDataSource"),"\nand the ",(0,r.kt)("a",{target:"_blank",href:n(5831).Z},"FileTransferDataSink"),"\nas well as respective factories for both. The factories are registered with the ",(0,r.kt)("inlineCode",{parentName:"p"},"PipelineService")," in the\n",(0,r.kt)("a",{target:"_blank",href:n(4533).Z},"FileTransferExtension"),",\nthus making them available when a data request is processed."),(0,r.kt)("h2",{id:"create-the-status-checker-extension"},"Create the status checker extension"),(0,r.kt)("p",null,"The consumer needs to know when the file transfer has been completed. For doing that, in the extension\nwe are going to implement a custom ",(0,r.kt)("inlineCode",{parentName:"p"},"StatusChecker")," that will be registered with the ",(0,r.kt)("inlineCode",{parentName:"p"},"StatusCheckerRegistry")," in the\n",(0,r.kt)("a",{target:"_blank",href:n(2285).Z},"SampleStatusCheckerExtension"),"\nThe custom status checker will handle the check for the destination type ",(0,r.kt)("inlineCode",{parentName:"p"},"File")," and it will check that the path\nspecified in the data requests exists. The code is available in the\nclass ",(0,r.kt)("a",{target:"_blank",href:n(3475).Z},"SampleFileStatusChecker")),(0,r.kt)("h2",{id:"create-the-connectors"},"Create the connectors"),(0,r.kt)("p",null,"After creating the required extensions, we next need to create the two connectors. For both of them we need a gradle\nbuild file and a config file. Common dependencies we need to add to the build files on both sides are the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'// in consumer/build.gradle.kts and provider/build.gradle.kts:\nimplementation(project(":extensions:common:configuration:configuration-filesystem"))\n\nimplementation(project(":data-protocols:ids"))\nimplementation(project(":extensions:common:iam:iam-mock"))\n\nimplementation(project(":extensions:control-plane:api:management-api"))\nimplementation(project(":extensions:common:auth:auth-tokenbased"))\n')),(0,r.kt)("p",null,"Three of these dependencies are new and have not been used in the previous samples:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"data-protocols:ids"),": contains all IDS modules and therefore enables IDS Multipart communication with other connectors"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"extensions:iam:iam-mock"),": provides a no-op identity provider, which does not require certificates and performs no checks"),(0,r.kt)("li",{parentName:"ol"},(0,r.kt)("inlineCode",{parentName:"li"},"extensions:api:auth-tokenbased"),": adds authentication for management API endpoints")),(0,r.kt)("h3",{id:"provider-connector"},"Provider connector"),(0,r.kt)("p",null,"As the provider connector is the one performing the file transfer after the file has been requested by the consumer, it\nneeds the ",(0,r.kt)("inlineCode",{parentName:"p"},"transfer-file")," extension provided in this sample."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'implementation(project(":samples:04.0-file-transfer:transfer-file"))\n')),(0,r.kt)("p",null,"We also need to adjust the provider's ",(0,r.kt)("inlineCode",{parentName:"p"},"config.properties"),". The property ",(0,r.kt)("inlineCode",{parentName:"p"},"edc.samples.04.asset.path")," should point to an\nexisting file in our local environment, as this is the file that will be transferred. We also configure a separate API\ncontext for the management API, like we learned in previous chapter. Then we add the property\n",(0,r.kt)("inlineCode",{parentName:"p"},"ids.webhook.address"),", which should point to our provider connector's IDS address. This is used as the callback\naddress during the contract negotiation. Since the IDS API is running on a different port (default is ",(0,r.kt)("inlineCode",{parentName:"p"},"8282"),"), we set\nthe webhook address to ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8282")," accordingly."),(0,r.kt)("h3",{id:"consumer-connector"},"Consumer connector"),(0,r.kt)("p",null,'The consumer is the one "requesting" the data and providing a destination for it, i.e. a directory into which the\nprovider can copy the requested file.'),(0,r.kt)("p",null,"We configure the consumer's API ports in ",(0,r.kt)("inlineCode",{parentName:"p"},"consumer/config.properties"),", so that it does not use the same ports as the\nprovider. In the config file, we also need to configure the API key authentication, as we're going to use\nendpoints from the EDC's management API in this sample and integrated the extension for token-based API\nauthentication. Therefore, we add the property ",(0,r.kt)("inlineCode",{parentName:"p"},"edc.api.auth.key")," and set it to e.g. ",(0,r.kt)("inlineCode",{parentName:"p"},"password"),". And last, we also need\nto configure the consumer's webhook address. We expose the IDS API endpoints on a different port and path than other\nendpoints, so the property ",(0,r.kt)("inlineCode",{parentName:"p"},"ids.webhook.address")," is adjusted to match the IDS API port."),(0,r.kt)("p",null,"The consumer connector also needs the ",(0,r.kt)("inlineCode",{parentName:"p"},"status-checker")," extension for marking the transfer as completed on the consumer\nside."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-kotlin"},'implementation(project(":samples:04.0-file-transfer:status-checker"))\n')),(0,r.kt)("h2",{id:"run-the-sample"},"Run the sample"),(0,r.kt)("p",null,"Running this sample consists of multiple steps, that are executed one by one."),(0,r.kt)("h3",{id:"1-build-and-start-the-connectors"},"1. Build and start the connectors"),(0,r.kt)("p",null,"The first step to running this sample is building and starting both the provider and the consumer connector. This is\ndone the same way as in the previous samples."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"./gradlew samples:04.0-file-transfer:consumer:build\njava -Dedc.fs.config=samples/04.0-file-transfer/consumer/config.properties -jar samples/04.0-file-transfer/consumer/build/libs/consumer.jar\n# in another terminal window:\n./gradlew samples:04.0-file-transfer:provider:build\njava -Dedc.fs.config=samples/04.0-file-transfer/provider/config.properties -jar samples/04.0-file-transfer/provider/build/libs/provider.jar\n")),(0,r.kt)("p",null,"Assuming you didn't change the ports in config files, the consumer will listen on the ports ",(0,r.kt)("inlineCode",{parentName:"p"},"9191"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"9192"),"\n(management API) and ",(0,r.kt)("inlineCode",{parentName:"p"},"9292")," (IDS API) and the provider will listen on the ports ",(0,r.kt)("inlineCode",{parentName:"p"},"8181"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"8182"),"\n(management API) and ",(0,r.kt)("inlineCode",{parentName:"p"},"8282")," (IDS API)."),(0,r.kt)("h3",{id:"2-initiate-a-contract-negotiation"},"2. Initiate a contract negotiation"),(0,r.kt)("p",null,"In order to request any data, a contract agreement has to be negotiated between provider and consumer. The provider\noffers all of their assets in the form of contract offers, which are the basis for such a negotiation. In the\n",(0,r.kt)("inlineCode",{parentName:"p"},"transfer-file")," extension, we've added a contract definition (from which contract offers can be created) for the\nfile, but the consumer has yet to accept this offer."),(0,r.kt)("p",null,"The consumer now needs to initiate a contract negotiation sequence with the provider. That sequence looks as follows:"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"Consumer sends a contract offer to the provider (",(0,r.kt)("strong",{parentName:"li"},"currently, this has to be equal to the provider's offer!"),")"),(0,r.kt)("li",{parentName:"ol"},"Provider validates the received offer against its own offer"),(0,r.kt)("li",{parentName:"ol"},"Provider either sends an agreement or a rejection, depending on the validation result"),(0,r.kt)("li",{parentName:"ol"},"In case of successful validation, provider and consumer store the received agreement for later reference")),(0,r.kt)("p",null,"Of course, this is the simplest possible negotiation sequence. Later on, both connectors can also send counter offers in\naddition to just confirming or declining an offer."),(0,r.kt)("p",null,"In order to trigger the negotiation, we use a management API endpoint. We set our contract offer in the request\nbody. The contract offer is prepared in ",(0,r.kt)("a",{target:"_blank",href:n(4635).Z},"contractoffer.json")," and can be used as is. In a real\nscenario, a potential consumer would first need to request a description of the provider's offers in order to get the\nprovider's contract offer."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note, that we need to specify the ",(0,r.kt)("inlineCode",{parentName:"p"},"X-Api-Key")," header, as we integrated token-based API authentication. The value\nof the header has to match the value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"edc.api.auth.key")," property in the consumer's ",(0,r.kt)("inlineCode",{parentName:"p"},"config.properties"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST -H "Content-Type: application/json" -H "X-Api-Key: password" -d @samples/04.0-file-transfer/contractoffer.json "http://localhost:9192/api/v1/management/contractnegotiations"\n')),(0,r.kt)("p",null,"In the response we'll get a UUID that we can use to get the contract agreement negotiated between provider and consumer."),(0,r.kt)("p",null,"Sample output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"id":"5a6b7e22-dc7d-4135-bc98-4cc5fd1dd1ed"}\n')),(0,r.kt)("h3",{id:"3-look-up-the-contract-agreement-id"},"3. Look up the contract agreement ID"),(0,r.kt)("p",null,"After calling the endpoint for initiating a contract negotiation, we get a UUID as the response. This UUID is the ID of\nthe ongoing contract negotiation between consumer and provider. The negotiation sequence between provider and consumer\nis executed asynchronously in the background by a state machine. Once both provider and consumer either reach the\n",(0,r.kt)("inlineCode",{parentName:"p"},"confirmed")," or the  ",(0,r.kt)("inlineCode",{parentName:"p"},"declined")," state, the negotiation is finished. We can now use the UUID to check the current status\nof the negotiation using an endpoint on the consumer side. Again, we use the ",(0,r.kt)("inlineCode",{parentName:"p"},"X-Api-Key")," header with the same value\nthat's set in our consumer's ",(0,r.kt)("inlineCode",{parentName:"p"},"config.properties"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"curl -X GET -H 'X-Api-Key: password' \"http://localhost:9192/api/v1/management/contractnegotiations/{UUID}\"\n")),(0,r.kt)("p",null,"This will return information about the negotiation, which contains e.g. the current state of the negotiation and, if the\nnegotiation has been completed successfully, the ID of a contract agreement. We can now use this agreement to request\nthe file. So we copy and store the agreement ID for the next step."),(0,r.kt)("p",null,"Sample output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ...\n  "contractAgreementId":"1:45d5b9d2-97b6-4073-8e11-e0e0f44a3538",\n  "state":"CONFIRMED",\n  ...\n}\n')),(0,r.kt)("p",null,"If you see an output similar to the following, the negotiation has not yet been completed. In this case,\njust wait for a moment and call the endpoint again."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  ...\n  "state": "REQUESTED",\n  "contractAgreementId": null,\n  ...\n}\n')),(0,r.kt)("h3",{id:"4-request-the-file"},"4. Request the file"),(0,r.kt)("p",null,"Now that we have a contract agreement, we can finally request the file. In the request body we need to specify\nwhich asset we want transferred, the ID of the contract agreement, the address of the provider connector and where\nwe want the file transferred. The request body is prepared in ",(0,r.kt)("a",{target:"_blank",href:n(9224).Z},"filetransfer.json"),". Before executing\nthe request, insert the contract agreement ID from the previous step and adjust the destination location for the file\ntransfer. Then run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},'curl -X POST -H "Content-Type: application/json" -H "X-Api-Key: password" -d @samples/04.0-file-transfer/filetransfer.json "http://localhost:9192/api/v1/management/transferprocess"\n')),(0,r.kt)("p",null,"Again, we will get a UUID in the response. This time, this is the ID of the ",(0,r.kt)("inlineCode",{parentName:"p"},"TransferProcess")," created on the consumer\nside, because like the contract negotiation, the data transfer is handled in a state machine and performed asynchronously."),(0,r.kt)("p",null,"Sample output:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{"id":"deeed974-8a43-4fd5-93ad-e1b8c26bfa44"}\n')),(0,r.kt)("p",null,"Since transferring a file does not require any resource provisioning on either side, the transfer will be very quick and\nmost likely already done by the time you read the UUID."),(0,r.kt)("hr",null),(0,r.kt)("p",null,"You can also check the logs of the connectors to see that the transfer has been completed:"),(0,r.kt)("p",null,"Consumer side:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"DEBUG 2022-05-03T10:37:59.599642754 Starting transfer for asset asset-id\nDEBUG 2022-05-03T10:37:59.6071347 Transfer process initialised f925131b-d61e-48b9-aa15-0f5e2e749064\nDEBUG 2022-05-03T10:38:01.230902645 TransferProcessManager: Sending process f925131b-d61e-48b9-aa15-0f5e2e749064 request to http://localhost:8282/api/v1/ids/data\nDEBUG 2022-05-03T10:38:01.260916372 Response received from connector. Status 200\nDEBUG 2022-05-03T10:38:01.285641788 TransferProcessManager: Process f925131b-d61e-48b9-aa15-0f5e2e749064 is now REQUESTED\nDEBUG 2022-05-03T10:38:06.246094874 Process f925131b-d61e-48b9-aa15-0f5e2e749064 is now IN_PROGRESS\nDEBUG 2022-05-03T10:38:06.246755642 Process f925131b-d61e-48b9-aa15-0f5e2e749064 is now COMPLETED\n")),(0,r.kt)("h3",{id:"5-see-transferred-file"},"5. See transferred file"),(0,r.kt)("p",null,"After the file transfer is completed, we can check the destination path specified in the request for the file. Here,\nwe'll now find a file with the same content as the original file offered by the provider."),(0,r.kt)("hr",null),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/edc-docs/docs/submodule/Connector/samples/configuration/"},"Previous Chapter")," | ",(0,r.kt)("a",{parentName:"p",href:"/edc-docs/docs/submodule/Connector/samples/04.1-file-transfer-listener/"},"Next Chapter")))}p.isMDXComponent=!0},4635:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/contractoffer-6ef7f216f3bd4328a127d630fc07e01f.json"},9224:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/filetransfer-b03ab07035000ba6cb106b0cc074e970.json"},3475:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/SampleFileStatusChecker-14289605c2e9337ee577a6d4d29b3439.java"},2285:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/SampleStatusCheckerExtension-eb0cd14e7745f03b2325d70aa572cd60.java"},5831:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/FileTransferDataSink-2ed8dc5c5f15481efbdc79dd4ff61f63.java"},411:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/FileTransferDataSource-e635e03c954feb305b00a6a647e6739b.java"},4533:(e,t,n)=>{n.d(t,{Z:()=>a});const a=n.p+"assets/files/FileTransferExtension-a3acfca94d34b3f92ad92cc292a8fba0.java"}}]);